/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"


#line 4 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxstatus.sip"
#include <fbxsdk.h>
#line 44 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxCache.cpp"


PyDoc_STRVAR(doc_FbxCache_Create, "Create(FbxManager, str) -> FbxCache\n"
"Create(FbxObject, str) -> FbxCache");

extern "C" {static PyObject *meth_FbxCache_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_Create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8A8", &sipSelf, sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxCache*sipRes;

            sipRes =  ::FbxCache::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxCache,SIP_NULLPTR);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8A8", &sipSelf, sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxCache*sipRes;

            sipRes =  ::FbxCache::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxCache,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_Create, doc_FbxCache_Create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxCache_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxCache)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCache, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxCache::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_GetClassId, doc_FbxCache_GetClassId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_SetCacheFileFormat, "SetCacheFileFormat(self, FbxCache.EFileFormat, FbxStatus = None)");

extern "C" {static PyObject *meth_FbxCache_SetCacheFileFormat(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_SetCacheFileFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxCache::EFileFormat a0;
         ::FbxStatus* a1 = 0;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE|J8", &sipSelf, sipType_FbxCache, &sipCpp, sipType_FbxCache_EFileFormat, &a0, sipType_FbxStatus, &a1))
        {
            sipCpp->SetCacheFileFormat(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_SetCacheFileFormat, doc_FbxCache_SetCacheFileFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_GetCacheFileFormat, "GetCacheFileFormat(self) -> FbxCache.EFileFormat");

extern "C" {static PyObject *meth_FbxCache_GetCacheFileFormat(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_GetCacheFileFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCache, &sipCpp))
        {
             ::FbxCache::EFileFormat sipRes;

            sipRes = sipCpp->GetCacheFileFormat();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_FbxCache_EFileFormat);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_GetCacheFileFormat, doc_FbxCache_GetCacheFileFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_SetCacheFileName, "SetCacheFileName(self, str, str, FbxStatus = None)");

extern "C" {static PyObject *meth_FbxCache_SetCacheFileName(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_SetCacheFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const char* a1;
        PyObject *a1Keep;
         ::FbxStatus* a2 = 0;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8A8|J8", &sipSelf, sipType_FbxCache, &sipCpp, &a0Keep, &a0, &a1Keep, &a1, sipType_FbxStatus, &a2))
        {
            sipCpp->SetCacheFileName(a0,a1,a2);
            Py_DECREF(a0Keep);
            Py_DECREF(a1Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_SetCacheFileName, doc_FbxCache_SetCacheFileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_GetCacheFileName, "GetCacheFileName(self, FbxString, FbxString)");

extern "C" {static PyObject *meth_FbxCache_GetCacheFileName(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_GetCacheFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxString* a0;
        int a0State = 0;
         ::FbxString* a1;
        int a1State = 0;
        const  ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_FbxCache, &sipCpp, sipType_FbxString, &a0, &a0State, sipType_FbxString, &a1, &a1State))
        {
            sipCpp->GetCacheFileName(*a0,*a1);
            sipReleaseType(a0, sipType_FbxString, a0State);
            sipReleaseType(a1, sipType_FbxString, a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_GetCacheFileName, doc_FbxCache_GetCacheFileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_OpenFileForRead, "OpenFileForRead(self, FbxStatus = None) -> bool");

extern "C" {static PyObject *meth_FbxCache_OpenFileForRead(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_OpenFileForRead(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxStatus* a0 = 0;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J8", &sipSelf, sipType_FbxCache, &sipCpp, sipType_FbxStatus, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->OpenFileForRead(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_OpenFileForRead, doc_FbxCache_OpenFileForRead);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_IsOpen, "IsOpen(self, FbxStatus = None) -> bool");

extern "C" {static PyObject *meth_FbxCache_IsOpen(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_IsOpen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxStatus* a0 = 0;
        const  ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J8", &sipSelf, sipType_FbxCache, &sipCpp, sipType_FbxStatus, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->IsOpen(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_IsOpen, doc_FbxCache_IsOpen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_CloseFile, "CloseFile(self, FbxStatus = None) -> bool");

extern "C" {static PyObject *meth_FbxCache_CloseFile(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_CloseFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxStatus* a0 = 0;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J8", &sipSelf, sipType_FbxCache, &sipCpp, sipType_FbxStatus, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->CloseFile(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_CloseFile, doc_FbxCache_CloseFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_GetSamplingFrameRate, "GetSamplingFrameRate(self, FbxStatus = None) -> float");

extern "C" {static PyObject *meth_FbxCache_GetSamplingFrameRate(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_GetSamplingFrameRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxStatus* a0 = 0;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J8", &sipSelf, sipType_FbxCache, &sipCpp, sipType_FbxStatus, &a0))
        {
            double sipRes;

            sipRes = sipCpp->GetSamplingFrameRate(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_GetSamplingFrameRate, doc_FbxCache_GetSamplingFrameRate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_GetCacheTimePerFrame, "GetCacheTimePerFrame(self, FbxStatus = None) -> FbxTime");

extern "C" {static PyObject *meth_FbxCache_GetCacheTimePerFrame(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_GetCacheTimePerFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxStatus* a0 = 0;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J8", &sipSelf, sipType_FbxCache, &sipCpp, sipType_FbxStatus, &a0))
        {
             ::FbxTime*sipRes;

            sipRes = new  ::FbxTime(sipCpp->GetCacheTimePerFrame(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxTime,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_GetCacheTimePerFrame, doc_FbxCache_GetCacheTimePerFrame);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_OpenFileForWrite, "OpenFileForWrite(self, FbxCache.EMCFileCount, float, str, FbxCache.EMCBinaryFormat, FbxCache.EMCDataType = FbxCache.eDoubleVectorArray, str = \"Points\", FbxStatus = None) -> bool");

extern "C" {static PyObject *meth_FbxCache_OpenFileForWrite(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_OpenFileForWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxCache::EMCFileCount a0;
        double a1;
        const char* a2;
        PyObject *a2Keep;
         ::FbxCache::EMCBinaryFormat a3;
         ::FbxCache::EMCDataType a4 =  ::FbxCache::eDoubleVectorArray;
        const char* a5 = "Points";
        PyObject *a5Keep = 0;
         ::FbxStatus* a6 = 0;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEdA8E|EA8J8", &sipSelf, sipType_FbxCache, &sipCpp, sipType_FbxCache_EMCFileCount, &a0, &a1, &a2Keep, &a2, sipType_FbxCache_EMCBinaryFormat, &a3, sipType_FbxCache_EMCDataType, &a4, &a5Keep, &a5, sipType_FbxStatus, &a6))
        {
            bool sipRes;

            sipRes = sipCpp->OpenFileForWrite(a0,a1,a2,a3,a4,a5,a6);
            Py_DECREF(a2Keep);
            Py_XDECREF(a5Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_OpenFileForWrite, doc_FbxCache_OpenFileForWrite);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_AddChannel, "AddChannel(self, str, FbxCache.EMCDataType, str, FbxStatus = None) -> Tuple[bool, int]");

extern "C" {static PyObject *meth_FbxCache_AddChannel(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_AddChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxCache::EMCDataType a1;
        const char* a2;
        PyObject *a2Keep;
        uint a3;
         ::FbxStatus* a4 = 0;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8EA8|J8", &sipSelf, sipType_FbxCache, &sipCpp, &a0Keep, &a0, sipType_FbxCache_EMCDataType, &a1, &a2Keep, &a2, sipType_FbxStatus, &a4))
        {
            bool sipRes;

            sipRes = sipCpp->AddChannel(a0,a1,a2,a3,a4);
            Py_DECREF(a0Keep);
            Py_DECREF(a2Keep);

            return sipBuildResult(0,"(bu)",sipRes,a3);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_AddChannel, doc_FbxCache_AddChannel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_GetChannelCount, "GetChannelCount(self, FbxStatus = None) -> int");

extern "C" {static PyObject *meth_FbxCache_GetChannelCount(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_GetChannelCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxStatus* a0 = 0;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J8", &sipSelf, sipType_FbxCache, &sipCpp, sipType_FbxStatus, &a0))
        {
            int sipRes;

            sipRes = sipCpp->GetChannelCount(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_GetChannelCount, doc_FbxCache_GetChannelCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_GetChannelName, "GetChannelName(self, int, FbxString, FbxStatus = None) -> bool");

extern "C" {static PyObject *meth_FbxCache_GetChannelName(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_GetChannelName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::FbxString* a1;
        int a1State = 0;
         ::FbxStatus* a2 = 0;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1|J8", &sipSelf, sipType_FbxCache, &sipCpp, &a0, sipType_FbxString, &a1, &a1State, sipType_FbxStatus, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->GetChannelName(a0,*a1,a2);
            sipReleaseType(a1, sipType_FbxString, a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_GetChannelName, doc_FbxCache_GetChannelName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_GetChannelDataType, "GetChannelDataType(self, int, FbxStatus = None) -> Tuple[bool, FbxCache.EMCDataType]");

extern "C" {static PyObject *meth_FbxCache_GetChannelDataType(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_GetChannelDataType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::FbxCache::EMCDataType a1;
         ::FbxStatus* a2 = 0;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|J8", &sipSelf, sipType_FbxCache, &sipCpp, &a0, sipType_FbxStatus, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->GetChannelDataType(a0,a1,a2);

            return sipBuildResult(0,"(bF)",sipRes,a1,sipType_FbxCache_EMCDataType);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_GetChannelDataType, doc_FbxCache_GetChannelDataType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_GetChannelIndex, "GetChannelIndex(self, str, FbxStatus = None) -> int");

extern "C" {static PyObject *meth_FbxCache_GetChannelIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_GetChannelIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxStatus* a1 = 0;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8|J8", &sipSelf, sipType_FbxCache, &sipCpp, &a0Keep, &a0, sipType_FbxStatus, &a1))
        {
            int sipRes;

            sipRes = sipCpp->GetChannelIndex(a0,a1);
            Py_DECREF(a0Keep);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_GetChannelIndex, doc_FbxCache_GetChannelIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_GetAnimationRange, "GetAnimationRange(self, int, FbxStatus = None) -> Tuple[bool, FbxTime, FbxTime]");

extern "C" {static PyObject *meth_FbxCache_GetAnimationRange(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_GetAnimationRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::FbxTime* a1;
         ::FbxTime* a2;
         ::FbxStatus* a3 = 0;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|J8", &sipSelf, sipType_FbxCache, &sipCpp, &a0, sipType_FbxStatus, &a3))
        {
            bool sipRes;
            a1 = new  ::FbxTime();
            a2 = new  ::FbxTime();

            sipRes = sipCpp->GetAnimationRange(a0,*a1,*a2,a3);

            return sipBuildResult(0,"(bNN)",sipRes,a1,sipType_FbxTime,SIP_NULLPTR,a2,sipType_FbxTime,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_GetAnimationRange, doc_FbxCache_GetAnimationRange);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_GetCacheType, "GetCacheType(self, FbxStatus = None) -> Tuple[bool, FbxCache.EMCFileCount]");

extern "C" {static PyObject *meth_FbxCache_GetCacheType(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_GetCacheType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxCache::EMCFileCount a0;
         ::FbxStatus* a1 = 0;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J8", &sipSelf, sipType_FbxCache, &sipCpp, sipType_FbxStatus, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->GetCacheType(a0,a1);

            return sipBuildResult(0,"(bF)",sipRes,a0,sipType_FbxCache_EMCFileCount);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_GetCacheType, doc_FbxCache_GetCacheType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_GetChannelInterpretation, "GetChannelInterpretation(self, int, FbxStatus = None) -> Tuple[bool, FbxString]");

extern "C" {static PyObject *meth_FbxCache_GetChannelInterpretation(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_GetChannelInterpretation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::FbxString* a1;
         ::FbxStatus* a2 = 0;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|J8", &sipSelf, sipType_FbxCache, &sipCpp, &a0, sipType_FbxStatus, &a2))
        {
            bool sipRes;
            a1 = new  ::FbxString();

            sipRes = sipCpp->GetChannelInterpretation(a0,*a1,a2);

            return sipBuildResult(0,"(bN)",sipRes,a1,sipType_FbxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_GetChannelInterpretation, doc_FbxCache_GetChannelInterpretation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_GetChannelSamplingType, "GetChannelSamplingType(self, int, FbxStatus = None) -> Tuple[bool, FbxCache.EMCSamplingType]");

extern "C" {static PyObject *meth_FbxCache_GetChannelSamplingType(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_GetChannelSamplingType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::FbxCache::EMCSamplingType a1;
         ::FbxStatus* a2 = 0;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|J8", &sipSelf, sipType_FbxCache, &sipCpp, &a0, sipType_FbxStatus, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->GetChannelSamplingType(a0,a1,a2);

            return sipBuildResult(0,"(bF)",sipRes,a1,sipType_FbxCache_EMCSamplingType);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_GetChannelSamplingType, doc_FbxCache_GetChannelSamplingType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_GetChannelSamplingRate, "GetChannelSamplingRate(self, int, FbxStatus = None) -> Tuple[bool, FbxTime]");

extern "C" {static PyObject *meth_FbxCache_GetChannelSamplingRate(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_GetChannelSamplingRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::FbxTime* a1;
         ::FbxStatus* a2 = 0;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|J8", &sipSelf, sipType_FbxCache, &sipCpp, &a0, sipType_FbxStatus, &a2))
        {
            bool sipRes;
            a1 = new  ::FbxTime();

            sipRes = sipCpp->GetChannelSamplingRate(a0,*a1,a2);

            return sipBuildResult(0,"(bN)",sipRes,a1,sipType_FbxTime,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_GetChannelSamplingRate, doc_FbxCache_GetChannelSamplingRate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_GetChannelSampleCount, "GetChannelSampleCount(self, int, FbxStatus = None) -> Tuple[bool, int]");

extern "C" {static PyObject *meth_FbxCache_GetChannelSampleCount(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_GetChannelSampleCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        uint a1;
         ::FbxStatus* a2 = 0;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|J8", &sipSelf, sipType_FbxCache, &sipCpp, &a0, sipType_FbxStatus, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->GetChannelSampleCount(a0,a1,a2);

            return sipBuildResult(0,"(bu)",sipRes,a1);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_GetChannelSampleCount, doc_FbxCache_GetChannelSampleCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_GetChannelPointCount, "GetChannelPointCount(self, int, FbxTime, FbxStatus = None) -> Tuple[bool, int]");

extern "C" {static PyObject *meth_FbxCache_GetChannelPointCount(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_GetChannelPointCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::FbxTime* a1;
        uint a2;
         ::FbxStatus* a3 = 0;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9|J8", &sipSelf, sipType_FbxCache, &sipCpp, &a0, sipType_FbxTime, &a1, sipType_FbxStatus, &a3))
        {
            bool sipRes;

            sipRes = sipCpp->GetChannelPointCount(a0,*a1,a2,a3);

            return sipBuildResult(0,"(bu)",sipRes,a2);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_GetChannelPointCount, doc_FbxCache_GetChannelPointCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_GetCacheDataFileCount, "GetCacheDataFileCount(self, FbxStatus = None) -> int");

extern "C" {static PyObject *meth_FbxCache_GetCacheDataFileCount(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_GetCacheDataFileCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxStatus* a0 = 0;
        const  ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J8", &sipSelf, sipType_FbxCache, &sipCpp, sipType_FbxStatus, &a0))
        {
            int sipRes;

            sipRes = sipCpp->GetCacheDataFileCount(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_GetCacheDataFileCount, doc_FbxCache_GetCacheDataFileCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_GetCacheDataFileName, "GetCacheDataFileName(self, int, FbxStatus = None) -> Tuple[bool, FbxString, FbxString]");

extern "C" {static PyObject *meth_FbxCache_GetCacheDataFileName(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_GetCacheDataFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::FbxString* a1;
         ::FbxString* a2;
         ::FbxStatus* a3 = 0;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|J8", &sipSelf, sipType_FbxCache, &sipCpp, &a0, sipType_FbxStatus, &a3))
        {
            bool sipRes;
            a1 = new  ::FbxString();
            a2 = new  ::FbxString();

            sipRes = sipCpp->GetCacheDataFileName(a0,*a1,*a2,a3);

            return sipBuildResult(0,"(bNN)",sipRes,a1,sipType_FbxString,SIP_NULLPTR,a2,sipType_FbxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_GetCacheDataFileName, doc_FbxCache_GetCacheDataFileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_EnableMultiChannelFetching, "EnableMultiChannelFetching(self, bool, FbxStatus = None) -> bool");

extern "C" {static PyObject *meth_FbxCache_EnableMultiChannelFetching(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_EnableMultiChannelFetching(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::FbxStatus* a1 = 0;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb|J8", &sipSelf, sipType_FbxCache, &sipCpp, &a0, sipType_FbxStatus, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->EnableMultiChannelFetching(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_EnableMultiChannelFetching, doc_FbxCache_EnableMultiChannelFetching);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_GetNextTimeWithData, "GetNextTimeWithData(self, FbxTime, FbxTime, int = -1, FbxStatus = None) -> bool");

extern "C" {static PyObject *meth_FbxCache_GetNextTimeWithData(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_GetNextTimeWithData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxTime* a0;
         ::FbxTime* a1;
        int a2 = -1;
         ::FbxStatus* a3 = 0;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9|iJ8", &sipSelf, sipType_FbxCache, &sipCpp, sipType_FbxTime, &a0, sipType_FbxTime, &a1, &a2, sipType_FbxStatus, &a3))
        {
            bool sipRes;

            sipRes = sipCpp->GetNextTimeWithData(*a0,*a1,a2,a3);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_GetNextTimeWithData, doc_FbxCache_GetNextTimeWithData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_GetDataCount, "GetDataCount(self, int, FbxStatus = None) -> int");

extern "C" {static PyObject *meth_FbxCache_GetDataCount(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_GetDataCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::FbxStatus* a1 = 0;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|J8", &sipSelf, sipType_FbxCache, &sipCpp, &a0, sipType_FbxStatus, &a1))
        {
            int sipRes;

            sipRes = sipCpp->GetDataCount(a0,a1);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_GetDataCount, doc_FbxCache_GetDataCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_GetDataTime, "GetDataTime(self, int, int, FbxTime, FbxStatus = None) -> bool");

extern "C" {static PyObject *meth_FbxCache_GetDataTime(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_GetDataTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        uint a1;
         ::FbxTime* a2;
         ::FbxStatus* a3 = 0;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiuJ9|J8", &sipSelf, sipType_FbxCache, &sipCpp, &a0, &a1, sipType_FbxTime, &a2, sipType_FbxStatus, &a3))
        {
            bool sipRes;

            sipRes = sipCpp->GetDataTime(a0,a1,*a2,a3);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_GetDataTime, doc_FbxCache_GetDataTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_Write, "Write(self, int, FbxTime, List, int) -> bool");

extern "C" {static PyObject *meth_FbxCache_Write(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_Write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::FbxTime* a1;
        PyObject * a2;
        uint a3;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9Tu", &sipSelf, sipType_FbxCache, &sipCpp, &a0, sipType_FbxTime, &a1, &PyList_Type, &a2, &a3))
        {
            bool sipRes = 0;

#line 271 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxcache.sip"
        FbxCache::EMCDataType lDataType;
        if (sipCpp->GetChannelDataType(a0, lDataType))
        {
            if (lDataType == FbxCache::eDoubleVectorArray)
            {
                double * lBuffer = new double[a3 * 3];
                for (int i = 0; i < a3 * 3; ++i)
                {
                    lBuffer[i] = PyFloat_AsDouble(PyList_GET_ITEM(a2, i));
                }
                sipCpp->Write(a0, *a1, lBuffer, a3);
                delete [] lBuffer;
                Py_RETURN_TRUE;
            }
            else if (lDataType == FbxCache::eInt32Array)
            {
                int * lBuffer = new int[a3];
                for (int i = 0; i < a3; ++i)
                {
                    lBuffer[i] = PyLong_AsLong(PyList_GET_ITEM(a2, i));
                }
                sipCpp->Write(a0, *a1, lBuffer, a3);
                delete [] lBuffer;
                Py_RETURN_TRUE;
            }
            Py_RETURN_FALSE;
        }        
#line 1021 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxCache.cpp"

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_Write, doc_FbxCache_Write);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCache_Read, "Read(self, int, FbxTime, int) -> List");

extern "C" {static PyObject *meth_FbxCache_Read(PyObject *, PyObject *);}
static PyObject *meth_FbxCache_Read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::FbxTime* a1;
        uint a2;
         ::FbxCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9u", &sipSelf, sipType_FbxCache, &sipCpp, &a0, sipType_FbxTime, &a1, &a2))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 302 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxcache.sip"
        FbxCache::EMCDataType lDataType;
        if (sipCpp->GetChannelDataType(a0, lDataType))
        {            
            if (lDataType == FbxCache::eDoubleVectorArray)
            {
                if ((sipRes = PyList_New(a2 * 3)) == NULL)
                    return NULL;

                double * lBuffer = new double[a2 * 3];
                sipCpp->Read(a0, *a1, lBuffer, a2);
                for (int i = 0; i < a2 * 3; ++i)
                {
                    PyList_SET_ITEM(sipRes, i, PyFloat_FromDouble(lBuffer[i]));
                }
                
                delete [] lBuffer;
            }
            else if (lDataType == FbxCache::eInt32Array)
            {
                if ((sipRes = PyList_New(a2)) == NULL)
                    return NULL;

                int * lBuffer = new int[a2];
                sipCpp->Read(a0, *a1, lBuffer, a2);
                for (int i = 0; i < a2; ++i)
                {
                    PyList_SET_ITEM(sipRes, i, PyLong_FromLong(lBuffer[i]));
                }
                
                delete [] lBuffer;
            }
            else
            {
                return NULL;
            }
        }
#line 1088 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxCache.cpp"

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCache, sipName_Read, doc_FbxCache_Read);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_FbxCache___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxCache___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxCache *sipCpp = reinterpret_cast< ::FbxCache *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxCache));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxCache* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxCache, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxCache::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxCache, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxCache___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxCache___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxCache *sipCpp = reinterpret_cast< ::FbxCache *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxCache));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxCache* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxCache, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxCache::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxCache, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxCache(void *, const sipTypeDef *);}
static void *cast_FbxCache(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxCache *sipCpp = reinterpret_cast< ::FbxCache *>(sipCppV);

    if (targetType == sipType_FbxCache)
        return sipCppV;

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxCache(void *, int);}
static void release_FbxCache(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxCache[] = {{244, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxCache[] = {
    {(void *)slot_FbxCache___ne__, ne_slot},
    {(void *)slot_FbxCache___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxCache[] = {
    {sipName_AddChannel, meth_FbxCache_AddChannel, METH_VARARGS, doc_FbxCache_AddChannel},
    {sipName_CloseFile, meth_FbxCache_CloseFile, METH_VARARGS, doc_FbxCache_CloseFile},
    {sipName_Create, meth_FbxCache_Create, METH_VARARGS, doc_FbxCache_Create},
    {sipName_EnableMultiChannelFetching, meth_FbxCache_EnableMultiChannelFetching, METH_VARARGS, doc_FbxCache_EnableMultiChannelFetching},
    {sipName_GetAnimationRange, meth_FbxCache_GetAnimationRange, METH_VARARGS, doc_FbxCache_GetAnimationRange},
    {sipName_GetCacheDataFileCount, meth_FbxCache_GetCacheDataFileCount, METH_VARARGS, doc_FbxCache_GetCacheDataFileCount},
    {sipName_GetCacheDataFileName, meth_FbxCache_GetCacheDataFileName, METH_VARARGS, doc_FbxCache_GetCacheDataFileName},
    {sipName_GetCacheFileFormat, meth_FbxCache_GetCacheFileFormat, METH_VARARGS, doc_FbxCache_GetCacheFileFormat},
    {sipName_GetCacheFileName, meth_FbxCache_GetCacheFileName, METH_VARARGS, doc_FbxCache_GetCacheFileName},
    {sipName_GetCacheTimePerFrame, meth_FbxCache_GetCacheTimePerFrame, METH_VARARGS, doc_FbxCache_GetCacheTimePerFrame},
    {sipName_GetCacheType, meth_FbxCache_GetCacheType, METH_VARARGS, doc_FbxCache_GetCacheType},
    {sipName_GetChannelCount, meth_FbxCache_GetChannelCount, METH_VARARGS, doc_FbxCache_GetChannelCount},
    {sipName_GetChannelDataType, meth_FbxCache_GetChannelDataType, METH_VARARGS, doc_FbxCache_GetChannelDataType},
    {sipName_GetChannelIndex, meth_FbxCache_GetChannelIndex, METH_VARARGS, doc_FbxCache_GetChannelIndex},
    {sipName_GetChannelInterpretation, meth_FbxCache_GetChannelInterpretation, METH_VARARGS, doc_FbxCache_GetChannelInterpretation},
    {sipName_GetChannelName, meth_FbxCache_GetChannelName, METH_VARARGS, doc_FbxCache_GetChannelName},
    {sipName_GetChannelPointCount, meth_FbxCache_GetChannelPointCount, METH_VARARGS, doc_FbxCache_GetChannelPointCount},
    {sipName_GetChannelSampleCount, meth_FbxCache_GetChannelSampleCount, METH_VARARGS, doc_FbxCache_GetChannelSampleCount},
    {sipName_GetChannelSamplingRate, meth_FbxCache_GetChannelSamplingRate, METH_VARARGS, doc_FbxCache_GetChannelSamplingRate},
    {sipName_GetChannelSamplingType, meth_FbxCache_GetChannelSamplingType, METH_VARARGS, doc_FbxCache_GetChannelSamplingType},
    {sipName_GetClassId, meth_FbxCache_GetClassId, METH_VARARGS, doc_FbxCache_GetClassId},
    {sipName_GetDataCount, meth_FbxCache_GetDataCount, METH_VARARGS, doc_FbxCache_GetDataCount},
    {sipName_GetDataTime, meth_FbxCache_GetDataTime, METH_VARARGS, doc_FbxCache_GetDataTime},
    {sipName_GetNextTimeWithData, meth_FbxCache_GetNextTimeWithData, METH_VARARGS, doc_FbxCache_GetNextTimeWithData},
    {sipName_GetSamplingFrameRate, meth_FbxCache_GetSamplingFrameRate, METH_VARARGS, doc_FbxCache_GetSamplingFrameRate},
    {sipName_IsOpen, meth_FbxCache_IsOpen, METH_VARARGS, doc_FbxCache_IsOpen},
    {sipName_OpenFileForRead, meth_FbxCache_OpenFileForRead, METH_VARARGS, doc_FbxCache_OpenFileForRead},
    {sipName_OpenFileForWrite, meth_FbxCache_OpenFileForWrite, METH_VARARGS, doc_FbxCache_OpenFileForWrite},
    {sipName_Read, meth_FbxCache_Read, METH_VARARGS, doc_FbxCache_Read},
    {sipName_SetCacheFileFormat, meth_FbxCache_SetCacheFileFormat, METH_VARARGS, doc_FbxCache_SetCacheFileFormat},
    {sipName_SetCacheFileName, meth_FbxCache_SetCacheFileName, METH_VARARGS, doc_FbxCache_SetCacheFileName},
    {sipName_Write, meth_FbxCache_Write, METH_VARARGS, doc_FbxCache_Write}
};


extern "C" {static PyObject *varget_FbxCache_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCache_ClassId(void *, PyObject *sipPySelf, PyObject *)
{
    static PyObject *sipPy = SIP_NULLPTR;
     ::FbxClassId*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal = & ::FbxCache::ClassId;

    sipPy = sipConvertFromType(sipVal, sipType_FbxClassId, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -1405, sipPySelf);
        Py_INCREF(sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxCache_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxCache_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy, sipType_FbxClassId, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxCache::ClassId = *sipVal;

    return 0;
}

sipVariableDef variables_FbxCache[] = {
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxCache_ClassId, (PyMethodDef *)varset_FbxCache_ClassId, SIP_NULLPTR, SIP_NULLPTR},
};


/* Define the enum members and ints to be added to this type. */
static sipIntInstanceDef intInstances_FbxCache[] = {
    {sipName_eUnknownFileFormat, static_cast<int>( ::FbxCache::eUnknownFileFormat)},
    {sipName_eMaxPointCacheV2, static_cast<int>( ::FbxCache::eMaxPointCacheV2)},
    {sipName_eMayaCache, static_cast<int>( ::FbxCache::eMayaCache)},
    {sipName_eMCC, static_cast<int>( ::FbxCache::eMCC)},
    {sipName_eMCX, static_cast<int>( ::FbxCache::eMCX)},
    {sipName_eUnknownData, static_cast<int>( ::FbxCache::eUnknownData)},
    {sipName_eDouble, static_cast<int>( ::FbxCache::eDouble)},
    {sipName_eDoubleArray, static_cast<int>( ::FbxCache::eDoubleArray)},
    {sipName_eDoubleVectorArray, static_cast<int>( ::FbxCache::eDoubleVectorArray)},
    {sipName_eInt32Array, static_cast<int>( ::FbxCache::eInt32Array)},
    {sipName_eFloatArray, static_cast<int>( ::FbxCache::eFloatArray)},
    {sipName_eFloatVectorArray, static_cast<int>( ::FbxCache::eFloatVectorArray)},
    {sipName_eMCOneFile, static_cast<int>( ::FbxCache::eMCOneFile)},
    {sipName_eMCOneFilePerFrame, static_cast<int>( ::FbxCache::eMCOneFilePerFrame)},
    {sipName_eSamplingRegular, static_cast<int>( ::FbxCache::eSamplingRegular)},
    {sipName_eSamplingIrregular, static_cast<int>( ::FbxCache::eSamplingIrregular)},
    {0, 0}
};


sipClassTypeDef sipTypeDef_fbx_FbxCache = {
    {
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxCache,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxCache,
        {0, 0, 1},
        32, methods_FbxCache,
        1, variables_FbxCache,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, intInstances_FbxCache, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_FbxCache,
    slots_FbxCache,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_FbxCache,
    cast_FbxCache,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
