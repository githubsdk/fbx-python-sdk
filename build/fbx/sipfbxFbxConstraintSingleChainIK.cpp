/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxConstraintSingleChainIK_Create, "Create(FbxManager, str) -> FbxConstraintSingleChainIK\n"
"Create(FbxObject, str) -> FbxConstraintSingleChainIK");

extern "C" {static PyObject *meth_FbxConstraintSingleChainIK_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintSingleChainIK_Create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8A8", &sipSelf, sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxConstraintSingleChainIK*sipRes;

            sipRes =  ::FbxConstraintSingleChainIK::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxConstraintSingleChainIK,SIP_NULLPTR);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8A8", &sipSelf, sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxConstraintSingleChainIK*sipRes;

            sipRes =  ::FbxConstraintSingleChainIK::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxConstraintSingleChainIK,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxConstraintSingleChainIK, sipName_Create, doc_FbxConstraintSingleChainIK_Create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxConstraintSingleChainIK_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxConstraintSingleChainIK_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintSingleChainIK_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxConstraintSingleChainIK)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxConstraintSingleChainIK *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxConstraintSingleChainIK, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxConstraintSingleChainIK::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxConstraintSingleChainIK, sipName_GetClassId, doc_FbxConstraintSingleChainIK_GetClassId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxConstraintSingleChainIK_GetPoleVectorObjectWeight, "GetPoleVectorObjectWeight(self, FbxObject) -> float");

extern "C" {static PyObject *meth_FbxConstraintSingleChainIK_GetPoleVectorObjectWeight(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintSingleChainIK_GetPoleVectorObjectWeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject* a0;
        const  ::FbxConstraintSingleChainIK *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxConstraintSingleChainIK, &sipCpp, sipType_FbxObject, &a0))
        {
            double sipRes;

            sipRes = sipCpp->GetPoleVectorObjectWeight(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxConstraintSingleChainIK, sipName_GetPoleVectorObjectWeight, doc_FbxConstraintSingleChainIK_GetPoleVectorObjectWeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxConstraintSingleChainIK_AddPoleVectorObject, "AddPoleVectorObject(self, FbxObject, float = 100)");

extern "C" {static PyObject *meth_FbxConstraintSingleChainIK_AddPoleVectorObject(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintSingleChainIK_AddPoleVectorObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxObject* a0;
        double a1 = 100;
         ::FbxConstraintSingleChainIK *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|d", &sipSelf, sipType_FbxConstraintSingleChainIK, &sipCpp, sipType_FbxObject, &a0, &a1))
        {
            sipCpp->AddPoleVectorObject(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxConstraintSingleChainIK, sipName_AddPoleVectorObject, doc_FbxConstraintSingleChainIK_AddPoleVectorObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxConstraintSingleChainIK_GetConstraintPoleVectorCount, "GetConstraintPoleVectorCount(self) -> int");

extern "C" {static PyObject *meth_FbxConstraintSingleChainIK_GetConstraintPoleVectorCount(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintSingleChainIK_GetConstraintPoleVectorCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxConstraintSingleChainIK *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxConstraintSingleChainIK, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetConstraintPoleVectorCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxConstraintSingleChainIK, sipName_GetConstraintPoleVectorCount, doc_FbxConstraintSingleChainIK_GetConstraintPoleVectorCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxConstraintSingleChainIK_GetPoleVectorObject, "GetPoleVectorObject(self, int) -> FbxObject");

extern "C" {static PyObject *meth_FbxConstraintSingleChainIK_GetPoleVectorObject(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintSingleChainIK_GetPoleVectorObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::FbxConstraintSingleChainIK *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxConstraintSingleChainIK, &sipCpp, &a0))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->GetPoleVectorObject(a0);

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxConstraintSingleChainIK, sipName_GetPoleVectorObject, doc_FbxConstraintSingleChainIK_GetPoleVectorObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxConstraintSingleChainIK_SetFirstJointObject, "SetFirstJointObject(self, FbxObject)");

extern "C" {static PyObject *meth_FbxConstraintSingleChainIK_SetFirstJointObject(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintSingleChainIK_SetFirstJointObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxObject* a0;
         ::FbxConstraintSingleChainIK *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxConstraintSingleChainIK, &sipCpp, sipType_FbxObject, &a0))
        {
            sipCpp->SetFirstJointObject(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxConstraintSingleChainIK, sipName_SetFirstJointObject, doc_FbxConstraintSingleChainIK_SetFirstJointObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxConstraintSingleChainIK_GetFirstJointObject, "GetFirstJointObject(self) -> FbxObject");

extern "C" {static PyObject *meth_FbxConstraintSingleChainIK_GetFirstJointObject(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintSingleChainIK_GetFirstJointObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxConstraintSingleChainIK *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxConstraintSingleChainIK, &sipCpp))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->GetFirstJointObject();

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxConstraintSingleChainIK, sipName_GetFirstJointObject, doc_FbxConstraintSingleChainIK_GetFirstJointObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxConstraintSingleChainIK_SetEndJointObject, "SetEndJointObject(self, FbxObject)");

extern "C" {static PyObject *meth_FbxConstraintSingleChainIK_SetEndJointObject(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintSingleChainIK_SetEndJointObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxObject* a0;
         ::FbxConstraintSingleChainIK *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxConstraintSingleChainIK, &sipCpp, sipType_FbxObject, &a0))
        {
            sipCpp->SetEndJointObject(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxConstraintSingleChainIK, sipName_SetEndJointObject, doc_FbxConstraintSingleChainIK_SetEndJointObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxConstraintSingleChainIK_GetEndJointObject, "GetEndJointObject(self) -> FbxObject");

extern "C" {static PyObject *meth_FbxConstraintSingleChainIK_GetEndJointObject(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintSingleChainIK_GetEndJointObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxConstraintSingleChainIK *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxConstraintSingleChainIK, &sipCpp))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->GetEndJointObject();

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxConstraintSingleChainIK, sipName_GetEndJointObject, doc_FbxConstraintSingleChainIK_GetEndJointObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxConstraintSingleChainIK_SetEffectorObject, "SetEffectorObject(self, FbxObject)");

extern "C" {static PyObject *meth_FbxConstraintSingleChainIK_SetEffectorObject(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintSingleChainIK_SetEffectorObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxObject* a0;
         ::FbxConstraintSingleChainIK *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxConstraintSingleChainIK, &sipCpp, sipType_FbxObject, &a0))
        {
            sipCpp->SetEffectorObject(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxConstraintSingleChainIK, sipName_SetEffectorObject, doc_FbxConstraintSingleChainIK_SetEffectorObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxConstraintSingleChainIK_GetEffectorObject, "GetEffectorObject(self) -> FbxObject");

extern "C" {static PyObject *meth_FbxConstraintSingleChainIK_GetEffectorObject(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintSingleChainIK_GetEffectorObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxConstraintSingleChainIK *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxConstraintSingleChainIK, &sipCpp))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->GetEffectorObject();

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxConstraintSingleChainIK, sipName_GetEffectorObject, doc_FbxConstraintSingleChainIK_GetEffectorObject);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_FbxConstraintSingleChainIK___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxConstraintSingleChainIK___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxConstraintSingleChainIK));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxConstraintSingleChainIK* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxConstraintSingleChainIK, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxConstraintSingleChainIK::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxConstraintSingleChainIK, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxConstraintSingleChainIK___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxConstraintSingleChainIK___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxConstraintSingleChainIK));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxConstraintSingleChainIK* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxConstraintSingleChainIK, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxConstraintSingleChainIK::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxConstraintSingleChainIK, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxConstraintSingleChainIK(void *, const sipTypeDef *);}
static void *cast_FbxConstraintSingleChainIK(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipCppV);

    if (targetType == sipType_FbxConstraintSingleChainIK)
        return sipCppV;

    sipCppV = ((const sipClassTypeDef *)sipType_FbxConstraint)->ctd_cast(static_cast< ::FbxConstraint *>(sipCpp), targetType);
    if (sipCppV)
        return sipCppV;

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxConstraintSingleChainIK(void *, int);}
static void release_FbxConstraintSingleChainIK(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxConstraintSingleChainIK[] = {{106, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxConstraintSingleChainIK[] = {
    {(void *)slot_FbxConstraintSingleChainIK___ne__, ne_slot},
    {(void *)slot_FbxConstraintSingleChainIK___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxConstraintSingleChainIK[] = {
    {sipName_AddPoleVectorObject, meth_FbxConstraintSingleChainIK_AddPoleVectorObject, METH_VARARGS, doc_FbxConstraintSingleChainIK_AddPoleVectorObject},
    {sipName_Create, meth_FbxConstraintSingleChainIK_Create, METH_VARARGS, doc_FbxConstraintSingleChainIK_Create},
    {sipName_GetClassId, meth_FbxConstraintSingleChainIK_GetClassId, METH_VARARGS, doc_FbxConstraintSingleChainIK_GetClassId},
    {sipName_GetConstraintPoleVectorCount, meth_FbxConstraintSingleChainIK_GetConstraintPoleVectorCount, METH_VARARGS, doc_FbxConstraintSingleChainIK_GetConstraintPoleVectorCount},
    {sipName_GetEffectorObject, meth_FbxConstraintSingleChainIK_GetEffectorObject, METH_VARARGS, doc_FbxConstraintSingleChainIK_GetEffectorObject},
    {sipName_GetEndJointObject, meth_FbxConstraintSingleChainIK_GetEndJointObject, METH_VARARGS, doc_FbxConstraintSingleChainIK_GetEndJointObject},
    {sipName_GetFirstJointObject, meth_FbxConstraintSingleChainIK_GetFirstJointObject, METH_VARARGS, doc_FbxConstraintSingleChainIK_GetFirstJointObject},
    {sipName_GetPoleVectorObject, meth_FbxConstraintSingleChainIK_GetPoleVectorObject, METH_VARARGS, doc_FbxConstraintSingleChainIK_GetPoleVectorObject},
    {sipName_GetPoleVectorObjectWeight, meth_FbxConstraintSingleChainIK_GetPoleVectorObjectWeight, METH_VARARGS, doc_FbxConstraintSingleChainIK_GetPoleVectorObjectWeight},
    {sipName_SetEffectorObject, meth_FbxConstraintSingleChainIK_SetEffectorObject, METH_VARARGS, doc_FbxConstraintSingleChainIK_SetEffectorObject},
    {sipName_SetEndJointObject, meth_FbxConstraintSingleChainIK_SetEndJointObject, METH_VARARGS, doc_FbxConstraintSingleChainIK_SetEndJointObject},
    {sipName_SetFirstJointObject, meth_FbxConstraintSingleChainIK_SetFirstJointObject, METH_VARARGS, doc_FbxConstraintSingleChainIK_SetFirstJointObject}
};


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_Active(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_Active(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -482);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->Active;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyBool1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -481, sipPySelf);
        sipKeepReference(sipPySelf, -482, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxConstraintSingleChainIK_Active(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_Active(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyBool1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Active = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_ClassId(void *, PyObject *sipPySelf, PyObject *)
{
    static PyObject *sipPy = SIP_NULLPTR;
     ::FbxClassId*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal = & ::FbxConstraintSingleChainIK::ClassId;

    sipPy = sipConvertFromType(sipVal, sipType_FbxClassId, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -483, sipPySelf);
        Py_INCREF(sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxConstraintSingleChainIK_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy, sipType_FbxClassId, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxConstraintSingleChainIK::ClassId = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_EffectorObject(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_EffectorObject(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -485);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->EffectorObject;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyFbxReference, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -484, sipPySelf);
        sipKeepReference(sipPySelf, -485, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxConstraintSingleChainIK_EffectorObject(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_EffectorObject(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyFbxReference *>(sipForceConvertToType(sipPy, sipType_FbxPropertyFbxReference, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->EffectorObject = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_EndJointObject(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_EndJointObject(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -487);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->EndJointObject;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyFbxReference, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -486, sipPySelf);
        sipKeepReference(sipPySelf, -487, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxConstraintSingleChainIK_EndJointObject(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_EndJointObject(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyFbxReference *>(sipForceConvertToType(sipPy, sipType_FbxPropertyFbxReference, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->EndJointObject = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_EvaluateTSAnim(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_EvaluateTSAnim(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyEnum*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -489);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->EvaluateTSAnim;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyEnum, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -488, sipPySelf);
        sipKeepReference(sipPySelf, -489, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxConstraintSingleChainIK_EvaluateTSAnim(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_EvaluateTSAnim(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEnum*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyEnum *>(sipForceConvertToType(sipPy, sipType_FbxPropertyEnum, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->EvaluateTSAnim = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_FirstJointObject(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_FirstJointObject(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -491);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->FirstJointObject;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyFbxReference, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -490, sipPySelf);
        sipKeepReference(sipPySelf, -491, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxConstraintSingleChainIK_FirstJointObject(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_FirstJointObject(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyFbxReference *>(sipForceConvertToType(sipPy, sipType_FbxPropertyFbxReference, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FirstJointObject = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_Lock(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_Lock(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -493);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->Lock;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyBool1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -492, sipPySelf);
        sipKeepReference(sipPySelf, -493, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxConstraintSingleChainIK_Lock(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_Lock(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyBool1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Lock = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_PoleVector(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_PoleVector(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble3*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -495);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->PoleVector;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -494, sipPySelf);
        sipKeepReference(sipPySelf, -495, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxConstraintSingleChainIK_PoleVector(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_PoleVector(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble3, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->PoleVector = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_PoleVectorObjects(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_PoleVectorObjects(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -497);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->PoleVectorObjects;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyFbxReference, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -496, sipPySelf);
        sipKeepReference(sipPySelf, -497, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxConstraintSingleChainIK_PoleVectorObjects(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_PoleVectorObjects(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyFbxReference *>(sipForceConvertToType(sipPy, sipType_FbxPropertyFbxReference, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->PoleVectorObjects = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_PoleVectorType(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_PoleVectorType(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyEnum*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -499);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->PoleVectorType;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyEnum, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -498, sipPySelf);
        sipKeepReference(sipPySelf, -499, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxConstraintSingleChainIK_PoleVectorType(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_PoleVectorType(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEnum*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyEnum *>(sipForceConvertToType(sipPy, sipType_FbxPropertyEnum, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->PoleVectorType = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_SolverType(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_SolverType(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyEnum*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -501);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->SolverType;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyEnum, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -500, sipPySelf);
        sipKeepReference(sipPySelf, -501, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxConstraintSingleChainIK_SolverType(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_SolverType(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEnum*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyEnum *>(sipForceConvertToType(sipPy, sipType_FbxPropertyEnum, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->SolverType = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_Twist(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_Twist(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble1*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -503);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->Twist;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -502, sipPySelf);
        sipKeepReference(sipPySelf, -503, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxConstraintSingleChainIK_Twist(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_Twist(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Twist = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_Weight(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_Weight(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble1*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -505);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->Weight;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -504, sipPySelf);
        sipKeepReference(sipPySelf, -505, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxConstraintSingleChainIK_Weight(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_Weight(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Weight = *sipVal;

    return 0;
}

sipVariableDef variables_FbxConstraintSingleChainIK[] = {
    {InstanceVariable, sipName_Active, (PyMethodDef *)varget_FbxConstraintSingleChainIK_Active, (PyMethodDef *)varset_FbxConstraintSingleChainIK_Active, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxConstraintSingleChainIK_ClassId, (PyMethodDef *)varset_FbxConstraintSingleChainIK_ClassId, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_EffectorObject, (PyMethodDef *)varget_FbxConstraintSingleChainIK_EffectorObject, (PyMethodDef *)varset_FbxConstraintSingleChainIK_EffectorObject, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_EndJointObject, (PyMethodDef *)varget_FbxConstraintSingleChainIK_EndJointObject, (PyMethodDef *)varset_FbxConstraintSingleChainIK_EndJointObject, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_EvaluateTSAnim, (PyMethodDef *)varget_FbxConstraintSingleChainIK_EvaluateTSAnim, (PyMethodDef *)varset_FbxConstraintSingleChainIK_EvaluateTSAnim, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_FirstJointObject, (PyMethodDef *)varget_FbxConstraintSingleChainIK_FirstJointObject, (PyMethodDef *)varset_FbxConstraintSingleChainIK_FirstJointObject, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_Lock, (PyMethodDef *)varget_FbxConstraintSingleChainIK_Lock, (PyMethodDef *)varset_FbxConstraintSingleChainIK_Lock, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_PoleVector, (PyMethodDef *)varget_FbxConstraintSingleChainIK_PoleVector, (PyMethodDef *)varset_FbxConstraintSingleChainIK_PoleVector, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_PoleVectorObjects, (PyMethodDef *)varget_FbxConstraintSingleChainIK_PoleVectorObjects, (PyMethodDef *)varset_FbxConstraintSingleChainIK_PoleVectorObjects, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_PoleVectorType, (PyMethodDef *)varget_FbxConstraintSingleChainIK_PoleVectorType, (PyMethodDef *)varset_FbxConstraintSingleChainIK_PoleVectorType, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_SolverType, (PyMethodDef *)varget_FbxConstraintSingleChainIK_SolverType, (PyMethodDef *)varset_FbxConstraintSingleChainIK_SolverType, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_Twist, (PyMethodDef *)varget_FbxConstraintSingleChainIK_Twist, (PyMethodDef *)varset_FbxConstraintSingleChainIK_Twist, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_Weight, (PyMethodDef *)varget_FbxConstraintSingleChainIK_Weight, (PyMethodDef *)varset_FbxConstraintSingleChainIK_Weight, SIP_NULLPTR, SIP_NULLPTR},
};


/* Define the enum members and ints to be added to this type. */
static sipIntInstanceDef intInstances_FbxConstraintSingleChainIK[] = {
    {sipName_eNeverTS, static_cast<int>( ::FbxConstraintSingleChainIK::eNeverTS)},
    {sipName_eAutoDetect, static_cast<int>( ::FbxConstraintSingleChainIK::eAutoDetect)},
    {sipName_eAlwaysTS, static_cast<int>( ::FbxConstraintSingleChainIK::eAlwaysTS)},
    {sipName_eVector, static_cast<int>( ::FbxConstraintSingleChainIK::eVector)},
    {sipName_eObject, static_cast<int>( ::FbxConstraintSingleChainIK::eObject)},
    {sipName_eRotatePlane, static_cast<int>( ::FbxConstraintSingleChainIK::eRotatePlane)},
    {sipName_eSingleChain, static_cast<int>( ::FbxConstraintSingleChainIK::eSingleChain)},
    {0, 0}
};


sipClassTypeDef sipTypeDef_fbx_FbxConstraintSingleChainIK = {
    {
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxConstraintSingleChainIK,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxConstraintSingleChainIK,
        {0, 0, 1},
        12, methods_FbxConstraintSingleChainIK,
        13, variables_FbxConstraintSingleChainIK,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, intInstances_FbxConstraintSingleChainIK, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_FbxConstraintSingleChainIK,
    slots_FbxConstraintSingleChainIK,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_FbxConstraintSingleChainIK,
    cast_FbxConstraintSingleChainIK,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
