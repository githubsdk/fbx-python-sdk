/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxProperty_Create, "Create(FbxProperty, FbxDataType, str, str = \"\", bool = True) -> FbxProperty\n"
"Create(FbxObject, FbxDataType, str, str = \"\", bool = True) -> FbxProperty");

extern "C" {static PyObject *meth_FbxProperty_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_Create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty* a0;
        const  ::FbxDataType* a1;
        const char* a2;
        PyObject *a2Keep;
        const char* a3 = "";
        PyObject *a3Keep = 0;
        bool a4 = 1;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ9J9A8|A8b", &sipSelf, sipType_FbxProperty, &a0, sipType_FbxDataType, &a1, &a2Keep, &a2, &a3Keep, &a3, &a4))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty( ::FbxProperty::Create(*a0,*a1,a2,a3,a4));
            Py_DECREF(a2Keep);
            Py_XDECREF(a3Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    {
         ::FbxObject* a0;
        const  ::FbxDataType* a1;
        const char* a2;
        PyObject *a2Keep;
        const char* a3 = "";
        PyObject *a3Keep = 0;
        bool a4 = 1;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8J9A8|A8b", &sipSelf, sipType_FbxObject, &a0, sipType_FbxDataType, &a1, &a2Keep, &a2, &a3Keep, &a3, &a4))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty( ::FbxProperty::Create(a0,*a1,a2,a3,a4));
            Py_DECREF(a2Keep);
            Py_XDECREF(a3Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_Create, doc_FbxProperty_Create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_CreateFrom, "CreateFrom(FbxProperty, FbxProperty, bool = True) -> FbxProperty\n"
"CreateFrom(FbxObject, FbxProperty, bool = True) -> FbxProperty");

extern "C" {static PyObject *meth_FbxProperty_CreateFrom(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_CreateFrom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty* a0;
         ::FbxProperty* a1;
        bool a2 = 1;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ9J9|b", &sipSelf, sipType_FbxProperty, &a0, sipType_FbxProperty, &a1, &a2))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty( ::FbxProperty::CreateFrom(*a0,*a1,a2));

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    {
         ::FbxObject* a0;
         ::FbxProperty* a1;
        bool a2 = 1;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8J9|b", &sipSelf, sipType_FbxObject, &a0, sipType_FbxProperty, &a1, &a2))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty( ::FbxProperty::CreateFrom(a0,*a1,a2));

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_CreateFrom, doc_FbxProperty_CreateFrom);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_Destroy, "Destroy(self)");

extern "C" {static PyObject *meth_FbxProperty_Destroy(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
            sipCpp->Destroy();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_Destroy, doc_FbxProperty_Destroy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_DestroyRecursively, "DestroyRecursively(self)");

extern "C" {static PyObject *meth_FbxProperty_DestroyRecursively(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_DestroyRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
            sipCpp->DestroyRecursively();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_DestroyRecursively, doc_FbxProperty_DestroyRecursively);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetPropertyDataType, "GetPropertyDataType(self) -> FbxDataType");

extern "C" {static PyObject *meth_FbxProperty_GetPropertyDataType(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetPropertyDataType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
             ::FbxDataType*sipRes;

            sipRes = new  ::FbxDataType(sipCpp->GetPropertyDataType());

            return sipConvertFromNewType(sipRes,sipType_FbxDataType,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetPropertyDataType, doc_FbxProperty_GetPropertyDataType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetName, "GetName(self) -> FbxString");

extern "C" {static PyObject *meth_FbxProperty_GetName(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString(sipCpp->GetName());

            return sipConvertFromNewType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetName, doc_FbxProperty_GetName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetHierarchicalName, "GetHierarchicalName(self) -> FbxString");

extern "C" {static PyObject *meth_FbxProperty_GetHierarchicalName(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetHierarchicalName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString(sipCpp->GetHierarchicalName());

            return sipConvertFromNewType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetHierarchicalName, doc_FbxProperty_GetHierarchicalName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetLabel, "GetLabel(self, bool = True) -> FbxString");

extern "C" {static PyObject *meth_FbxProperty_GetLabel(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 1;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|b", &sipSelf, sipType_FbxProperty, &sipCpp, &a0))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString(sipCpp->GetLabel(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetLabel, doc_FbxProperty_GetLabel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_SetLabel, "SetLabel(self, FbxString)");

extern "C" {static PyObject *meth_FbxProperty_SetLabel(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_SetLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxString* a0;
        int a0State = 0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxString, &a0, &a0State))
        {
            sipCpp->SetLabel(*a0);
            sipReleaseType(const_cast< ::FbxString *>(a0), sipType_FbxString, a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_SetLabel, doc_FbxProperty_SetLabel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetFbxObject, "GetFbxObject(self) -> FbxObject");

extern "C" {static PyObject *meth_FbxProperty_GetFbxObject(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetFbxObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->GetFbxObject();

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetFbxObject, doc_FbxProperty_GetFbxObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_SetUserTag, "SetUserTag(self, int)");

extern "C" {static PyObject *meth_FbxProperty_SetUserTag(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_SetUserTag(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxProperty, &sipCpp, &a0))
        {
            sipCpp->SetUserTag(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_SetUserTag, doc_FbxProperty_SetUserTag);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetUserTag, "GetUserTag(self) -> int");

extern "C" {static PyObject *meth_FbxProperty_GetUserTag(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetUserTag(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetUserTag();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetUserTag, doc_FbxProperty_GetUserTag);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_ModifyFlag, "ModifyFlag(self, FbxPropertyFlags.EFlags, bool)");

extern "C" {static PyObject *meth_FbxProperty_ModifyFlag(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_ModifyFlag(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxPropertyFlags::EFlags a0;
        bool a1;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEb", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxPropertyFlags_EFlags, &a0, &a1))
        {
            sipCpp->ModifyFlag(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_ModifyFlag, doc_FbxProperty_ModifyFlag);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetFlag, "GetFlag(self, FbxPropertyFlags.EFlags) -> bool");

extern "C" {static PyObject *meth_FbxProperty_GetFlag(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetFlag(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxPropertyFlags::EFlags a0;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxPropertyFlags_EFlags, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->GetFlag(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetFlag, doc_FbxProperty_GetFlag);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetFlagInheritType, "GetFlagInheritType(self, FbxPropertyFlags.EFlags) -> FbxPropertyFlags.EInheritType");

extern "C" {static PyObject *meth_FbxProperty_GetFlagInheritType(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetFlagInheritType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxPropertyFlags::EFlags a0;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxPropertyFlags_EFlags, &a0))
        {
             ::FbxPropertyFlags::EInheritType sipRes;

            sipRes = sipCpp->GetFlagInheritType(a0);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_FbxPropertyFlags_EInheritType);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetFlagInheritType, doc_FbxProperty_GetFlagInheritType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_SetFlagInheritType, "SetFlagInheritType(self, FbxPropertyFlags.EFlags, FbxPropertyFlags.EInheritType) -> bool");

extern "C" {static PyObject *meth_FbxProperty_SetFlagInheritType(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_SetFlagInheritType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxPropertyFlags::EFlags a0;
         ::FbxPropertyFlags::EInheritType a1;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxPropertyFlags_EFlags, &a0, sipType_FbxPropertyFlags_EInheritType, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->SetFlagInheritType(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_SetFlagInheritType, doc_FbxProperty_SetFlagInheritType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_ModifiedFlag, "ModifiedFlag(self, FbxPropertyFlags.EFlags) -> bool");

extern "C" {static PyObject *meth_FbxProperty_ModifiedFlag(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_ModifiedFlag(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxPropertyFlags::EFlags a0;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxPropertyFlags_EFlags, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->ModifiedFlag(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_ModifiedFlag, doc_FbxProperty_ModifiedFlag);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_CompareValue, "CompareValue(self, FbxProperty) -> bool");

extern "C" {static PyObject *meth_FbxProperty_CompareValue(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_CompareValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty* a0;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxProperty, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->CompareValue(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_CompareValue, doc_FbxProperty_CompareValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_CopyValue, "CopyValue(self, FbxProperty) -> bool");

extern "C" {static PyObject *meth_FbxProperty_CopyValue(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_CopyValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty* a0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxProperty, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->CopyValue(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_CopyValue, doc_FbxProperty_CopyValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_IsValid, "IsValid(self) -> bool");

extern "C" {static PyObject *meth_FbxProperty_IsValid(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_IsValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->IsValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_IsValid, doc_FbxProperty_IsValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_HasDefaultValue, "HasDefaultValue(FbxProperty) -> bool");

extern "C" {static PyObject *meth_FbxProperty_HasDefaultValue(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_HasDefaultValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxProperty* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ9", &sipSelf, sipType_FbxProperty, &a0))
        {
            bool sipRes;

            sipRes =  ::FbxProperty::HasDefaultValue(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_HasDefaultValue, doc_FbxProperty_HasDefaultValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetValueInheritType, "GetValueInheritType(self) -> FbxPropertyFlags.EInheritType");

extern "C" {static PyObject *meth_FbxProperty_GetValueInheritType(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetValueInheritType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
             ::FbxPropertyFlags::EInheritType sipRes;

            sipRes = sipCpp->GetValueInheritType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_FbxPropertyFlags_EInheritType);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetValueInheritType, doc_FbxProperty_GetValueInheritType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_SetValueInheritType, "SetValueInheritType(self, FbxPropertyFlags.EInheritType) -> bool");

extern "C" {static PyObject *meth_FbxProperty_SetValueInheritType(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_SetValueInheritType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxPropertyFlags::EInheritType a0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxPropertyFlags_EInheritType, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->SetValueInheritType(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_SetValueInheritType, doc_FbxProperty_SetValueInheritType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_Modified, "Modified(self) -> bool");

extern "C" {static PyObject *meth_FbxProperty_Modified(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_Modified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->Modified();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_Modified, doc_FbxProperty_Modified);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_SupportSetLimitAsDouble, "SupportSetLimitAsDouble(self) -> bool");

extern "C" {static PyObject *meth_FbxProperty_SupportSetLimitAsDouble(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_SupportSetLimitAsDouble(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->SupportSetLimitAsDouble();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_SupportSetLimitAsDouble, doc_FbxProperty_SupportSetLimitAsDouble);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_SetMinLimit, "SetMinLimit(self, float) -> bool");

extern "C" {static PyObject *meth_FbxProperty_SetMinLimit(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_SetMinLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_FbxProperty, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->SetMinLimit(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_SetMinLimit, doc_FbxProperty_SetMinLimit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_HasMinLimit, "HasMinLimit(self) -> bool");

extern "C" {static PyObject *meth_FbxProperty_HasMinLimit(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_HasMinLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->HasMinLimit();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_HasMinLimit, doc_FbxProperty_HasMinLimit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetMinLimit, "GetMinLimit(self) -> float");

extern "C" {static PyObject *meth_FbxProperty_GetMinLimit(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetMinLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->GetMinLimit();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetMinLimit, doc_FbxProperty_GetMinLimit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_HasMaxLimit, "HasMaxLimit(self) -> bool");

extern "C" {static PyObject *meth_FbxProperty_HasMaxLimit(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_HasMaxLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->HasMaxLimit();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_HasMaxLimit, doc_FbxProperty_HasMaxLimit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_SetMaxLimit, "SetMaxLimit(self, float) -> bool");

extern "C" {static PyObject *meth_FbxProperty_SetMaxLimit(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_SetMaxLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_FbxProperty, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->SetMaxLimit(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_SetMaxLimit, doc_FbxProperty_SetMaxLimit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetMaxLimit, "GetMaxLimit(self) -> float");

extern "C" {static PyObject *meth_FbxProperty_GetMaxLimit(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetMaxLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->GetMaxLimit();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetMaxLimit, doc_FbxProperty_GetMaxLimit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_SetLimits, "SetLimits(self, float, float) -> bool");

extern "C" {static PyObject *meth_FbxProperty_SetLimits(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_SetLimits(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
        double a1;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_FbxProperty, &sipCpp, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->SetLimits(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_SetLimits, doc_FbxProperty_SetLimits);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_AddEnumValue, "AddEnumValue(self, str) -> int");

extern "C" {static PyObject *meth_FbxProperty_AddEnumValue(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_AddEnumValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxProperty, &sipCpp, &a0Keep, &a0))
        {
            int sipRes;

            sipRes = sipCpp->AddEnumValue(a0);
            Py_DECREF(a0Keep);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_AddEnumValue, doc_FbxProperty_AddEnumValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_InsertEnumValue, "InsertEnumValue(self, int, str)");

extern "C" {static PyObject *meth_FbxProperty_InsertEnumValue(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_InsertEnumValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const char* a1;
        PyObject *a1Keep;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiA8", &sipSelf, sipType_FbxProperty, &sipCpp, &a0, &a1Keep, &a1))
        {
            sipCpp->InsertEnumValue(a0,a1);
            Py_DECREF(a1Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_InsertEnumValue, doc_FbxProperty_InsertEnumValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetEnumCount, "GetEnumCount(self) -> int");

extern "C" {static PyObject *meth_FbxProperty_GetEnumCount(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetEnumCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetEnumCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetEnumCount, doc_FbxProperty_GetEnumCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_SetEnumValue, "SetEnumValue(self, int, str)");

extern "C" {static PyObject *meth_FbxProperty_SetEnumValue(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_SetEnumValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const char* a1;
        PyObject *a1Keep;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiA8", &sipSelf, sipType_FbxProperty, &sipCpp, &a0, &a1Keep, &a1))
        {
            sipCpp->SetEnumValue(a0,a1);
            Py_DECREF(a1Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_SetEnumValue, doc_FbxProperty_SetEnumValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_RemoveEnumValue, "RemoveEnumValue(self, int)");

extern "C" {static PyObject *meth_FbxProperty_RemoveEnumValue(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_RemoveEnumValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxProperty, &sipCpp, &a0))
        {
            sipCpp->RemoveEnumValue(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_RemoveEnumValue, doc_FbxProperty_RemoveEnumValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetEnumValue, "GetEnumValue(self, int) -> str");

extern "C" {static PyObject *meth_FbxProperty_GetEnumValue(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetEnumValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxProperty, &sipCpp, &a0))
        {
            const char*sipRes;

            sipRes = sipCpp->GetEnumValue(a0);

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_FromString(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetEnumValue, doc_FbxProperty_GetEnumValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_IsRoot, "IsRoot(self) -> bool");

extern "C" {static PyObject *meth_FbxProperty_IsRoot(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_IsRoot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->IsRoot();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_IsRoot, doc_FbxProperty_IsRoot);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_IsChildOf, "IsChildOf(self, FbxProperty) -> bool");

extern "C" {static PyObject *meth_FbxProperty_IsChildOf(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_IsChildOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty* a0;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxProperty, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->IsChildOf(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_IsChildOf, doc_FbxProperty_IsChildOf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_IsDescendentOf, "IsDescendentOf(self, FbxProperty) -> bool");

extern "C" {static PyObject *meth_FbxProperty_IsDescendentOf(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_IsDescendentOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty* a0;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxProperty, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->IsDescendentOf(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_IsDescendentOf, doc_FbxProperty_IsDescendentOf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetParent, "GetParent(self) -> FbxProperty");

extern "C" {static PyObject *meth_FbxProperty_GetParent(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetParent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->GetParent());

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetParent, doc_FbxProperty_GetParent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetChild, "GetChild(self) -> FbxProperty");

extern "C" {static PyObject *meth_FbxProperty_GetChild(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->GetChild());

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetChild, doc_FbxProperty_GetChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetSibling, "GetSibling(self) -> FbxProperty");

extern "C" {static PyObject *meth_FbxProperty_GetSibling(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetSibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->GetSibling());

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetSibling, doc_FbxProperty_GetSibling);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetFirstDescendent, "GetFirstDescendent(self) -> FbxProperty");

extern "C" {static PyObject *meth_FbxProperty_GetFirstDescendent(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetFirstDescendent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->GetFirstDescendent());

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetFirstDescendent, doc_FbxProperty_GetFirstDescendent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetNextDescendent, "GetNextDescendent(self, FbxProperty) -> FbxProperty");

extern "C" {static PyObject *meth_FbxProperty_GetNextDescendent(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetNextDescendent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty* a0;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxProperty, &a0))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->GetNextDescendent(*a0));

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetNextDescendent, doc_FbxProperty_GetNextDescendent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_Find, "Find(self, str, bool = True) -> FbxProperty\n"
"Find(self, str, FbxDataType, bool = True) -> FbxProperty");

extern "C" {static PyObject *meth_FbxProperty_Find(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_Find(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        bool a1 = 1;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8|b", &sipSelf, sipType_FbxProperty, &sipCpp, &a0Keep, &a0, &a1))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->Find(a0,a1));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::FbxDataType* a1;
        bool a2 = 1;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8J9|b", &sipSelf, sipType_FbxProperty, &sipCpp, &a0Keep, &a0, sipType_FbxDataType, &a1, &a2))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->Find(a0,*a1,a2));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_Find, doc_FbxProperty_Find);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_FindHierarchical, "FindHierarchical(self, str, bool = True) -> FbxProperty\n"
"FindHierarchical(self, str, FbxDataType, bool = True) -> FbxProperty");

extern "C" {static PyObject *meth_FbxProperty_FindHierarchical(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_FindHierarchical(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        bool a1 = 1;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8|b", &sipSelf, sipType_FbxProperty, &sipCpp, &a0Keep, &a0, &a1))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->FindHierarchical(a0,a1));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::FbxDataType* a1;
        bool a2 = 1;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8J9|b", &sipSelf, sipType_FbxProperty, &sipCpp, &a0Keep, &a0, sipType_FbxDataType, &a1, &a2))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->FindHierarchical(a0,*a1,a2));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_FindHierarchical, doc_FbxProperty_FindHierarchical);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_BeginCreateOrFindProperty, "BeginCreateOrFindProperty(self)");

extern "C" {static PyObject *meth_FbxProperty_BeginCreateOrFindProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_BeginCreateOrFindProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
            sipCpp->BeginCreateOrFindProperty();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_BeginCreateOrFindProperty, doc_FbxProperty_BeginCreateOrFindProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_EndCreateOrFindProperty, "EndCreateOrFindProperty(self)");

extern "C" {static PyObject *meth_FbxProperty_EndCreateOrFindProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_EndCreateOrFindProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
            sipCpp->EndCreateOrFindProperty();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_EndCreateOrFindProperty, doc_FbxProperty_EndCreateOrFindProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_CreateCurveNode, "CreateCurveNode(self, FbxAnimLayer) -> FbxAnimCurveNode");

extern "C" {static PyObject *meth_FbxProperty_CreateCurveNode(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_CreateCurveNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxAnimLayer* a0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxAnimLayer, &a0))
        {
             ::FbxAnimCurveNode*sipRes;

            sipRes = sipCpp->CreateCurveNode(a0);

            return sipConvertFromType(sipRes,sipType_FbxAnimCurveNode,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_CreateCurveNode, doc_FbxProperty_CreateCurveNode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetCurveNode, "GetCurveNode(self, FbxAnimLayer, bool = False) -> FbxAnimCurveNode\n"
"GetCurveNode(self, FbxAnimStack, bool = False) -> FbxAnimCurveNode");

extern "C" {static PyObject *meth_FbxProperty_GetCurveNode(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetCurveNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxAnimLayer* a0;
        bool a1 = 0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|b", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxAnimLayer, &a0, &a1))
        {
             ::FbxAnimCurveNode*sipRes;

            sipRes = sipCpp->GetCurveNode(a0,a1);

            return sipConvertFromType(sipRes,sipType_FbxAnimCurveNode,SIP_NULLPTR);
        }
    }

    {
         ::FbxAnimStack* a0;
        bool a1 = 0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|b", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxAnimStack, &a0, &a1))
        {
             ::FbxAnimCurveNode*sipRes;

            sipRes = sipCpp->GetCurveNode(a0,a1);

            return sipConvertFromType(sipRes,sipType_FbxAnimCurveNode,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetCurveNode, doc_FbxProperty_GetCurveNode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetCurve, "GetCurve(self, FbxAnimLayer, bool = False) -> FbxAnimCurve\n"
"GetCurve(self, FbxAnimLayer, str, bool = False) -> FbxAnimCurve\n"
"GetCurve(self, FbxAnimLayer, str, str, bool = False) -> FbxAnimCurve");

extern "C" {static PyObject *meth_FbxProperty_GetCurve(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetCurve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxAnimLayer* a0;
        bool a1 = 0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|b", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxAnimLayer, &a0, &a1))
        {
             ::FbxAnimCurve*sipRes = 0;

#line 105 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxproperty.sip"
        sipRes = sipCpp->GetCurve(a0, a1);
#line 1620 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxProperty.cpp"

            return sipConvertFromType(sipRes,sipType_FbxAnimCurve,SIP_NULLPTR);
        }
    }

    {
         ::FbxAnimLayer* a0;
        const char* a1;
        PyObject *a1Keep;
        bool a2 = 0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8A8|b", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxAnimLayer, &a0, &a1Keep, &a1, &a2))
        {
             ::FbxAnimCurve*sipRes = 0;

#line 109 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxproperty.sip"
        sipRes = sipCpp->GetCurve(a0, a1, a2);
#line 1639 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxProperty.cpp"
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxAnimCurve,SIP_NULLPTR);
        }
    }

    {
         ::FbxAnimLayer* a0;
        const char* a1;
        PyObject *a1Keep;
        const char* a2;
        PyObject *a2Keep;
        bool a3 = 0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8A8A8|b", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxAnimLayer, &a0, &a1Keep, &a1, &a2Keep, &a2, &a3))
        {
             ::FbxAnimCurve*sipRes = 0;

#line 113 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxproperty.sip"
        sipRes = sipCpp->GetCurve(a0, a1, a2, a3);
#line 1661 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxProperty.cpp"
            Py_DECREF(a1Keep);
            Py_DECREF(a2Keep);

            return sipConvertFromType(sipRes,sipType_FbxAnimCurve,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetCurve, doc_FbxProperty_GetCurve);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_ConnectSrcObject, "ConnectSrcObject(self, FbxObject, FbxConnection.EType = FbxConnection.eNone) -> bool");

extern "C" {static PyObject *meth_FbxProperty_ConnectSrcObject(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_ConnectSrcObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxObject* a0;
         ::FbxConnection::EType a1 = FbxConnection::eNone;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|E", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxObject, &a0, sipType_FbxConnection_EType, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->ConnectSrcObject(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_ConnectSrcObject, doc_FbxProperty_ConnectSrcObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_IsConnectedSrcObject, "IsConnectedSrcObject(self, FbxObject) -> bool");

extern "C" {static PyObject *meth_FbxProperty_IsConnectedSrcObject(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_IsConnectedSrcObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject* a0;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxObject, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->IsConnectedSrcObject(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_IsConnectedSrcObject, doc_FbxProperty_IsConnectedSrcObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_DisconnectSrcObject, "DisconnectSrcObject(self, FbxObject) -> bool");

extern "C" {static PyObject *meth_FbxProperty_DisconnectSrcObject(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_DisconnectSrcObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxObject* a0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxObject, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->DisconnectSrcObject(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_DisconnectSrcObject, doc_FbxProperty_DisconnectSrcObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_DisconnectAllSrcObject, "DisconnectAllSrcObject(self) -> bool\n"
"DisconnectAllSrcObject(self, FbxCriteria) -> bool");

extern "C" {static PyObject *meth_FbxProperty_DisconnectAllSrcObject(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_DisconnectAllSrcObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->DisconnectAllSrcObject();

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::FbxCriteria* a0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxCriteria, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->DisconnectAllSrcObject(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_DisconnectAllSrcObject, doc_FbxProperty_DisconnectAllSrcObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetSrcObjectCount, "GetSrcObjectCount(self) -> int\n"
"GetSrcObjectCount(self, FbxCriteria) -> int");

extern "C" {static PyObject *meth_FbxProperty_GetSrcObjectCount(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetSrcObjectCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetSrcObjectCount();

            return PyLong_FromLong(sipRes);
        }
    }

    {
        const  ::FbxCriteria* a0;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxCriteria, &a0))
        {
            int sipRes;

            sipRes = sipCpp->GetSrcObjectCount(*a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetSrcObjectCount, doc_FbxProperty_GetSrcObjectCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetSrcObject, "GetSrcObject(self, int = 0) -> FbxObject\n"
"GetSrcObject(self, FbxCriteria, int = 0) -> FbxObject");

extern "C" {static PyObject *meth_FbxProperty_GetSrcObject(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetSrcObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_FbxProperty, &sipCpp, &a0))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->GetSrcObject(a0);

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    {
        const  ::FbxCriteria* a0;
        int a1 = 0;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|i", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxCriteria, &a0, &a1))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->GetSrcObject(*a0,a1);

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetSrcObject, doc_FbxProperty_GetSrcObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_FindSrcObject, "FindSrcObject(self, str, int = 0) -> FbxObject\n"
"FindSrcObject(self, FbxCriteria, str, int = 0) -> FbxObject");

extern "C" {static PyObject *meth_FbxProperty_FindSrcObject(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_FindSrcObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        int a1 = 0;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8|i", &sipSelf, sipType_FbxProperty, &sipCpp, &a0Keep, &a0, &a1))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->FindSrcObject(a0,a1);
            Py_DECREF(a0Keep);

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    {
        const  ::FbxCriteria* a0;
        const char* a1;
        PyObject *a1Keep;
        int a2 = 0;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9A8|i", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxCriteria, &a0, &a1Keep, &a1, &a2))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->FindSrcObject(*a0,a1,a2);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_FindSrcObject, doc_FbxProperty_FindSrcObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_ConnectDstObject, "ConnectDstObject(self, FbxObject, FbxConnection.EType = FbxConnection.eNone) -> bool");

extern "C" {static PyObject *meth_FbxProperty_ConnectDstObject(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_ConnectDstObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxObject* a0;
         ::FbxConnection::EType a1 = FbxConnection::eNone;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|E", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxObject, &a0, sipType_FbxConnection_EType, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->ConnectDstObject(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_ConnectDstObject, doc_FbxProperty_ConnectDstObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_IsConnectedDstObject, "IsConnectedDstObject(self, FbxObject) -> bool");

extern "C" {static PyObject *meth_FbxProperty_IsConnectedDstObject(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_IsConnectedDstObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject* a0;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxObject, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->IsConnectedDstObject(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_IsConnectedDstObject, doc_FbxProperty_IsConnectedDstObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_DisconnectDstObject, "DisconnectDstObject(self, FbxObject) -> bool");

extern "C" {static PyObject *meth_FbxProperty_DisconnectDstObject(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_DisconnectDstObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxObject* a0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxObject, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->DisconnectDstObject(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_DisconnectDstObject, doc_FbxProperty_DisconnectDstObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_DisconnectAllDstObject, "DisconnectAllDstObject(self) -> bool\n"
"DisconnectAllDstObject(self, FbxCriteria) -> bool");

extern "C" {static PyObject *meth_FbxProperty_DisconnectAllDstObject(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_DisconnectAllDstObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->DisconnectAllDstObject();

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::FbxCriteria* a0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxCriteria, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->DisconnectAllDstObject(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_DisconnectAllDstObject, doc_FbxProperty_DisconnectAllDstObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetDstObjectCount, "GetDstObjectCount(self) -> int\n"
"GetDstObjectCount(self, FbxCriteria) -> int");

extern "C" {static PyObject *meth_FbxProperty_GetDstObjectCount(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetDstObjectCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetDstObjectCount();

            return PyLong_FromLong(sipRes);
        }
    }

    {
        const  ::FbxCriteria* a0;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxCriteria, &a0))
        {
            int sipRes;

            sipRes = sipCpp->GetDstObjectCount(*a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetDstObjectCount, doc_FbxProperty_GetDstObjectCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetDstObject, "GetDstObject(self, int = 0) -> FbxObject\n"
"GetDstObject(self, FbxCriteria, int = 0) -> FbxObject");

extern "C" {static PyObject *meth_FbxProperty_GetDstObject(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetDstObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_FbxProperty, &sipCpp, &a0))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->GetDstObject(a0);

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    {
        const  ::FbxCriteria* a0;
        int a1 = 0;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|i", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxCriteria, &a0, &a1))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->GetDstObject(*a0,a1);

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetDstObject, doc_FbxProperty_GetDstObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_FindDstObject, "FindDstObject(self, str, int = 0) -> FbxObject\n"
"FindDstObject(self, FbxCriteria, str, int = 0) -> FbxObject");

extern "C" {static PyObject *meth_FbxProperty_FindDstObject(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_FindDstObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        int a1 = 0;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8|i", &sipSelf, sipType_FbxProperty, &sipCpp, &a0Keep, &a0, &a1))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->FindDstObject(a0,a1);
            Py_DECREF(a0Keep);

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    {
        const  ::FbxCriteria* a0;
        const char* a1;
        PyObject *a1Keep;
        int a2 = 0;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9A8|i", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxCriteria, &a0, &a1Keep, &a1, &a2))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->FindDstObject(*a0,a1,a2);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_FindDstObject, doc_FbxProperty_FindDstObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_ConnectSrcProperty, "ConnectSrcProperty(self, FbxProperty) -> bool");

extern "C" {static PyObject *meth_FbxProperty_ConnectSrcProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_ConnectSrcProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty* a0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxProperty, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->ConnectSrcProperty(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_ConnectSrcProperty, doc_FbxProperty_ConnectSrcProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_IsConnectedSrcProperty, "IsConnectedSrcProperty(self, FbxProperty) -> bool");

extern "C" {static PyObject *meth_FbxProperty_IsConnectedSrcProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_IsConnectedSrcProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty* a0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxProperty, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->IsConnectedSrcProperty(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_IsConnectedSrcProperty, doc_FbxProperty_IsConnectedSrcProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_DisconnectSrcProperty, "DisconnectSrcProperty(self, FbxProperty) -> bool");

extern "C" {static PyObject *meth_FbxProperty_DisconnectSrcProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_DisconnectSrcProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty* a0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxProperty, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->DisconnectSrcProperty(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_DisconnectSrcProperty, doc_FbxProperty_DisconnectSrcProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetSrcPropertyCount, "GetSrcPropertyCount(self) -> int");

extern "C" {static PyObject *meth_FbxProperty_GetSrcPropertyCount(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetSrcPropertyCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetSrcPropertyCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetSrcPropertyCount, doc_FbxProperty_GetSrcPropertyCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetSrcProperty, "GetSrcProperty(self, int = 0) -> FbxProperty");

extern "C" {static PyObject *meth_FbxProperty_GetSrcProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetSrcProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_FbxProperty, &sipCpp, &a0))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->GetSrcProperty(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetSrcProperty, doc_FbxProperty_GetSrcProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_FindSrcProperty, "FindSrcProperty(self, str, int = 0) -> FbxProperty");

extern "C" {static PyObject *meth_FbxProperty_FindSrcProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_FindSrcProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        int a1 = 0;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8|i", &sipSelf, sipType_FbxProperty, &sipCpp, &a0Keep, &a0, &a1))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->FindSrcProperty(a0,a1));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_FindSrcProperty, doc_FbxProperty_FindSrcProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_ConnectDstProperty, "ConnectDstProperty(self, FbxProperty) -> bool");

extern "C" {static PyObject *meth_FbxProperty_ConnectDstProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_ConnectDstProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty* a0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxProperty, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->ConnectDstProperty(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_ConnectDstProperty, doc_FbxProperty_ConnectDstProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_IsConnectedDstProperty, "IsConnectedDstProperty(self, FbxProperty) -> bool");

extern "C" {static PyObject *meth_FbxProperty_IsConnectedDstProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_IsConnectedDstProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty* a0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxProperty, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->IsConnectedDstProperty(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_IsConnectedDstProperty, doc_FbxProperty_IsConnectedDstProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_DisconnectDstProperty, "DisconnectDstProperty(self, FbxProperty) -> bool");

extern "C" {static PyObject *meth_FbxProperty_DisconnectDstProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_DisconnectDstProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty* a0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxProperty, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->DisconnectDstProperty(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_DisconnectDstProperty, doc_FbxProperty_DisconnectDstProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetDstPropertyCount, "GetDstPropertyCount(self) -> int");

extern "C" {static PyObject *meth_FbxProperty_GetDstPropertyCount(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetDstPropertyCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetDstPropertyCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetDstPropertyCount, doc_FbxProperty_GetDstPropertyCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_GetDstProperty, "GetDstProperty(self, int = 0) -> FbxProperty");

extern "C" {static PyObject *meth_FbxProperty_GetDstProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_GetDstProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_FbxProperty, &sipCpp, &a0))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->GetDstProperty(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_GetDstProperty, doc_FbxProperty_GetDstProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_FindDstProperty, "FindDstProperty(self, str, int = 0) -> FbxProperty");

extern "C" {static PyObject *meth_FbxProperty_FindDstProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_FindDstProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        int a1 = 0;
        const  ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8|i", &sipSelf, sipType_FbxProperty, &sipCpp, &a0Keep, &a0, &a1))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->FindDstProperty(a0,a1));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_FindDstProperty, doc_FbxProperty_FindDstProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_ClearConnectCache, "ClearConnectCache(self)");

extern "C" {static PyObject *meth_FbxProperty_ClearConnectCache(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_ClearConnectCache(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProperty, &sipCpp))
        {
            sipCpp->ClearConnectCache();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_ClearConnectCache, doc_FbxProperty_ClearConnectCache);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProperty_Set, "Set(self, float) -> bool\n"
"Set(self, FbxString) -> bool\n"
"Set(self, FbxColor) -> bool\n"
"Set(self, FbxDouble3) -> bool\n"
"Set(self, FbxQuaternion) -> bool\n"
"Set(self, FbxDouble4) -> bool\n"
"Set(self, FbxDouble4x4) -> bool\n"
"Set(self, FbxTime) -> bool");

extern "C" {static PyObject *meth_FbxProperty_Set(PyObject *, PyObject *);}
static PyObject *meth_FbxProperty_Set(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_FbxProperty, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->Set(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::FbxString* a0;
        int a0State = 0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxString, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->Set(*a0);
            sipReleaseType(const_cast< ::FbxString *>(a0), sipType_FbxString, a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::FbxColor* a0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxColor, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->Set(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::FbxDouble3* a0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxDouble3, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->Set(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::FbxQuaternion* a0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxQuaternion, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->Set(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::FbxDouble4* a0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxDouble4, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->Set(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::FbxDouble4x4* a0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxDouble4x4, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->Set(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::FbxTime* a0;
         ::FbxProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxProperty, &sipCpp, sipType_FbxTime, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->Set(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProperty, sipName_Set, doc_FbxProperty_Set);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_FbxProperty___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxProperty___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxProperty *sipCpp = reinterpret_cast< ::FbxProperty *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxProperty));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxProperty, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxProperty::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxProperty::operator!=(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxProperty, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxProperty___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxProperty___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxProperty *sipCpp = reinterpret_cast< ::FbxProperty *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxProperty));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxProperty, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxProperty::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxProperty::operator==(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxProperty, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxProperty(void *, int);}
static void release_FbxProperty(void *sipCppV, int)
{
    delete reinterpret_cast< ::FbxProperty *>(sipCppV);
}


extern "C" {static void *array_FbxProperty(Py_ssize_t);}
static void *array_FbxProperty(Py_ssize_t sipNrElem)
{
    return new  ::FbxProperty[sipNrElem];
}


extern "C" {static void assign_FbxProperty(void *, Py_ssize_t, void *);}
static void assign_FbxProperty(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::FbxProperty *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::FbxProperty *>(sipSrc);
}


extern "C" {static void *copy_FbxProperty(const void *, Py_ssize_t);}
static void *copy_FbxProperty(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::FbxProperty(reinterpret_cast<const  ::FbxProperty *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxProperty(sipSimpleWrapper *);}
static void dealloc_FbxProperty(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxProperty(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_FbxProperty(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxProperty(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::FbxProperty *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::FbxProperty();

            return sipCpp;
        }
    }

    {
        const  ::FbxProperty* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_FbxProperty, &a0))
        {
            sipCpp = new  ::FbxProperty(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxProperty[] = {
    {(void *)slot_FbxProperty___ne__, ne_slot},
    {(void *)slot_FbxProperty___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxProperty[] = {
    {sipName_AddEnumValue, meth_FbxProperty_AddEnumValue, METH_VARARGS, doc_FbxProperty_AddEnumValue},
    {sipName_BeginCreateOrFindProperty, meth_FbxProperty_BeginCreateOrFindProperty, METH_VARARGS, doc_FbxProperty_BeginCreateOrFindProperty},
    {sipName_ClearConnectCache, meth_FbxProperty_ClearConnectCache, METH_VARARGS, doc_FbxProperty_ClearConnectCache},
    {sipName_CompareValue, meth_FbxProperty_CompareValue, METH_VARARGS, doc_FbxProperty_CompareValue},
    {sipName_ConnectDstObject, meth_FbxProperty_ConnectDstObject, METH_VARARGS, doc_FbxProperty_ConnectDstObject},
    {sipName_ConnectDstProperty, meth_FbxProperty_ConnectDstProperty, METH_VARARGS, doc_FbxProperty_ConnectDstProperty},
    {sipName_ConnectSrcObject, meth_FbxProperty_ConnectSrcObject, METH_VARARGS, doc_FbxProperty_ConnectSrcObject},
    {sipName_ConnectSrcProperty, meth_FbxProperty_ConnectSrcProperty, METH_VARARGS, doc_FbxProperty_ConnectSrcProperty},
    {sipName_CopyValue, meth_FbxProperty_CopyValue, METH_VARARGS, doc_FbxProperty_CopyValue},
    {sipName_Create, meth_FbxProperty_Create, METH_VARARGS, doc_FbxProperty_Create},
    {sipName_CreateCurveNode, meth_FbxProperty_CreateCurveNode, METH_VARARGS, doc_FbxProperty_CreateCurveNode},
    {sipName_CreateFrom, meth_FbxProperty_CreateFrom, METH_VARARGS, doc_FbxProperty_CreateFrom},
    {sipName_Destroy, meth_FbxProperty_Destroy, METH_VARARGS, doc_FbxProperty_Destroy},
    {sipName_DestroyRecursively, meth_FbxProperty_DestroyRecursively, METH_VARARGS, doc_FbxProperty_DestroyRecursively},
    {sipName_DisconnectAllDstObject, meth_FbxProperty_DisconnectAllDstObject, METH_VARARGS, doc_FbxProperty_DisconnectAllDstObject},
    {sipName_DisconnectAllSrcObject, meth_FbxProperty_DisconnectAllSrcObject, METH_VARARGS, doc_FbxProperty_DisconnectAllSrcObject},
    {sipName_DisconnectDstObject, meth_FbxProperty_DisconnectDstObject, METH_VARARGS, doc_FbxProperty_DisconnectDstObject},
    {sipName_DisconnectDstProperty, meth_FbxProperty_DisconnectDstProperty, METH_VARARGS, doc_FbxProperty_DisconnectDstProperty},
    {sipName_DisconnectSrcObject, meth_FbxProperty_DisconnectSrcObject, METH_VARARGS, doc_FbxProperty_DisconnectSrcObject},
    {sipName_DisconnectSrcProperty, meth_FbxProperty_DisconnectSrcProperty, METH_VARARGS, doc_FbxProperty_DisconnectSrcProperty},
    {sipName_EndCreateOrFindProperty, meth_FbxProperty_EndCreateOrFindProperty, METH_VARARGS, doc_FbxProperty_EndCreateOrFindProperty},
    {sipName_Find, meth_FbxProperty_Find, METH_VARARGS, doc_FbxProperty_Find},
    {sipName_FindDstObject, meth_FbxProperty_FindDstObject, METH_VARARGS, doc_FbxProperty_FindDstObject},
    {sipName_FindDstProperty, meth_FbxProperty_FindDstProperty, METH_VARARGS, doc_FbxProperty_FindDstProperty},
    {sipName_FindHierarchical, meth_FbxProperty_FindHierarchical, METH_VARARGS, doc_FbxProperty_FindHierarchical},
    {sipName_FindSrcObject, meth_FbxProperty_FindSrcObject, METH_VARARGS, doc_FbxProperty_FindSrcObject},
    {sipName_FindSrcProperty, meth_FbxProperty_FindSrcProperty, METH_VARARGS, doc_FbxProperty_FindSrcProperty},
    {sipName_GetChild, meth_FbxProperty_GetChild, METH_VARARGS, doc_FbxProperty_GetChild},
    {sipName_GetCurve, meth_FbxProperty_GetCurve, METH_VARARGS, doc_FbxProperty_GetCurve},
    {sipName_GetCurveNode, meth_FbxProperty_GetCurveNode, METH_VARARGS, doc_FbxProperty_GetCurveNode},
    {sipName_GetDstObject, meth_FbxProperty_GetDstObject, METH_VARARGS, doc_FbxProperty_GetDstObject},
    {sipName_GetDstObjectCount, meth_FbxProperty_GetDstObjectCount, METH_VARARGS, doc_FbxProperty_GetDstObjectCount},
    {sipName_GetDstProperty, meth_FbxProperty_GetDstProperty, METH_VARARGS, doc_FbxProperty_GetDstProperty},
    {sipName_GetDstPropertyCount, meth_FbxProperty_GetDstPropertyCount, METH_VARARGS, doc_FbxProperty_GetDstPropertyCount},
    {sipName_GetEnumCount, meth_FbxProperty_GetEnumCount, METH_VARARGS, doc_FbxProperty_GetEnumCount},
    {sipName_GetEnumValue, meth_FbxProperty_GetEnumValue, METH_VARARGS, doc_FbxProperty_GetEnumValue},
    {sipName_GetFbxObject, meth_FbxProperty_GetFbxObject, METH_VARARGS, doc_FbxProperty_GetFbxObject},
    {sipName_GetFirstDescendent, meth_FbxProperty_GetFirstDescendent, METH_VARARGS, doc_FbxProperty_GetFirstDescendent},
    {sipName_GetFlag, meth_FbxProperty_GetFlag, METH_VARARGS, doc_FbxProperty_GetFlag},
    {sipName_GetFlagInheritType, meth_FbxProperty_GetFlagInheritType, METH_VARARGS, doc_FbxProperty_GetFlagInheritType},
    {sipName_GetHierarchicalName, meth_FbxProperty_GetHierarchicalName, METH_VARARGS, doc_FbxProperty_GetHierarchicalName},
    {sipName_GetLabel, meth_FbxProperty_GetLabel, METH_VARARGS, doc_FbxProperty_GetLabel},
    {sipName_GetMaxLimit, meth_FbxProperty_GetMaxLimit, METH_VARARGS, doc_FbxProperty_GetMaxLimit},
    {sipName_GetMinLimit, meth_FbxProperty_GetMinLimit, METH_VARARGS, doc_FbxProperty_GetMinLimit},
    {sipName_GetName, meth_FbxProperty_GetName, METH_VARARGS, doc_FbxProperty_GetName},
    {sipName_GetNextDescendent, meth_FbxProperty_GetNextDescendent, METH_VARARGS, doc_FbxProperty_GetNextDescendent},
    {sipName_GetParent, meth_FbxProperty_GetParent, METH_VARARGS, doc_FbxProperty_GetParent},
    {sipName_GetPropertyDataType, meth_FbxProperty_GetPropertyDataType, METH_VARARGS, doc_FbxProperty_GetPropertyDataType},
    {sipName_GetSibling, meth_FbxProperty_GetSibling, METH_VARARGS, doc_FbxProperty_GetSibling},
    {sipName_GetSrcObject, meth_FbxProperty_GetSrcObject, METH_VARARGS, doc_FbxProperty_GetSrcObject},
    {sipName_GetSrcObjectCount, meth_FbxProperty_GetSrcObjectCount, METH_VARARGS, doc_FbxProperty_GetSrcObjectCount},
    {sipName_GetSrcProperty, meth_FbxProperty_GetSrcProperty, METH_VARARGS, doc_FbxProperty_GetSrcProperty},
    {sipName_GetSrcPropertyCount, meth_FbxProperty_GetSrcPropertyCount, METH_VARARGS, doc_FbxProperty_GetSrcPropertyCount},
    {sipName_GetUserTag, meth_FbxProperty_GetUserTag, METH_VARARGS, doc_FbxProperty_GetUserTag},
    {sipName_GetValueInheritType, meth_FbxProperty_GetValueInheritType, METH_VARARGS, doc_FbxProperty_GetValueInheritType},
    {sipName_HasDefaultValue, meth_FbxProperty_HasDefaultValue, METH_VARARGS, doc_FbxProperty_HasDefaultValue},
    {sipName_HasMaxLimit, meth_FbxProperty_HasMaxLimit, METH_VARARGS, doc_FbxProperty_HasMaxLimit},
    {sipName_HasMinLimit, meth_FbxProperty_HasMinLimit, METH_VARARGS, doc_FbxProperty_HasMinLimit},
    {sipName_InsertEnumValue, meth_FbxProperty_InsertEnumValue, METH_VARARGS, doc_FbxProperty_InsertEnumValue},
    {sipName_IsChildOf, meth_FbxProperty_IsChildOf, METH_VARARGS, doc_FbxProperty_IsChildOf},
    {sipName_IsConnectedDstObject, meth_FbxProperty_IsConnectedDstObject, METH_VARARGS, doc_FbxProperty_IsConnectedDstObject},
    {sipName_IsConnectedDstProperty, meth_FbxProperty_IsConnectedDstProperty, METH_VARARGS, doc_FbxProperty_IsConnectedDstProperty},
    {sipName_IsConnectedSrcObject, meth_FbxProperty_IsConnectedSrcObject, METH_VARARGS, doc_FbxProperty_IsConnectedSrcObject},
    {sipName_IsConnectedSrcProperty, meth_FbxProperty_IsConnectedSrcProperty, METH_VARARGS, doc_FbxProperty_IsConnectedSrcProperty},
    {sipName_IsDescendentOf, meth_FbxProperty_IsDescendentOf, METH_VARARGS, doc_FbxProperty_IsDescendentOf},
    {sipName_IsRoot, meth_FbxProperty_IsRoot, METH_VARARGS, doc_FbxProperty_IsRoot},
    {sipName_IsValid, meth_FbxProperty_IsValid, METH_VARARGS, doc_FbxProperty_IsValid},
    {sipName_Modified, meth_FbxProperty_Modified, METH_VARARGS, doc_FbxProperty_Modified},
    {sipName_ModifiedFlag, meth_FbxProperty_ModifiedFlag, METH_VARARGS, doc_FbxProperty_ModifiedFlag},
    {sipName_ModifyFlag, meth_FbxProperty_ModifyFlag, METH_VARARGS, doc_FbxProperty_ModifyFlag},
    {sipName_RemoveEnumValue, meth_FbxProperty_RemoveEnumValue, METH_VARARGS, doc_FbxProperty_RemoveEnumValue},
    {sipName_Set, meth_FbxProperty_Set, METH_VARARGS, doc_FbxProperty_Set},
    {sipName_SetEnumValue, meth_FbxProperty_SetEnumValue, METH_VARARGS, doc_FbxProperty_SetEnumValue},
    {sipName_SetFlagInheritType, meth_FbxProperty_SetFlagInheritType, METH_VARARGS, doc_FbxProperty_SetFlagInheritType},
    {sipName_SetLabel, meth_FbxProperty_SetLabel, METH_VARARGS, doc_FbxProperty_SetLabel},
    {sipName_SetLimits, meth_FbxProperty_SetLimits, METH_VARARGS, doc_FbxProperty_SetLimits},
    {sipName_SetMaxLimit, meth_FbxProperty_SetMaxLimit, METH_VARARGS, doc_FbxProperty_SetMaxLimit},
    {sipName_SetMinLimit, meth_FbxProperty_SetMinLimit, METH_VARARGS, doc_FbxProperty_SetMinLimit},
    {sipName_SetUserTag, meth_FbxProperty_SetUserTag, METH_VARARGS, doc_FbxProperty_SetUserTag},
    {sipName_SetValueInheritType, meth_FbxProperty_SetValueInheritType, METH_VARARGS, doc_FbxProperty_SetValueInheritType},
    {sipName_SupportSetLimitAsDouble, meth_FbxProperty_SupportSetLimitAsDouble, METH_VARARGS, doc_FbxProperty_SupportSetLimitAsDouble}
};

PyDoc_STRVAR(doc_FbxProperty, "\1FbxProperty()\n"
"FbxProperty(FbxProperty)");


sipClassTypeDef sipTypeDef_fbx_FbxProperty = {
    {
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_FbxProperty,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxProperty,
        {0, 0, 1},
        81, methods_FbxProperty,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_FbxProperty,
    -1,
    -1,
    SIP_NULLPTR,
    slots_FbxProperty,
    init_type_FbxProperty,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_FbxProperty,
    assign_FbxProperty,
    array_FbxProperty,
    copy_FbxProperty,
    release_FbxProperty,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
