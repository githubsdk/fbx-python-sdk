/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxPropertyInteger1_Get, "Get(self) -> int");

extern "C" {static PyObject *meth_FbxPropertyInteger1_Get(PyObject *, PyObject *);}
static PyObject *meth_FbxPropertyInteger1_Get(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxPropertyInteger1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPropertyInteger1, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->Get();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxPropertyInteger1, sipName_Get, doc_FbxPropertyInteger1_Get);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxPropertyInteger1(void *, const sipTypeDef *);}
static void *cast_FbxPropertyInteger1(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxPropertyInteger1 *sipCpp = reinterpret_cast< ::FbxPropertyInteger1 *>(sipCppV);

    if (targetType == sipType_FbxPropertyInteger1)
        return sipCppV;

    if (targetType == sipType_FbxProperty)
        return static_cast< ::FbxProperty *>(sipCpp);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxPropertyInteger1(void *, int);}
static void release_FbxPropertyInteger1(void *sipCppV, int)
{
    delete reinterpret_cast< ::FbxPropertyInteger1 *>(sipCppV);
}


extern "C" {static void *array_FbxPropertyInteger1(Py_ssize_t);}
static void *array_FbxPropertyInteger1(Py_ssize_t sipNrElem)
{
    return new  ::FbxPropertyInteger1[sipNrElem];
}


extern "C" {static void assign_FbxPropertyInteger1(void *, Py_ssize_t, void *);}
static void assign_FbxPropertyInteger1(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::FbxPropertyInteger1 *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::FbxPropertyInteger1 *>(sipSrc);
}


extern "C" {static void *copy_FbxPropertyInteger1(const void *, Py_ssize_t);}
static void *copy_FbxPropertyInteger1(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::FbxPropertyInteger1(reinterpret_cast<const  ::FbxPropertyInteger1 *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxPropertyInteger1(sipSimpleWrapper *);}
static void dealloc_FbxPropertyInteger1(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxPropertyInteger1(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_FbxPropertyInteger1(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxPropertyInteger1(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::FbxPropertyInteger1 *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::FbxPropertyInteger1();

            return sipCpp;
        }
    }

    {
        const  ::FbxProperty* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_FbxProperty, &a0))
        {
            sipCpp = new  ::FbxPropertyInteger1(*a0);

            return sipCpp;
        }
    }

    {
        const  ::FbxPropertyInteger1* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_FbxPropertyInteger1, &a0))
        {
            sipCpp = new  ::FbxPropertyInteger1(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxPropertyInteger1[] = {{258, 255, 1}};


static PyMethodDef methods_FbxPropertyInteger1[] = {
    {sipName_Get, meth_FbxPropertyInteger1_Get, METH_VARARGS, doc_FbxPropertyInteger1_Get}
};

PyDoc_STRVAR(doc_FbxPropertyInteger1, "\1FbxPropertyInteger1()\n"
"FbxPropertyInteger1(FbxProperty)\n"
"FbxPropertyInteger1(FbxPropertyInteger1)");


sipClassTypeDef sipTypeDef_fbx_FbxPropertyInteger1 = {
    {
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_FbxPropertyInteger1,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxPropertyInteger1,
        {0, 0, 1},
        1, methods_FbxPropertyInteger1,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_FbxPropertyInteger1,
    -1,
    -1,
    supers_FbxPropertyInteger1,
    SIP_NULLPTR,
    init_type_FbxPropertyInteger1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_FbxPropertyInteger1,
    assign_FbxPropertyInteger1,
    array_FbxPropertyInteger1,
    copy_FbxPropertyInteger1,
    release_FbxPropertyInteger1,
    cast_FbxPropertyInteger1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
