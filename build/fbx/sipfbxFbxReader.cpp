/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"


#line 4 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxstatus.sip"
#include <fbxsdk.h>
#line 44 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxReader.cpp"


class sipFbxReader : public  ::FbxReader
{
public:
    sipFbxReader( ::FbxManager&,int, ::FbxStatus&);
    sipFbxReader(const  ::FbxReader&);
    virtual ~sipFbxReader();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void SetProgressHandler( ::FbxProgress*) SIP_OVERRIDE;
    void SetIOSettings( ::FbxIOSettings*) SIP_OVERRIDE;
     ::FbxIOSettings* GetIOSettings() SIP_OVERRIDE;
    bool GetDefaultRenderResolution( ::FbxString&, ::FbxString&,double&,double&) SIP_OVERRIDE;
     ::FbxDocumentInfo* GetSceneInfo() SIP_OVERRIDE;
    bool GetStatistics( ::FbxStatistics*) SIP_OVERRIDE;
    bool GetAxisInfo( ::FbxAxisSystem*, ::FbxSystemUnit*) SIP_OVERRIDE;
    bool FileOpen(char*, ::FbxReader::EFileOpenSpecialFlags) SIP_OVERRIDE;
    void PluginReadParameters( ::FbxObject&) SIP_OVERRIDE;
    bool Read( ::FbxDocument*) SIP_OVERRIDE;
    bool GetReadOptions(bool) SIP_OVERRIDE;
    bool IsFileOpen() SIP_OVERRIDE;
    bool FileClose() SIP_OVERRIDE;
    bool FileOpen(char*) SIP_OVERRIDE;
    void GetVersion(int&,int&,int&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipFbxReader(const sipFbxReader &);
    sipFbxReader &operator = (const sipFbxReader &);

    char sipPyMethods[15];
};

sipFbxReader::sipFbxReader( ::FbxManager& a0,int a1, ::FbxStatus& a2):  ::FbxReader(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipFbxReader::sipFbxReader(const  ::FbxReader& a0):  ::FbxReader(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipFbxReader::~sipFbxReader()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipFbxReader::SetProgressHandler( ::FbxProgress*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_SetProgressHandler);

    if (!sipMeth)
    {
         ::FbxReader::SetProgressHandler(a0);
        return;
    }

    extern void sipVH_fbx_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxProgress*);

    sipVH_fbx_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipFbxReader::SetIOSettings( ::FbxIOSettings*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_SetIOSettings);

    if (!sipMeth)
    {
         ::FbxReader::SetIOSettings(a0);
        return;
    }

    extern void sipVH_fbx_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxIOSettings*);

    sipVH_fbx_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::FbxIOSettings* sipFbxReader::GetIOSettings()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_GetIOSettings);

    if (!sipMeth)
        return  ::FbxReader::GetIOSettings();

    extern  ::FbxIOSettings* sipVH_fbx_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_fbx_2(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipFbxReader::GetDefaultRenderResolution( ::FbxString& a0, ::FbxString& a1,double& a2,double& a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_GetDefaultRenderResolution);

    if (!sipMeth)
        return  ::FbxReader::GetDefaultRenderResolution(a0,a1,a2,a3);

    extern bool sipVH_fbx_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxString&, ::FbxString&,double&,double&);

    return sipVH_fbx_25(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

 ::FbxDocumentInfo* sipFbxReader::GetSceneInfo()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_GetSceneInfo);

    if (!sipMeth)
        return  ::FbxReader::GetSceneInfo();

    extern  ::FbxDocumentInfo* sipVH_fbx_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_fbx_24(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipFbxReader::GetStatistics( ::FbxStatistics*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_GetStatistics);

    if (!sipMeth)
        return  ::FbxReader::GetStatistics(a0);

    extern bool sipVH_fbx_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxStatistics*);

    return sipVH_fbx_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipFbxReader::GetAxisInfo( ::FbxAxisSystem*a0, ::FbxSystemUnit*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_GetAxisInfo);

    if (!sipMeth)
        return  ::FbxReader::GetAxisInfo(a0,a1);

    extern bool sipVH_fbx_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAxisSystem*, ::FbxSystemUnit*);

    return sipVH_fbx_22(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipFbxReader::FileOpen(char*a0, ::FbxReader::EFileOpenSpecialFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_FileOpen);

    if (!sipMeth)
        return  ::FbxReader::FileOpen(a0,a1);

    extern bool sipVH_fbx_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*, ::FbxReader::EFileOpenSpecialFlags);

    return sipVH_fbx_21(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipFbxReader::PluginReadParameters( ::FbxObject& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_PluginReadParameters);

    if (!sipMeth)
    {
         ::FbxReader::PluginReadParameters(a0);
        return;
    }

    extern void sipVH_fbx_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxObject&);

    sipVH_fbx_20(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipFbxReader::Read( ::FbxDocument*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], &sipPySelf, sipName_FbxReader, sipName_Read);

    if (!sipMeth)
        return 0;

    extern bool sipVH_fbx_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxDocument*);

    return sipVH_fbx_19(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipFbxReader::GetReadOptions(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], &sipPySelf, sipName_FbxReader, sipName_GetReadOptions);

    if (!sipMeth)
        return 0;

    extern bool sipVH_fbx_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_fbx_18(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipFbxReader::IsFileOpen()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[11], &sipPySelf, sipName_FbxReader, sipName_IsFileOpen);

    if (!sipMeth)
        return 0;

    extern bool sipVH_fbx_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_fbx_17(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipFbxReader::FileClose()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[12], &sipPySelf, sipName_FbxReader, sipName_FileClose);

    if (!sipMeth)
        return 0;

    extern bool sipVH_fbx_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_fbx_17(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipFbxReader::FileOpen(char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[13], &sipPySelf, sipName_FbxReader, sipName_FileOpen);

    if (!sipMeth)
        return 0;

    extern bool sipVH_fbx_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*);

    return sipVH_fbx_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipFbxReader::GetVersion(int& a0,int& a1,int& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[14], &sipPySelf, SIP_NULLPTR, sipName_GetVersion);

    if (!sipMeth)
    {
         ::FbxReader::GetVersion(a0,a1,a2);
        return;
    }

    extern void sipVH_fbx_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int&,int&,int&);

    sipVH_fbx_15(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}


PyDoc_STRVAR(doc_FbxReader_GetVersion, "GetVersion(self) -> Tuple[int, int, int]");

extern "C" {static PyObject *meth_FbxReader_GetVersion(PyObject *, PyObject *);}
static PyObject *meth_FbxReader_GetVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxReader)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        int a2;
         ::FbxReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxReader, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::FbxReader::GetVersion(a0,a1,a2) : sipCpp->GetVersion(a0,a1,a2));

            return sipBuildResult(0,"(iii)",a0,a1,a2);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxReader, sipName_GetVersion, doc_FbxReader_GetVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxReader_FileOpen, "FileOpen(self, str) -> bool\n"
"FileOpen(self, str, FbxReader.EFileOpenSpecialFlags) -> bool");

extern "C" {static PyObject *meth_FbxReader_FileOpen(PyObject *, PyObject *);}
static PyObject *meth_FbxReader_FileOpen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxReader)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));
    PyObject *sipOrigSelf = sipSelf;

    {
        char* a0;
        PyObject *a0Keep;
         ::FbxReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxReader, &sipCpp, &a0Keep, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxReader, sipName_FileOpen);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->FileOpen(a0);
            Py_DECREF(a0Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        char* a0;
        PyObject *a0Keep;
         ::FbxReader::EFileOpenSpecialFlags a1;
         ::FbxReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8E", &sipSelf, sipType_FbxReader, &sipCpp, &a0Keep, &a0, sipType_FbxReader_EFileOpenSpecialFlags, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxReader::FileOpen(a0,a1) : sipCpp->FileOpen(a0,a1));
            Py_DECREF(a0Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxReader, sipName_FileOpen, doc_FbxReader_FileOpen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxReader_FileClose, "FileClose(self) -> bool");

extern "C" {static PyObject *meth_FbxReader_FileClose(PyObject *, PyObject *);}
static PyObject *meth_FbxReader_FileClose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::FbxReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxReader, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxReader, sipName_FileClose);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->FileClose();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxReader, sipName_FileClose, doc_FbxReader_FileClose);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxReader_IsFileOpen, "IsFileOpen(self) -> bool");

extern "C" {static PyObject *meth_FbxReader_IsFileOpen(PyObject *, PyObject *);}
static PyObject *meth_FbxReader_IsFileOpen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::FbxReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxReader, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxReader, sipName_IsFileOpen);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->IsFileOpen();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxReader, sipName_IsFileOpen, doc_FbxReader_IsFileOpen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxReader_GetReadOptions, "GetReadOptions(self, bool = True) -> bool");

extern "C" {static PyObject *meth_FbxReader_GetReadOptions(PyObject *, PyObject *);}
static PyObject *meth_FbxReader_GetReadOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        bool a0 = 1;
         ::FbxReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|b", &sipSelf, sipType_FbxReader, &sipCpp, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxReader, sipName_GetReadOptions);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->GetReadOptions(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxReader, sipName_GetReadOptions, doc_FbxReader_GetReadOptions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxReader_Read, "Read(self, FbxDocument) -> bool");

extern "C" {static PyObject *meth_FbxReader_Read(PyObject *, PyObject *);}
static PyObject *meth_FbxReader_Read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::FbxDocument* a0;
         ::FbxReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxReader, &sipCpp, sipType_FbxDocument, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxReader, sipName_Read);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->Read(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxReader, sipName_Read, doc_FbxReader_Read);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxReader_PluginReadParameters, "PluginReadParameters(self, FbxObject)");

extern "C" {static PyObject *meth_FbxReader_PluginReadParameters(PyObject *, PyObject *);}
static PyObject *meth_FbxReader_PluginReadParameters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxReader)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxObject* a0;
         ::FbxReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxReader, &sipCpp, sipType_FbxObject, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::FbxReader::PluginReadParameters(*a0) : sipCpp->PluginReadParameters(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxReader, sipName_PluginReadParameters, doc_FbxReader_PluginReadParameters);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxReader_GetAxisInfo, "GetAxisInfo(self, FbxAxisSystem, FbxSystemUnit) -> bool");

extern "C" {static PyObject *meth_FbxReader_GetAxisInfo(PyObject *, PyObject *);}
static PyObject *meth_FbxReader_GetAxisInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxReader)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxAxisSystem* a0;
         ::FbxSystemUnit* a1;
         ::FbxReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_FbxReader, &sipCpp, sipType_FbxAxisSystem, &a0, sipType_FbxSystemUnit, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxReader::GetAxisInfo(a0,a1) : sipCpp->GetAxisInfo(a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxReader, sipName_GetAxisInfo, doc_FbxReader_GetAxisInfo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxReader_GetStatistics, "GetStatistics(self, FbxStatistics) -> bool");

extern "C" {static PyObject *meth_FbxReader_GetStatistics(PyObject *, PyObject *);}
static PyObject *meth_FbxReader_GetStatistics(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxReader)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxStatistics* a0;
         ::FbxReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxReader, &sipCpp, sipType_FbxStatistics, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxReader::GetStatistics(a0) : sipCpp->GetStatistics(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxReader, sipName_GetStatistics, doc_FbxReader_GetStatistics);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxReader_GetSceneInfo, "GetSceneInfo(self) -> FbxDocumentInfo");

extern "C" {static PyObject *meth_FbxReader_GetSceneInfo(PyObject *, PyObject *);}
static PyObject *meth_FbxReader_GetSceneInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxReader)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxReader, &sipCpp))
        {
             ::FbxDocumentInfo*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxReader::GetSceneInfo() : sipCpp->GetSceneInfo());

            return sipConvertFromType(sipRes,sipType_FbxDocumentInfo,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxReader, sipName_GetSceneInfo, doc_FbxReader_GetSceneInfo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxReader_GetDefaultRenderResolution, "GetDefaultRenderResolution(self, FbxString, FbxString) -> Tuple[bool, float, float]");

extern "C" {static PyObject *meth_FbxReader_GetDefaultRenderResolution(PyObject *, PyObject *);}
static PyObject *meth_FbxReader_GetDefaultRenderResolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxReader)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxString* a0;
        int a0State = 0;
         ::FbxString* a1;
        int a1State = 0;
        double a2;
        double a3;
         ::FbxReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_FbxReader, &sipCpp, sipType_FbxString, &a0, &a0State, sipType_FbxString, &a1, &a1State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxReader::GetDefaultRenderResolution(*a0,*a1,a2,a3) : sipCpp->GetDefaultRenderResolution(*a0,*a1,a2,a3));
            sipReleaseType(a0, sipType_FbxString, a0State);
            sipReleaseType(a1, sipType_FbxString, a1State);

            return sipBuildResult(0,"(bdd)",sipRes,a2,a3);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxReader, sipName_GetDefaultRenderResolution, doc_FbxReader_GetDefaultRenderResolution);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxReader_IsGenuine, "IsGenuine(self) -> bool");

extern "C" {static PyObject *meth_FbxReader_IsGenuine(PyObject *, PyObject *);}
static PyObject *meth_FbxReader_IsGenuine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->IsGenuine();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxReader, sipName_IsGenuine, doc_FbxReader_IsGenuine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxReader_GetIOSettings, "GetIOSettings(self) -> FbxIOSettings");

extern "C" {static PyObject *meth_FbxReader_GetIOSettings(PyObject *, PyObject *);}
static PyObject *meth_FbxReader_GetIOSettings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxReader)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxReader, &sipCpp))
        {
             ::FbxIOSettings*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxReader::GetIOSettings() : sipCpp->GetIOSettings());

            return sipConvertFromType(sipRes,sipType_FbxIOSettings,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxReader, sipName_GetIOSettings, doc_FbxReader_GetIOSettings);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxReader_SetIOSettings, "SetIOSettings(self, FbxIOSettings)");

extern "C" {static PyObject *meth_FbxReader_SetIOSettings(PyObject *, PyObject *);}
static PyObject *meth_FbxReader_SetIOSettings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxReader)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxIOSettings* a0;
         ::FbxReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxReader, &sipCpp, sipType_FbxIOSettings, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::FbxReader::SetIOSettings(a0) : sipCpp->SetIOSettings(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxReader, sipName_SetIOSettings, doc_FbxReader_SetIOSettings);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxReader_SetProgressHandler, "SetProgressHandler(self, FbxProgress)");

extern "C" {static PyObject *meth_FbxReader_SetProgressHandler(PyObject *, PyObject *);}
static PyObject *meth_FbxReader_SetProgressHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxReader)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxProgress* a0;
         ::FbxReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxReader, &sipCpp, sipType_FbxProgress, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::FbxReader::SetProgressHandler(a0) : sipCpp->SetProgressHandler(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxReader, sipName_SetProgressHandler, doc_FbxReader_SetProgressHandler);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxReader(void *, int);}
static void release_FbxReader(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipFbxReader *>(sipCppV);
    else
        delete reinterpret_cast< ::FbxReader *>(sipCppV);
}


extern "C" {static void dealloc_FbxReader(sipSimpleWrapper *);}
static void dealloc_FbxReader(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipFbxReader *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxReader(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_FbxReader(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxReader(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipFbxReader *sipCpp = SIP_NULLPTR;

    {
         ::FbxManager* a0;
        int a1;
         ::FbxStatus* a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9iJ9", sipType_FbxManager, &a0, &a1, sipType_FbxStatus, &a2))
        {
            sipCpp = new sipFbxReader(*a0,a1,*a2);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::FbxReader* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_FbxReader, &a0))
        {
            sipCpp = new sipFbxReader(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_FbxReader[] = {
    {sipName_FileClose, meth_FbxReader_FileClose, METH_VARARGS, doc_FbxReader_FileClose},
    {sipName_FileOpen, meth_FbxReader_FileOpen, METH_VARARGS, doc_FbxReader_FileOpen},
    {sipName_GetAxisInfo, meth_FbxReader_GetAxisInfo, METH_VARARGS, doc_FbxReader_GetAxisInfo},
    {sipName_GetDefaultRenderResolution, meth_FbxReader_GetDefaultRenderResolution, METH_VARARGS, doc_FbxReader_GetDefaultRenderResolution},
    {sipName_GetIOSettings, meth_FbxReader_GetIOSettings, METH_VARARGS, doc_FbxReader_GetIOSettings},
    {sipName_GetReadOptions, meth_FbxReader_GetReadOptions, METH_VARARGS, doc_FbxReader_GetReadOptions},
    {sipName_GetSceneInfo, meth_FbxReader_GetSceneInfo, METH_VARARGS, doc_FbxReader_GetSceneInfo},
    {sipName_GetStatistics, meth_FbxReader_GetStatistics, METH_VARARGS, doc_FbxReader_GetStatistics},
    {sipName_GetVersion, meth_FbxReader_GetVersion, METH_VARARGS, doc_FbxReader_GetVersion},
    {sipName_IsFileOpen, meth_FbxReader_IsFileOpen, METH_VARARGS, doc_FbxReader_IsFileOpen},
    {sipName_IsGenuine, meth_FbxReader_IsGenuine, METH_VARARGS, doc_FbxReader_IsGenuine},
    {sipName_PluginReadParameters, meth_FbxReader_PluginReadParameters, METH_VARARGS, doc_FbxReader_PluginReadParameters},
    {sipName_Read, meth_FbxReader_Read, METH_VARARGS, doc_FbxReader_Read},
    {sipName_SetIOSettings, meth_FbxReader_SetIOSettings, METH_VARARGS, doc_FbxReader_SetIOSettings},
    {sipName_SetProgressHandler, meth_FbxReader_SetProgressHandler, METH_VARARGS, doc_FbxReader_SetProgressHandler}
};


/* Define the enum members and ints to be added to this type. */
static sipIntInstanceDef intInstances_FbxReader[] = {
    {sipName_eParseForGlobalSettings, static_cast<int>( ::FbxReader::eParseForGlobalSettings)},
    {sipName_eParseForStatistics, static_cast<int>( ::FbxReader::eParseForStatistics)},
    {sipName_eInfoExtension, static_cast<int>( ::FbxReader::eInfoExtension)},
    {sipName_eInfoDescriptions, static_cast<int>( ::FbxReader::eInfoDescriptions)},
    {sipName_eReserved1, static_cast<int>( ::FbxReader::eReserved1)},
    {0, 0}
};

PyDoc_STRVAR(doc_FbxReader, "\1FbxReader(FbxManager, int, FbxStatus)\n"
"FbxReader(FbxReader)");


sipClassTypeDef sipTypeDef_fbx_FbxReader = {
    {
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_FbxReader,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxReader,
        {0, 0, 1},
        15, methods_FbxReader,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, intInstances_FbxReader, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_FbxReader,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_FbxReader,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_FbxReader,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_FbxReader,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
