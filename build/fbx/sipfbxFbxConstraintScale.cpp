/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxConstraintScale_Create, "Create(FbxManager, str) -> FbxConstraintScale\n"
"Create(FbxObject, str) -> FbxConstraintScale");

extern "C" {static PyObject *meth_FbxConstraintScale_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintScale_Create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8A8", &sipSelf, sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxConstraintScale*sipRes;

            sipRes =  ::FbxConstraintScale::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxConstraintScale,SIP_NULLPTR);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8A8", &sipSelf, sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxConstraintScale*sipRes;

            sipRes =  ::FbxConstraintScale::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxConstraintScale,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxConstraintScale, sipName_Create, doc_FbxConstraintScale_Create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxConstraintScale_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxConstraintScale_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintScale_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxConstraintScale)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxConstraintScale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxConstraintScale, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxConstraintScale::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxConstraintScale, sipName_GetClassId, doc_FbxConstraintScale_GetClassId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxConstraintScale_GetSourceWeight, "GetSourceWeight(self, FbxObject) -> float");

extern "C" {static PyObject *meth_FbxConstraintScale_GetSourceWeight(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintScale_GetSourceWeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject* a0;
        const  ::FbxConstraintScale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxConstraintScale, &sipCpp, sipType_FbxObject, &a0))
        {
            double sipRes;

            sipRes = sipCpp->GetSourceWeight(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxConstraintScale, sipName_GetSourceWeight, doc_FbxConstraintScale_GetSourceWeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxConstraintScale_AddConstraintSource, "AddConstraintSource(self, FbxObject, float = 100)");

extern "C" {static PyObject *meth_FbxConstraintScale_AddConstraintSource(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintScale_AddConstraintSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxObject* a0;
        double a1 = 100;
         ::FbxConstraintScale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|d", &sipSelf, sipType_FbxConstraintScale, &sipCpp, sipType_FbxObject, &a0, &a1))
        {
            sipCpp->AddConstraintSource(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxConstraintScale, sipName_AddConstraintSource, doc_FbxConstraintScale_AddConstraintSource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxConstraintScale_GetConstraintSourceCount, "GetConstraintSourceCount(self) -> int");

extern "C" {static PyObject *meth_FbxConstraintScale_GetConstraintSourceCount(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintScale_GetConstraintSourceCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxConstraintScale)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxConstraintScale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxConstraintScale, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxConstraintScale::GetConstraintSourceCount() : sipCpp->GetConstraintSourceCount());

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxConstraintScale, sipName_GetConstraintSourceCount, doc_FbxConstraintScale_GetConstraintSourceCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxConstraintScale_GetConstraintSource, "GetConstraintSource(self, int) -> FbxObject");

extern "C" {static PyObject *meth_FbxConstraintScale_GetConstraintSource(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintScale_GetConstraintSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxConstraintScale)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::FbxConstraintScale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxConstraintScale, &sipCpp, &a0))
        {
             ::FbxObject*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxConstraintScale::GetConstraintSource(a0) : sipCpp->GetConstraintSource(a0));

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxConstraintScale, sipName_GetConstraintSource, doc_FbxConstraintScale_GetConstraintSource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxConstraintScale_SetConstrainedObject, "SetConstrainedObject(self, FbxObject)");

extern "C" {static PyObject *meth_FbxConstraintScale_SetConstrainedObject(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintScale_SetConstrainedObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxObject* a0;
         ::FbxConstraintScale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxConstraintScale, &sipCpp, sipType_FbxObject, &a0))
        {
            sipCpp->SetConstrainedObject(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxConstraintScale, sipName_SetConstrainedObject, doc_FbxConstraintScale_SetConstrainedObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxConstraintScale_GetConstrainedObject, "GetConstrainedObject(self) -> FbxObject");

extern "C" {static PyObject *meth_FbxConstraintScale_GetConstrainedObject(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintScale_GetConstrainedObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxConstraintScale)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxConstraintScale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxConstraintScale, &sipCpp))
        {
             ::FbxObject*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxConstraintScale::GetConstrainedObject() : sipCpp->GetConstrainedObject());

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxConstraintScale, sipName_GetConstrainedObject, doc_FbxConstraintScale_GetConstrainedObject);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_FbxConstraintScale___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxConstraintScale___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxConstraintScale *sipCpp = reinterpret_cast< ::FbxConstraintScale *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxConstraintScale));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxConstraintScale* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxConstraintScale, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxConstraintScale::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxConstraintScale, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxConstraintScale___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxConstraintScale___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxConstraintScale *sipCpp = reinterpret_cast< ::FbxConstraintScale *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxConstraintScale));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxConstraintScale* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxConstraintScale, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxConstraintScale::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxConstraintScale, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxConstraintScale(void *, const sipTypeDef *);}
static void *cast_FbxConstraintScale(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxConstraintScale *sipCpp = reinterpret_cast< ::FbxConstraintScale *>(sipCppV);

    if (targetType == sipType_FbxConstraintScale)
        return sipCppV;

    sipCppV = ((const sipClassTypeDef *)sipType_FbxConstraint)->ctd_cast(static_cast< ::FbxConstraint *>(sipCpp), targetType);
    if (sipCppV)
        return sipCppV;

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxConstraintScale(void *, int);}
static void release_FbxConstraintScale(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxConstraintScale[] = {{106, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxConstraintScale[] = {
    {(void *)slot_FbxConstraintScale___ne__, ne_slot},
    {(void *)slot_FbxConstraintScale___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxConstraintScale[] = {
    {sipName_AddConstraintSource, meth_FbxConstraintScale_AddConstraintSource, METH_VARARGS, doc_FbxConstraintScale_AddConstraintSource},
    {sipName_Create, meth_FbxConstraintScale_Create, METH_VARARGS, doc_FbxConstraintScale_Create},
    {sipName_GetClassId, meth_FbxConstraintScale_GetClassId, METH_VARARGS, doc_FbxConstraintScale_GetClassId},
    {sipName_GetConstrainedObject, meth_FbxConstraintScale_GetConstrainedObject, METH_VARARGS, doc_FbxConstraintScale_GetConstrainedObject},
    {sipName_GetConstraintSource, meth_FbxConstraintScale_GetConstraintSource, METH_VARARGS, doc_FbxConstraintScale_GetConstraintSource},
    {sipName_GetConstraintSourceCount, meth_FbxConstraintScale_GetConstraintSourceCount, METH_VARARGS, doc_FbxConstraintScale_GetConstraintSourceCount},
    {sipName_GetSourceWeight, meth_FbxConstraintScale_GetSourceWeight, METH_VARARGS, doc_FbxConstraintScale_GetSourceWeight},
    {sipName_SetConstrainedObject, meth_FbxConstraintScale_SetConstrainedObject, METH_VARARGS, doc_FbxConstraintScale_SetConstrainedObject}
};


extern "C" {static PyObject *varget_FbxConstraintScale_Active(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintScale_Active(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintScale *sipCpp = reinterpret_cast< ::FbxConstraintScale *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -507);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->Active;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyBool1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -506, sipPySelf);
        sipKeepReference(sipPySelf, -507, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxConstraintScale_Active(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintScale_Active(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintScale *sipCpp = reinterpret_cast< ::FbxConstraintScale *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyBool1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Active = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintScale_AffectX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintScale_AffectX(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintScale *sipCpp = reinterpret_cast< ::FbxConstraintScale *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -509);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->AffectX;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyBool1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -508, sipPySelf);
        sipKeepReference(sipPySelf, -509, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxConstraintScale_AffectX(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintScale_AffectX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintScale *sipCpp = reinterpret_cast< ::FbxConstraintScale *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyBool1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AffectX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintScale_AffectY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintScale_AffectY(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintScale *sipCpp = reinterpret_cast< ::FbxConstraintScale *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -511);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->AffectY;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyBool1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -510, sipPySelf);
        sipKeepReference(sipPySelf, -511, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxConstraintScale_AffectY(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintScale_AffectY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintScale *sipCpp = reinterpret_cast< ::FbxConstraintScale *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyBool1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AffectY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintScale_AffectZ(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintScale_AffectZ(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintScale *sipCpp = reinterpret_cast< ::FbxConstraintScale *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -513);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->AffectZ;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyBool1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -512, sipPySelf);
        sipKeepReference(sipPySelf, -513, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxConstraintScale_AffectZ(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintScale_AffectZ(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintScale *sipCpp = reinterpret_cast< ::FbxConstraintScale *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyBool1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AffectZ = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintScale_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintScale_ClassId(void *, PyObject *sipPySelf, PyObject *)
{
    static PyObject *sipPy = SIP_NULLPTR;
     ::FbxClassId*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal = & ::FbxConstraintScale::ClassId;

    sipPy = sipConvertFromType(sipVal, sipType_FbxClassId, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -514, sipPySelf);
        Py_INCREF(sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxConstraintScale_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintScale_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy, sipType_FbxClassId, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxConstraintScale::ClassId = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintScale_ConstrainedObject(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintScale_ConstrainedObject(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintScale *sipCpp = reinterpret_cast< ::FbxConstraintScale *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -516);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->ConstrainedObject;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyFbxReference, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -515, sipPySelf);
        sipKeepReference(sipPySelf, -516, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxConstraintScale_ConstrainedObject(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintScale_ConstrainedObject(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintScale *sipCpp = reinterpret_cast< ::FbxConstraintScale *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyFbxReference *>(sipForceConvertToType(sipPy, sipType_FbxPropertyFbxReference, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ConstrainedObject = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintScale_ConstraintSources(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintScale_ConstraintSources(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintScale *sipCpp = reinterpret_cast< ::FbxConstraintScale *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -518);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->ConstraintSources;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyFbxReference, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -517, sipPySelf);
        sipKeepReference(sipPySelf, -518, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxConstraintScale_ConstraintSources(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintScale_ConstraintSources(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintScale *sipCpp = reinterpret_cast< ::FbxConstraintScale *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyFbxReference *>(sipForceConvertToType(sipPy, sipType_FbxPropertyFbxReference, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ConstraintSources = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintScale_Lock(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintScale_Lock(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintScale *sipCpp = reinterpret_cast< ::FbxConstraintScale *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -520);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->Lock;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyBool1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -519, sipPySelf);
        sipKeepReference(sipPySelf, -520, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxConstraintScale_Lock(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintScale_Lock(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintScale *sipCpp = reinterpret_cast< ::FbxConstraintScale *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyBool1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Lock = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintScale_Scaling(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintScale_Scaling(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble3*sipVal;
     ::FbxConstraintScale *sipCpp = reinterpret_cast< ::FbxConstraintScale *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -522);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->Scaling;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -521, sipPySelf);
        sipKeepReference(sipPySelf, -522, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxConstraintScale_Scaling(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintScale_Scaling(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxConstraintScale *sipCpp = reinterpret_cast< ::FbxConstraintScale *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble3, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Scaling = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintScale_Weight(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintScale_Weight(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble1*sipVal;
     ::FbxConstraintScale *sipCpp = reinterpret_cast< ::FbxConstraintScale *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -524);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->Weight;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -523, sipPySelf);
        sipKeepReference(sipPySelf, -524, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxConstraintScale_Weight(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintScale_Weight(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxConstraintScale *sipCpp = reinterpret_cast< ::FbxConstraintScale *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Weight = *sipVal;

    return 0;
}

sipVariableDef variables_FbxConstraintScale[] = {
    {InstanceVariable, sipName_Active, (PyMethodDef *)varget_FbxConstraintScale_Active, (PyMethodDef *)varset_FbxConstraintScale_Active, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_AffectX, (PyMethodDef *)varget_FbxConstraintScale_AffectX, (PyMethodDef *)varset_FbxConstraintScale_AffectX, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_AffectY, (PyMethodDef *)varget_FbxConstraintScale_AffectY, (PyMethodDef *)varset_FbxConstraintScale_AffectY, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_AffectZ, (PyMethodDef *)varget_FbxConstraintScale_AffectZ, (PyMethodDef *)varset_FbxConstraintScale_AffectZ, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxConstraintScale_ClassId, (PyMethodDef *)varset_FbxConstraintScale_ClassId, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_ConstrainedObject, (PyMethodDef *)varget_FbxConstraintScale_ConstrainedObject, (PyMethodDef *)varset_FbxConstraintScale_ConstrainedObject, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_ConstraintSources, (PyMethodDef *)varget_FbxConstraintScale_ConstraintSources, (PyMethodDef *)varset_FbxConstraintScale_ConstraintSources, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_Lock, (PyMethodDef *)varget_FbxConstraintScale_Lock, (PyMethodDef *)varset_FbxConstraintScale_Lock, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_Scaling, (PyMethodDef *)varget_FbxConstraintScale_Scaling, (PyMethodDef *)varset_FbxConstraintScale_Scaling, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_Weight, (PyMethodDef *)varget_FbxConstraintScale_Weight, (PyMethodDef *)varset_FbxConstraintScale_Weight, SIP_NULLPTR, SIP_NULLPTR},
};


sipClassTypeDef sipTypeDef_fbx_FbxConstraintScale = {
    {
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxConstraintScale,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxConstraintScale,
        {0, 0, 1},
        8, methods_FbxConstraintScale,
        10, variables_FbxConstraintScale,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_FbxConstraintScale,
    slots_FbxConstraintScale,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_FbxConstraintScale,
    cast_FbxConstraintScale,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
