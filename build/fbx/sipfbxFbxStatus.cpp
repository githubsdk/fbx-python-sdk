/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"

#line 4 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxstatus.sip"
#include <fbxsdk.h>
#line 43 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxStatus.cpp"



PyDoc_STRVAR(doc_FbxStatus_Error, "Error(self) -> bool");

extern "C" {static PyObject *meth_FbxStatus_Error(PyObject *, PyObject *);}
static PyObject *meth_FbxStatus_Error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxStatus *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxStatus, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->Error();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxStatus, sipName_Error, doc_FbxStatus_Error);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxStatus_Clear, "Clear(self)");

extern "C" {static PyObject *meth_FbxStatus_Clear(PyObject *, PyObject *);}
static PyObject *meth_FbxStatus_Clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxStatus *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxStatus, &sipCpp))
        {
            sipCpp->Clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxStatus, sipName_Clear, doc_FbxStatus_Clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxStatus_GetCode, "GetCode(self) -> FbxStatus.EStatusCode");

extern "C" {static PyObject *meth_FbxStatus_GetCode(PyObject *, PyObject *);}
static PyObject *meth_FbxStatus_GetCode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxStatus *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxStatus, &sipCpp))
        {
             ::FbxStatus::EStatusCode sipRes;

            sipRes = sipCpp->GetCode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_FbxStatus_EStatusCode);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxStatus, sipName_GetCode, doc_FbxStatus_GetCode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxStatus_SetCode, "SetCode(self, FbxStatus.EStatusCode)\n"
"SetCode(self, FbxStatus.EStatusCode, str, *)");

extern "C" {static PyObject *meth_FbxStatus_SetCode(PyObject *, PyObject *);}
static PyObject *meth_FbxStatus_SetCode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxStatus::EStatusCode a0;
         ::FbxStatus *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxStatus, &sipCpp, sipType_FbxStatus_EStatusCode, &a0))
        {
            sipCpp->SetCode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::FbxStatus::EStatusCode a0;
        const char* a1;
        PyObject *a1Keep;
        PyObject * a2;
         ::FbxStatus *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEA8W", &sipSelf, sipType_FbxStatus, &sipCpp, sipType_FbxStatus_EStatusCode, &a0, &a1Keep, &a1, &a2))
        {
            sipCpp->SetCode(a0,a1,a2);

            Py_DECREF(a2);
            Py_DECREF(a1Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxStatus, sipName_SetCode, doc_FbxStatus_SetCode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxStatus_GetErrorString, "GetErrorString(self) -> str");

extern "C" {static PyObject *meth_FbxStatus_GetErrorString(PyObject *, PyObject *);}
static PyObject *meth_FbxStatus_GetErrorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxStatus *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxStatus, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->GetErrorString();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_FromString(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxStatus, sipName_GetErrorString, doc_FbxStatus_GetErrorString);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_FbxStatus___int__(PyObject *);}
static PyObject *slot_FbxStatus___int__(PyObject *sipSelf)
{
     ::FbxStatus *sipCpp = reinterpret_cast< ::FbxStatus *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxStatus));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            bool sipRes;

            sipRes = *sipCpp;

            return PyBool_FromLong(sipRes);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_FbxStatus___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxStatus___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxStatus *sipCpp = reinterpret_cast< ::FbxStatus *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxStatus));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxStatus* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxStatus, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxStatus::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::FbxStatus::EStatusCode a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1E", sipType_FbxStatus_EStatusCode, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxStatus::operator!=(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxStatus, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxStatus___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxStatus___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxStatus *sipCpp = reinterpret_cast< ::FbxStatus *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxStatus));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxStatus* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxStatus, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxStatus::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::FbxStatus::EStatusCode a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1E", sipType_FbxStatus_EStatusCode, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxStatus::operator==(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxStatus, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxStatus(void *, int);}
static void release_FbxStatus(void *sipCppV, int)
{
    delete reinterpret_cast< ::FbxStatus *>(sipCppV);
}


extern "C" {static void *array_FbxStatus(Py_ssize_t);}
static void *array_FbxStatus(Py_ssize_t sipNrElem)
{
    return new  ::FbxStatus[sipNrElem];
}


extern "C" {static void assign_FbxStatus(void *, Py_ssize_t, void *);}
static void assign_FbxStatus(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::FbxStatus *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::FbxStatus *>(sipSrc);
}


extern "C" {static void *copy_FbxStatus(const void *, Py_ssize_t);}
static void *copy_FbxStatus(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::FbxStatus(reinterpret_cast<const  ::FbxStatus *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxStatus(sipSimpleWrapper *);}
static void dealloc_FbxStatus(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxStatus(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_FbxStatus(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxStatus(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::FbxStatus *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::FbxStatus();

            return sipCpp;
        }
    }

    {
         ::FbxStatus::EStatusCode a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "E", sipType_FbxStatus_EStatusCode, &a0))
        {
            sipCpp = new  ::FbxStatus(a0);

            return sipCpp;
        }
    }

    {
        const  ::FbxStatus* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_FbxStatus, &a0))
        {
            sipCpp = new  ::FbxStatus(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxStatus[] = {
    {(void *)slot_FbxStatus___int__, int_slot},
    {(void *)slot_FbxStatus___ne__, ne_slot},
    {(void *)slot_FbxStatus___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxStatus[] = {
    {sipName_Clear, meth_FbxStatus_Clear, METH_VARARGS, doc_FbxStatus_Clear},
    {sipName_Error, meth_FbxStatus_Error, METH_VARARGS, doc_FbxStatus_Error},
    {sipName_GetCode, meth_FbxStatus_GetCode, METH_VARARGS, doc_FbxStatus_GetCode},
    {sipName_GetErrorString, meth_FbxStatus_GetErrorString, METH_VARARGS, doc_FbxStatus_GetErrorString},
    {sipName_SetCode, meth_FbxStatus_SetCode, METH_VARARGS, doc_FbxStatus_SetCode}
};


/* Define the enum members and ints to be added to this type. */
static sipIntInstanceDef intInstances_FbxStatus[] = {
    {sipName_eSuccess, static_cast<int>( ::FbxStatus::eSuccess)},
    {sipName_eFailure, static_cast<int>( ::FbxStatus::eFailure)},
    {sipName_eInsufficientMemory, static_cast<int>( ::FbxStatus::eInsufficientMemory)},
    {sipName_eInvalidParameter, static_cast<int>( ::FbxStatus::eInvalidParameter)},
    {sipName_eIndexOutOfRange, static_cast<int>( ::FbxStatus::eIndexOutOfRange)},
    {sipName_ePasswordError, static_cast<int>( ::FbxStatus::ePasswordError)},
    {sipName_eInvalidFileVersion, static_cast<int>( ::FbxStatus::eInvalidFileVersion)},
    {sipName_eInvalidFile, static_cast<int>( ::FbxStatus::eInvalidFile)},
    {0, 0}
};

PyDoc_STRVAR(doc_FbxStatus, "\1FbxStatus()\n"
"FbxStatus(FbxStatus.EStatusCode)\n"
"FbxStatus(FbxStatus)");


sipClassTypeDef sipTypeDef_fbx_FbxStatus = {
    {
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_FbxStatus,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxStatus,
        {0, 0, 1},
        5, methods_FbxStatus,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, intInstances_FbxStatus, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_FbxStatus,
    -1,
    -1,
    SIP_NULLPTR,
    slots_FbxStatus,
    init_type_FbxStatus,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_FbxStatus,
    assign_FbxStatus,
    array_FbxStatus,
    copy_FbxStatus,
    release_FbxStatus,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
