/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxTexture_Create, "Create(FbxManager, str) -> FbxTexture\n"
"Create(FbxObject, str) -> FbxTexture");

extern "C" {static PyObject *meth_FbxTexture_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_Create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8A8", &sipSelf, sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxTexture*sipRes;

            sipRes =  ::FbxTexture::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxTexture,SIP_NULLPTR);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8A8", &sipSelf, sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxTexture*sipRes;

            sipRes =  ::FbxTexture::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxTexture,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_Create, doc_FbxTexture_Create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxTexture_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxTexture)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTexture, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxTexture::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetClassId, doc_FbxTexture_GetClassId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_Reset, "Reset(self)");

extern "C" {static PyObject *meth_FbxTexture_Reset(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_Reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTexture, &sipCpp))
        {
            sipCpp->Reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_Reset, doc_FbxTexture_Reset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_SetSwapUV, "SetSwapUV(self, bool)");

extern "C" {static PyObject *meth_FbxTexture_SetSwapUV(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_SetSwapUV(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxTexture, &sipCpp, &a0))
        {
            sipCpp->SetSwapUV(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_SetSwapUV, doc_FbxTexture_SetSwapUV);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetSwapUV, "GetSwapUV(self) -> bool");

extern "C" {static PyObject *meth_FbxTexture_GetSwapUV(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetSwapUV(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTexture, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetSwapUV();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetSwapUV, doc_FbxTexture_GetSwapUV);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_SetAlphaSource, "SetAlphaSource(self, FbxTexture.EAlphaSource)");

extern "C" {static PyObject *meth_FbxTexture_SetAlphaSource(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_SetAlphaSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxTexture::EAlphaSource a0;
         ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxTexture, &sipCpp, sipType_FbxTexture_EAlphaSource, &a0))
        {
            sipCpp->SetAlphaSource(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_SetAlphaSource, doc_FbxTexture_SetAlphaSource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetAlphaSource, "GetAlphaSource(self) -> FbxTexture.EAlphaSource");

extern "C" {static PyObject *meth_FbxTexture_GetAlphaSource(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetAlphaSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTexture, &sipCpp))
        {
             ::FbxTexture::EAlphaSource sipRes;

            sipRes = sipCpp->GetAlphaSource();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_FbxTexture_EAlphaSource);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetAlphaSource, doc_FbxTexture_GetAlphaSource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_SetCropping, "SetCropping(self, int, int, int, int)");

extern "C" {static PyObject *meth_FbxTexture_SetCropping(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_SetCropping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_FbxTexture, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->SetCropping(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_SetCropping, doc_FbxTexture_SetCropping);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetCroppingLeft, "GetCroppingLeft(self) -> int");

extern "C" {static PyObject *meth_FbxTexture_GetCroppingLeft(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetCroppingLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTexture, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetCroppingLeft();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetCroppingLeft, doc_FbxTexture_GetCroppingLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetCroppingTop, "GetCroppingTop(self) -> int");

extern "C" {static PyObject *meth_FbxTexture_GetCroppingTop(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetCroppingTop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTexture, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetCroppingTop();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetCroppingTop, doc_FbxTexture_GetCroppingTop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetCroppingRight, "GetCroppingRight(self) -> int");

extern "C" {static PyObject *meth_FbxTexture_GetCroppingRight(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetCroppingRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTexture, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetCroppingRight();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetCroppingRight, doc_FbxTexture_GetCroppingRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetCroppingBottom, "GetCroppingBottom(self) -> int");

extern "C" {static PyObject *meth_FbxTexture_GetCroppingBottom(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetCroppingBottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTexture, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetCroppingBottom();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetCroppingBottom, doc_FbxTexture_GetCroppingBottom);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_SetMappingType, "SetMappingType(self, FbxTexture.EMappingType)");

extern "C" {static PyObject *meth_FbxTexture_SetMappingType(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_SetMappingType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxTexture::EMappingType a0;
         ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxTexture, &sipCpp, sipType_FbxTexture_EMappingType, &a0))
        {
            sipCpp->SetMappingType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_SetMappingType, doc_FbxTexture_SetMappingType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetMappingType, "GetMappingType(self) -> FbxTexture.EMappingType");

extern "C" {static PyObject *meth_FbxTexture_GetMappingType(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetMappingType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTexture, &sipCpp))
        {
             ::FbxTexture::EMappingType sipRes;

            sipRes = sipCpp->GetMappingType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_FbxTexture_EMappingType);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetMappingType, doc_FbxTexture_GetMappingType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_SetPlanarMappingNormal, "SetPlanarMappingNormal(self, FbxTexture.EPlanarMappingNormal)");

extern "C" {static PyObject *meth_FbxTexture_SetPlanarMappingNormal(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_SetPlanarMappingNormal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxTexture::EPlanarMappingNormal a0;
         ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxTexture, &sipCpp, sipType_FbxTexture_EPlanarMappingNormal, &a0))
        {
            sipCpp->SetPlanarMappingNormal(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_SetPlanarMappingNormal, doc_FbxTexture_SetPlanarMappingNormal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetPlanarMappingNormal, "GetPlanarMappingNormal(self) -> FbxTexture.EPlanarMappingNormal");

extern "C" {static PyObject *meth_FbxTexture_GetPlanarMappingNormal(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetPlanarMappingNormal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTexture, &sipCpp))
        {
             ::FbxTexture::EPlanarMappingNormal sipRes;

            sipRes = sipCpp->GetPlanarMappingNormal();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_FbxTexture_EPlanarMappingNormal);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetPlanarMappingNormal, doc_FbxTexture_GetPlanarMappingNormal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_SetTextureUse, "SetTextureUse(self, FbxTexture.ETextureUse)");

extern "C" {static PyObject *meth_FbxTexture_SetTextureUse(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_SetTextureUse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxTexture::ETextureUse a0;
         ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxTexture, &sipCpp, sipType_FbxTexture_ETextureUse, &a0))
        {
            sipCpp->SetTextureUse(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_SetTextureUse, doc_FbxTexture_SetTextureUse);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetTextureUse, "GetTextureUse(self) -> FbxTexture.ETextureUse");

extern "C" {static PyObject *meth_FbxTexture_GetTextureUse(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetTextureUse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTexture, &sipCpp))
        {
             ::FbxTexture::ETextureUse sipRes;

            sipRes = sipCpp->GetTextureUse();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_FbxTexture_ETextureUse);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetTextureUse, doc_FbxTexture_GetTextureUse);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_SetWrapMode, "SetWrapMode(self, FbxTexture.EWrapMode, FbxTexture.EWrapMode)");

extern "C" {static PyObject *meth_FbxTexture_SetWrapMode(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_SetWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxTexture::EWrapMode a0;
         ::FbxTexture::EWrapMode a1;
         ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_FbxTexture, &sipCpp, sipType_FbxTexture_EWrapMode, &a0, sipType_FbxTexture_EWrapMode, &a1))
        {
            sipCpp->SetWrapMode(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_SetWrapMode, doc_FbxTexture_SetWrapMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetWrapModeU, "GetWrapModeU(self) -> FbxTexture.EWrapMode");

extern "C" {static PyObject *meth_FbxTexture_GetWrapModeU(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetWrapModeU(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTexture, &sipCpp))
        {
             ::FbxTexture::EWrapMode sipRes;

            sipRes = sipCpp->GetWrapModeU();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_FbxTexture_EWrapMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetWrapModeU, doc_FbxTexture_GetWrapModeU);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetWrapModeV, "GetWrapModeV(self) -> FbxTexture.EWrapMode");

extern "C" {static PyObject *meth_FbxTexture_GetWrapModeV(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetWrapModeV(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTexture, &sipCpp))
        {
             ::FbxTexture::EWrapMode sipRes;

            sipRes = sipCpp->GetWrapModeV();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_FbxTexture_EWrapMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetWrapModeV, doc_FbxTexture_GetWrapModeV);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_SetBlendMode, "SetBlendMode(self, FbxTexture.EBlendMode)");

extern "C" {static PyObject *meth_FbxTexture_SetBlendMode(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_SetBlendMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxTexture::EBlendMode a0;
         ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxTexture, &sipCpp, sipType_FbxTexture_EBlendMode, &a0))
        {
            sipCpp->SetBlendMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_SetBlendMode, doc_FbxTexture_SetBlendMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetBlendMode, "GetBlendMode(self) -> FbxTexture.EBlendMode");

extern "C" {static PyObject *meth_FbxTexture_GetBlendMode(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetBlendMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTexture, &sipCpp))
        {
             ::FbxTexture::EBlendMode sipRes;

            sipRes = sipCpp->GetBlendMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_FbxTexture_EBlendMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetBlendMode, doc_FbxTexture_GetBlendMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_SetDefaultT, "SetDefaultT(self, FbxVector4)");

extern "C" {static PyObject *meth_FbxTexture_SetDefaultT(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_SetDefaultT(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxVector4* a0;
         ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxTexture, &sipCpp, sipType_FbxVector4, &a0))
        {
            sipCpp->SetDefaultT(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_SetDefaultT, doc_FbxTexture_SetDefaultT);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetDefaultT, "GetDefaultT(self, FbxVector4) -> FbxVector4");

extern "C" {static PyObject *meth_FbxTexture_GetDefaultT(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetDefaultT(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxVector4* a0;
        const  ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxTexture, &sipCpp, sipType_FbxVector4, &a0))
        {
             ::FbxVector4*sipRes;

            sipRes = &sipCpp->GetDefaultT(*a0);

            return sipConvertFromType(sipRes,sipType_FbxVector4,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetDefaultT, doc_FbxTexture_GetDefaultT);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_SetDefaultR, "SetDefaultR(self, FbxVector4)");

extern "C" {static PyObject *meth_FbxTexture_SetDefaultR(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_SetDefaultR(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxVector4* a0;
         ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxTexture, &sipCpp, sipType_FbxVector4, &a0))
        {
            sipCpp->SetDefaultR(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_SetDefaultR, doc_FbxTexture_SetDefaultR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetDefaultR, "GetDefaultR(self, FbxVector4) -> FbxVector4");

extern "C" {static PyObject *meth_FbxTexture_GetDefaultR(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetDefaultR(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxVector4* a0;
        const  ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxTexture, &sipCpp, sipType_FbxVector4, &a0))
        {
             ::FbxVector4*sipRes;

            sipRes = &sipCpp->GetDefaultR(*a0);

            return sipConvertFromType(sipRes,sipType_FbxVector4,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetDefaultR, doc_FbxTexture_GetDefaultR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_SetDefaultS, "SetDefaultS(self, FbxVector4)");

extern "C" {static PyObject *meth_FbxTexture_SetDefaultS(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_SetDefaultS(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxVector4* a0;
         ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxTexture, &sipCpp, sipType_FbxVector4, &a0))
        {
            sipCpp->SetDefaultS(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_SetDefaultS, doc_FbxTexture_SetDefaultS);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetDefaultS, "GetDefaultS(self, FbxVector4) -> FbxVector4");

extern "C" {static PyObject *meth_FbxTexture_GetDefaultS(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetDefaultS(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxVector4* a0;
        const  ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxTexture, &sipCpp, sipType_FbxVector4, &a0))
        {
             ::FbxVector4*sipRes;

            sipRes = &sipCpp->GetDefaultS(*a0);

            return sipConvertFromType(sipRes,sipType_FbxVector4,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetDefaultS, doc_FbxTexture_GetDefaultS);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_SetDefaultAlpha, "SetDefaultAlpha(self, float)");

extern "C" {static PyObject *meth_FbxTexture_SetDefaultAlpha(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_SetDefaultAlpha(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
         ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_FbxTexture, &sipCpp, &a0))
        {
            sipCpp->SetDefaultAlpha(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_SetDefaultAlpha, doc_FbxTexture_SetDefaultAlpha);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetDefaultAlpha, "GetDefaultAlpha(self) -> float");

extern "C" {static PyObject *meth_FbxTexture_GetDefaultAlpha(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetDefaultAlpha(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTexture, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->GetDefaultAlpha();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetDefaultAlpha, doc_FbxTexture_GetDefaultAlpha);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_SetTranslation, "SetTranslation(self, float, float)");

extern "C" {static PyObject *meth_FbxTexture_SetTranslation(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_SetTranslation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
        double a1;
         ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_FbxTexture, &sipCpp, &a0, &a1))
        {
            sipCpp->SetTranslation(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_SetTranslation, doc_FbxTexture_SetTranslation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetTranslationU, "GetTranslationU(self) -> float");

extern "C" {static PyObject *meth_FbxTexture_GetTranslationU(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetTranslationU(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTexture, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->GetTranslationU();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetTranslationU, doc_FbxTexture_GetTranslationU);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetTranslationV, "GetTranslationV(self) -> float");

extern "C" {static PyObject *meth_FbxTexture_GetTranslationV(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetTranslationV(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTexture, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->GetTranslationV();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetTranslationV, doc_FbxTexture_GetTranslationV);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_SetRotation, "SetRotation(self, float, float, float = 0)");

extern "C" {static PyObject *meth_FbxTexture_SetRotation(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_SetRotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
        double a1;
        double a2 = 0;
         ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd|d", &sipSelf, sipType_FbxTexture, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->SetRotation(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_SetRotation, doc_FbxTexture_SetRotation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetRotationU, "GetRotationU(self) -> float");

extern "C" {static PyObject *meth_FbxTexture_GetRotationU(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetRotationU(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTexture, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->GetRotationU();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetRotationU, doc_FbxTexture_GetRotationU);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetRotationV, "GetRotationV(self) -> float");

extern "C" {static PyObject *meth_FbxTexture_GetRotationV(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetRotationV(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTexture, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->GetRotationV();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetRotationV, doc_FbxTexture_GetRotationV);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetRotationW, "GetRotationW(self) -> float");

extern "C" {static PyObject *meth_FbxTexture_GetRotationW(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetRotationW(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTexture, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->GetRotationW();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetRotationW, doc_FbxTexture_GetRotationW);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_SetScale, "SetScale(self, float, float)");

extern "C" {static PyObject *meth_FbxTexture_SetScale(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_SetScale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
        double a1;
         ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_FbxTexture, &sipCpp, &a0, &a1))
        {
            sipCpp->SetScale(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_SetScale, doc_FbxTexture_SetScale);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetScaleU, "GetScaleU(self) -> float");

extern "C" {static PyObject *meth_FbxTexture_GetScaleU(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetScaleU(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTexture, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->GetScaleU();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetScaleU, doc_FbxTexture_GetScaleU);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetScaleV, "GetScaleV(self) -> float");

extern "C" {static PyObject *meth_FbxTexture_GetScaleV(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetScaleV(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTexture, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->GetScaleV();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetScaleV, doc_FbxTexture_GetScaleV);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_SetUVTranslation, "SetUVTranslation(self, FbxVector2)");

extern "C" {static PyObject *meth_FbxTexture_SetUVTranslation(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_SetUVTranslation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxVector2* a0;
         ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxTexture, &sipCpp, sipType_FbxVector2, &a0))
        {
            sipCpp->SetUVTranslation(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_SetUVTranslation, doc_FbxTexture_SetUVTranslation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetUVTranslation, "GetUVTranslation(self) -> FbxVector2");

extern "C" {static PyObject *meth_FbxTexture_GetUVTranslation(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetUVTranslation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTexture, &sipCpp))
        {
             ::FbxVector2*sipRes;

            sipRes = &sipCpp->GetUVTranslation();

            return sipConvertFromType(sipRes,sipType_FbxVector2,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetUVTranslation, doc_FbxTexture_GetUVTranslation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_SetUVScaling, "SetUVScaling(self, FbxVector2)");

extern "C" {static PyObject *meth_FbxTexture_SetUVScaling(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_SetUVScaling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxVector2* a0;
         ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxTexture, &sipCpp, sipType_FbxVector2, &a0))
        {
            sipCpp->SetUVScaling(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_SetUVScaling, doc_FbxTexture_SetUVScaling);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetUVScaling, "GetUVScaling(self) -> FbxVector2");

extern "C" {static PyObject *meth_FbxTexture_GetUVScaling(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetUVScaling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTexture, &sipCpp))
        {
             ::FbxVector2*sipRes;

            sipRes = &sipCpp->GetUVScaling();

            return sipConvertFromType(sipRes,sipType_FbxVector2,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetUVScaling, doc_FbxTexture_GetUVScaling);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxTexture_GetTextureType, "GetTextureType(self) -> FbxString");

extern "C" {static PyObject *meth_FbxTexture_GetTextureType(PyObject *, PyObject *);}
static PyObject *meth_FbxTexture_GetTextureType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTexture, &sipCpp))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString(sipCpp->GetTextureType());

            return sipConvertFromNewType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxTexture, sipName_GetTextureType, doc_FbxTexture_GetTextureType);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_FbxTexture___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxTexture___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxTexture));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxTexture* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxTexture, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxTexture::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxTexture, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxTexture___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxTexture___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxTexture));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxTexture* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxTexture, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxTexture::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxTexture, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxTexture(void *, const sipTypeDef *);}
static void *cast_FbxTexture(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipCppV);

    if (targetType == sipType_FbxTexture)
        return sipCppV;

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxTexture(void *, int);}
static void release_FbxTexture(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxTexture[] = {{244, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxTexture[] = {
    {(void *)slot_FbxTexture___ne__, ne_slot},
    {(void *)slot_FbxTexture___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxTexture[] = {
    {sipName_Create, meth_FbxTexture_Create, METH_VARARGS, doc_FbxTexture_Create},
    {sipName_GetAlphaSource, meth_FbxTexture_GetAlphaSource, METH_VARARGS, doc_FbxTexture_GetAlphaSource},
    {sipName_GetBlendMode, meth_FbxTexture_GetBlendMode, METH_VARARGS, doc_FbxTexture_GetBlendMode},
    {sipName_GetClassId, meth_FbxTexture_GetClassId, METH_VARARGS, doc_FbxTexture_GetClassId},
    {sipName_GetCroppingBottom, meth_FbxTexture_GetCroppingBottom, METH_VARARGS, doc_FbxTexture_GetCroppingBottom},
    {sipName_GetCroppingLeft, meth_FbxTexture_GetCroppingLeft, METH_VARARGS, doc_FbxTexture_GetCroppingLeft},
    {sipName_GetCroppingRight, meth_FbxTexture_GetCroppingRight, METH_VARARGS, doc_FbxTexture_GetCroppingRight},
    {sipName_GetCroppingTop, meth_FbxTexture_GetCroppingTop, METH_VARARGS, doc_FbxTexture_GetCroppingTop},
    {sipName_GetDefaultAlpha, meth_FbxTexture_GetDefaultAlpha, METH_VARARGS, doc_FbxTexture_GetDefaultAlpha},
    {sipName_GetDefaultR, meth_FbxTexture_GetDefaultR, METH_VARARGS, doc_FbxTexture_GetDefaultR},
    {sipName_GetDefaultS, meth_FbxTexture_GetDefaultS, METH_VARARGS, doc_FbxTexture_GetDefaultS},
    {sipName_GetDefaultT, meth_FbxTexture_GetDefaultT, METH_VARARGS, doc_FbxTexture_GetDefaultT},
    {sipName_GetMappingType, meth_FbxTexture_GetMappingType, METH_VARARGS, doc_FbxTexture_GetMappingType},
    {sipName_GetPlanarMappingNormal, meth_FbxTexture_GetPlanarMappingNormal, METH_VARARGS, doc_FbxTexture_GetPlanarMappingNormal},
    {sipName_GetRotationU, meth_FbxTexture_GetRotationU, METH_VARARGS, doc_FbxTexture_GetRotationU},
    {sipName_GetRotationV, meth_FbxTexture_GetRotationV, METH_VARARGS, doc_FbxTexture_GetRotationV},
    {sipName_GetRotationW, meth_FbxTexture_GetRotationW, METH_VARARGS, doc_FbxTexture_GetRotationW},
    {sipName_GetScaleU, meth_FbxTexture_GetScaleU, METH_VARARGS, doc_FbxTexture_GetScaleU},
    {sipName_GetScaleV, meth_FbxTexture_GetScaleV, METH_VARARGS, doc_FbxTexture_GetScaleV},
    {sipName_GetSwapUV, meth_FbxTexture_GetSwapUV, METH_VARARGS, doc_FbxTexture_GetSwapUV},
    {sipName_GetTextureType, meth_FbxTexture_GetTextureType, METH_VARARGS, doc_FbxTexture_GetTextureType},
    {sipName_GetTextureUse, meth_FbxTexture_GetTextureUse, METH_VARARGS, doc_FbxTexture_GetTextureUse},
    {sipName_GetTranslationU, meth_FbxTexture_GetTranslationU, METH_VARARGS, doc_FbxTexture_GetTranslationU},
    {sipName_GetTranslationV, meth_FbxTexture_GetTranslationV, METH_VARARGS, doc_FbxTexture_GetTranslationV},
    {sipName_GetUVScaling, meth_FbxTexture_GetUVScaling, METH_VARARGS, doc_FbxTexture_GetUVScaling},
    {sipName_GetUVTranslation, meth_FbxTexture_GetUVTranslation, METH_VARARGS, doc_FbxTexture_GetUVTranslation},
    {sipName_GetWrapModeU, meth_FbxTexture_GetWrapModeU, METH_VARARGS, doc_FbxTexture_GetWrapModeU},
    {sipName_GetWrapModeV, meth_FbxTexture_GetWrapModeV, METH_VARARGS, doc_FbxTexture_GetWrapModeV},
    {sipName_Reset, meth_FbxTexture_Reset, METH_VARARGS, doc_FbxTexture_Reset},
    {sipName_SetAlphaSource, meth_FbxTexture_SetAlphaSource, METH_VARARGS, doc_FbxTexture_SetAlphaSource},
    {sipName_SetBlendMode, meth_FbxTexture_SetBlendMode, METH_VARARGS, doc_FbxTexture_SetBlendMode},
    {sipName_SetCropping, meth_FbxTexture_SetCropping, METH_VARARGS, doc_FbxTexture_SetCropping},
    {sipName_SetDefaultAlpha, meth_FbxTexture_SetDefaultAlpha, METH_VARARGS, doc_FbxTexture_SetDefaultAlpha},
    {sipName_SetDefaultR, meth_FbxTexture_SetDefaultR, METH_VARARGS, doc_FbxTexture_SetDefaultR},
    {sipName_SetDefaultS, meth_FbxTexture_SetDefaultS, METH_VARARGS, doc_FbxTexture_SetDefaultS},
    {sipName_SetDefaultT, meth_FbxTexture_SetDefaultT, METH_VARARGS, doc_FbxTexture_SetDefaultT},
    {sipName_SetMappingType, meth_FbxTexture_SetMappingType, METH_VARARGS, doc_FbxTexture_SetMappingType},
    {sipName_SetPlanarMappingNormal, meth_FbxTexture_SetPlanarMappingNormal, METH_VARARGS, doc_FbxTexture_SetPlanarMappingNormal},
    {sipName_SetRotation, meth_FbxTexture_SetRotation, METH_VARARGS, doc_FbxTexture_SetRotation},
    {sipName_SetScale, meth_FbxTexture_SetScale, METH_VARARGS, doc_FbxTexture_SetScale},
    {sipName_SetSwapUV, meth_FbxTexture_SetSwapUV, METH_VARARGS, doc_FbxTexture_SetSwapUV},
    {sipName_SetTextureUse, meth_FbxTexture_SetTextureUse, METH_VARARGS, doc_FbxTexture_SetTextureUse},
    {sipName_SetTranslation, meth_FbxTexture_SetTranslation, METH_VARARGS, doc_FbxTexture_SetTranslation},
    {sipName_SetUVScaling, meth_FbxTexture_SetUVScaling, METH_VARARGS, doc_FbxTexture_SetUVScaling},
    {sipName_SetUVTranslation, meth_FbxTexture_SetUVTranslation, METH_VARARGS, doc_FbxTexture_SetUVTranslation},
    {sipName_SetWrapMode, meth_FbxTexture_SetWrapMode, METH_VARARGS, doc_FbxTexture_SetWrapMode}
};


extern "C" {static PyObject *varget_FbxTexture_Alpha(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxTexture_Alpha(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble1*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -436);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->Alpha;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -435, sipPySelf);
        sipKeepReference(sipPySelf, -436, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxTexture_Alpha(void *, PyObject *, PyObject *);}
static int varset_FbxTexture_Alpha(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Alpha = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxTexture_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxTexture_ClassId(void *, PyObject *sipPySelf, PyObject *)
{
    static PyObject *sipPy = SIP_NULLPTR;
     ::FbxClassId*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal = & ::FbxTexture::ClassId;

    sipPy = sipConvertFromType(sipVal, sipType_FbxClassId, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -437, sipPySelf);
        Py_INCREF(sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxTexture_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxTexture_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy, sipType_FbxClassId, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxTexture::ClassId = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxTexture_CurrentMappingType(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxTexture_CurrentMappingType(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyEUnifiedMappingType*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -439);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->CurrentMappingType;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyEUnifiedMappingType, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -438, sipPySelf);
        sipKeepReference(sipPySelf, -439, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxTexture_CurrentMappingType(void *, PyObject *, PyObject *);}
static int varset_FbxTexture_CurrentMappingType(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEUnifiedMappingType*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyEUnifiedMappingType *>(sipForceConvertToType(sipPy, sipType_FbxPropertyEUnifiedMappingType, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->CurrentMappingType = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxTexture_CurrentTextureBlendMode(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxTexture_CurrentTextureBlendMode(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyEBlendMode*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -441);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->CurrentTextureBlendMode;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyEBlendMode, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -440, sipPySelf);
        sipKeepReference(sipPySelf, -441, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxTexture_CurrentTextureBlendMode(void *, PyObject *, PyObject *);}
static int varset_FbxTexture_CurrentTextureBlendMode(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEBlendMode*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyEBlendMode *>(sipForceConvertToType(sipPy, sipType_FbxPropertyEBlendMode, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->CurrentTextureBlendMode = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxTexture_PremultiplyAlpha(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxTexture_PremultiplyAlpha(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyBool1*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -443);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->PremultiplyAlpha;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyBool1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -442, sipPySelf);
        sipKeepReference(sipPySelf, -443, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxTexture_PremultiplyAlpha(void *, PyObject *, PyObject *);}
static int varset_FbxTexture_PremultiplyAlpha(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyBool1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->PremultiplyAlpha = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxTexture_Rotation(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxTexture_Rotation(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble3*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -445);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->Rotation;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -444, sipPySelf);
        sipKeepReference(sipPySelf, -445, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxTexture_Rotation(void *, PyObject *, PyObject *);}
static int varset_FbxTexture_Rotation(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble3, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Rotation = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxTexture_RotationPivot(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxTexture_RotationPivot(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble3*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -447);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->RotationPivot;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -446, sipPySelf);
        sipKeepReference(sipPySelf, -447, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxTexture_RotationPivot(void *, PyObject *, PyObject *);}
static int varset_FbxTexture_RotationPivot(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble3, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RotationPivot = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxTexture_Scaling(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxTexture_Scaling(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble3*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -449);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->Scaling;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -448, sipPySelf);
        sipKeepReference(sipPySelf, -449, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxTexture_Scaling(void *, PyObject *, PyObject *);}
static int varset_FbxTexture_Scaling(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble3, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Scaling = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxTexture_ScalingPivot(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxTexture_ScalingPivot(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble3*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -451);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->ScalingPivot;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -450, sipPySelf);
        sipKeepReference(sipPySelf, -451, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxTexture_ScalingPivot(void *, PyObject *, PyObject *);}
static int varset_FbxTexture_ScalingPivot(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble3, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ScalingPivot = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxTexture_TextureTypeUse(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxTexture_TextureTypeUse(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyETextureUse6*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -453);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->TextureTypeUse;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyETextureUse6, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -452, sipPySelf);
        sipKeepReference(sipPySelf, -453, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxTexture_TextureTypeUse(void *, PyObject *, PyObject *);}
static int varset_FbxTexture_TextureTypeUse(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyETextureUse6*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyETextureUse6 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyETextureUse6, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->TextureTypeUse = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxTexture_Translation(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxTexture_Translation(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble3*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -455);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->Translation;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -454, sipPySelf);
        sipKeepReference(sipPySelf, -455, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxTexture_Translation(void *, PyObject *, PyObject *);}
static int varset_FbxTexture_Translation(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble3, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Translation = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxTexture_UVSet(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxTexture_UVSet(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyString*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -457);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->UVSet;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyString, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -456, sipPySelf);
        sipKeepReference(sipPySelf, -457, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxTexture_UVSet(void *, PyObject *, PyObject *);}
static int varset_FbxTexture_UVSet(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyString*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyString *>(sipForceConvertToType(sipPy, sipType_FbxPropertyString, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->UVSet = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxTexture_UVSwap(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxTexture_UVSwap(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyBool1*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -459);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->UVSwap;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyBool1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -458, sipPySelf);
        sipKeepReference(sipPySelf, -459, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxTexture_UVSwap(void *, PyObject *, PyObject *);}
static int varset_FbxTexture_UVSwap(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyBool1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->UVSwap = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxTexture_WrapModeU(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxTexture_WrapModeU(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyEWrapMode*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -461);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->WrapModeU;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyEWrapMode, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -460, sipPySelf);
        sipKeepReference(sipPySelf, -461, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxTexture_WrapModeU(void *, PyObject *, PyObject *);}
static int varset_FbxTexture_WrapModeU(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEWrapMode*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyEWrapMode *>(sipForceConvertToType(sipPy, sipType_FbxPropertyEWrapMode, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->WrapModeU = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxTexture_WrapModeV(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxTexture_WrapModeV(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyEWrapMode*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -463);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->WrapModeV;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyEWrapMode, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -462, sipPySelf);
        sipKeepReference(sipPySelf, -463, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxTexture_WrapModeV(void *, PyObject *, PyObject *);}
static int varset_FbxTexture_WrapModeV(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEWrapMode*sipVal;
     ::FbxTexture *sipCpp = reinterpret_cast< ::FbxTexture *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyEWrapMode *>(sipForceConvertToType(sipPy, sipType_FbxPropertyEWrapMode, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->WrapModeV = *sipVal;

    return 0;
}

sipVariableDef variables_FbxTexture[] = {
    {InstanceVariable, sipName_Alpha, (PyMethodDef *)varget_FbxTexture_Alpha, (PyMethodDef *)varset_FbxTexture_Alpha, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxTexture_ClassId, (PyMethodDef *)varset_FbxTexture_ClassId, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_CurrentMappingType, (PyMethodDef *)varget_FbxTexture_CurrentMappingType, (PyMethodDef *)varset_FbxTexture_CurrentMappingType, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_CurrentTextureBlendMode, (PyMethodDef *)varget_FbxTexture_CurrentTextureBlendMode, (PyMethodDef *)varset_FbxTexture_CurrentTextureBlendMode, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_PremultiplyAlpha, (PyMethodDef *)varget_FbxTexture_PremultiplyAlpha, (PyMethodDef *)varset_FbxTexture_PremultiplyAlpha, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_Rotation, (PyMethodDef *)varget_FbxTexture_Rotation, (PyMethodDef *)varset_FbxTexture_Rotation, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_RotationPivot, (PyMethodDef *)varget_FbxTexture_RotationPivot, (PyMethodDef *)varset_FbxTexture_RotationPivot, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_Scaling, (PyMethodDef *)varget_FbxTexture_Scaling, (PyMethodDef *)varset_FbxTexture_Scaling, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_ScalingPivot, (PyMethodDef *)varget_FbxTexture_ScalingPivot, (PyMethodDef *)varset_FbxTexture_ScalingPivot, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_TextureTypeUse, (PyMethodDef *)varget_FbxTexture_TextureTypeUse, (PyMethodDef *)varset_FbxTexture_TextureTypeUse, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_Translation, (PyMethodDef *)varget_FbxTexture_Translation, (PyMethodDef *)varset_FbxTexture_Translation, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_UVSet, (PyMethodDef *)varget_FbxTexture_UVSet, (PyMethodDef *)varset_FbxTexture_UVSet, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_UVSwap, (PyMethodDef *)varget_FbxTexture_UVSwap, (PyMethodDef *)varset_FbxTexture_UVSwap, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_WrapModeU, (PyMethodDef *)varget_FbxTexture_WrapModeU, (PyMethodDef *)varset_FbxTexture_WrapModeU, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_WrapModeV, (PyMethodDef *)varget_FbxTexture_WrapModeV, (PyMethodDef *)varset_FbxTexture_WrapModeV, SIP_NULLPTR, SIP_NULLPTR},
};


/* Define the enum members and ints to be added to this type. */
static sipIntInstanceDef intInstances_FbxTexture[] = {
    {sipName_eLeft, static_cast<int>( ::FbxTexture::eLeft)},
    {sipName_eRight, static_cast<int>( ::FbxTexture::eRight)},
    {sipName_eTop, static_cast<int>( ::FbxTexture::eTop)},
    {sipName_eBottom, static_cast<int>( ::FbxTexture::eBottom)},
    {sipName_eNone, static_cast<int>( ::FbxTexture::eNone)},
    {sipName_eRGBIntensity, static_cast<int>( ::FbxTexture::eRGBIntensity)},
    {sipName_eBlack, static_cast<int>( ::FbxTexture::eBlack)},
    {sipName_eTranslucent, static_cast<int>( ::FbxTexture::eTranslucent)},
    {sipName_eAdditive, static_cast<int>( ::FbxTexture::eAdditive)},
    {sipName_eModulate, static_cast<int>( ::FbxTexture::eModulate)},
    {sipName_eModulate2, static_cast<int>( ::FbxTexture::eModulate2)},
    {sipName_eOver, static_cast<int>( ::FbxTexture::eOver)},
    {sipName_eU, static_cast<int>( ::FbxTexture::eU)},
    {sipName_eV, static_cast<int>( ::FbxTexture::eV)},
    {sipName_eW, static_cast<int>( ::FbxTexture::eW)},
    {sipName_eNull, static_cast<int>( ::FbxTexture::eNull)},
    {sipName_ePlanar, static_cast<int>( ::FbxTexture::ePlanar)},
    {sipName_eSpherical, static_cast<int>( ::FbxTexture::eSpherical)},
    {sipName_eCylindrical, static_cast<int>( ::FbxTexture::eCylindrical)},
    {sipName_eBox, static_cast<int>( ::FbxTexture::eBox)},
    {sipName_eFace, static_cast<int>( ::FbxTexture::eFace)},
    {sipName_eUV, static_cast<int>( ::FbxTexture::eUV)},
    {sipName_eEnvironment, static_cast<int>( ::FbxTexture::eEnvironment)},
    {sipName_ePlanarNormalX, static_cast<int>( ::FbxTexture::ePlanarNormalX)},
    {sipName_ePlanarNormalY, static_cast<int>( ::FbxTexture::ePlanarNormalY)},
    {sipName_ePlanarNormalZ, static_cast<int>( ::FbxTexture::ePlanarNormalZ)},
    {sipName_eStandard, static_cast<int>( ::FbxTexture::eStandard)},
    {sipName_eShadowMap, static_cast<int>( ::FbxTexture::eShadowMap)},
    {sipName_eLightMap, static_cast<int>( ::FbxTexture::eLightMap)},
    {sipName_eSphericalReflectionMap, static_cast<int>( ::FbxTexture::eSphericalReflectionMap)},
    {sipName_eSphereReflectionMap, static_cast<int>( ::FbxTexture::eSphereReflectionMap)},
    {sipName_eBumpNormalMap, static_cast<int>( ::FbxTexture::eBumpNormalMap)},
    {sipName_eTEXTURE_USE_6_STANDARD, static_cast<int>( ::FbxTexture::eTEXTURE_USE_6_STANDARD)},
    {sipName_eTEXTURE_USE_6_SPHERICAL_REFLEXION_MAP, static_cast<int>( ::FbxTexture::eTEXTURE_USE_6_SPHERICAL_REFLEXION_MAP)},
    {sipName_eTEXTURE_USE_6_SPHERE_REFLEXION_MAP, static_cast<int>( ::FbxTexture::eTEXTURE_USE_6_SPHERE_REFLEXION_MAP)},
    {sipName_eTEXTURE_USE_6_SHADOW_MAP, static_cast<int>( ::FbxTexture::eTEXTURE_USE_6_SHADOW_MAP)},
    {sipName_eTEXTURE_USE_6_LIGHT_MAP, static_cast<int>( ::FbxTexture::eTEXTURE_USE_6_LIGHT_MAP)},
    {sipName_eTEXTURE_USE_6_BUMP_NORMAL_MAP, static_cast<int>( ::FbxTexture::eTEXTURE_USE_6_BUMP_NORMAL_MAP)},
    {sipName_eUMT_UV, static_cast<int>( ::FbxTexture::eUMT_UV)},
    {sipName_eUMT_XY, static_cast<int>( ::FbxTexture::eUMT_XY)},
    {sipName_eUMT_YZ, static_cast<int>( ::FbxTexture::eUMT_YZ)},
    {sipName_eUMT_XZ, static_cast<int>( ::FbxTexture::eUMT_XZ)},
    {sipName_eUMT_SPHERICAL, static_cast<int>( ::FbxTexture::eUMT_SPHERICAL)},
    {sipName_eUMT_CYLINDRICAL, static_cast<int>( ::FbxTexture::eUMT_CYLINDRICAL)},
    {sipName_eUMT_ENVIRONMENT, static_cast<int>( ::FbxTexture::eUMT_ENVIRONMENT)},
    {sipName_eUMT_PROJECTION, static_cast<int>( ::FbxTexture::eUMT_PROJECTION)},
    {sipName_eUMT_BOX, static_cast<int>( ::FbxTexture::eUMT_BOX)},
    {sipName_eUMT_FACE, static_cast<int>( ::FbxTexture::eUMT_FACE)},
    {sipName_eUMT_NO_MAPPING, static_cast<int>( ::FbxTexture::eUMT_NO_MAPPING)},
    {sipName_eRepeat, static_cast<int>( ::FbxTexture::eRepeat)},
    {sipName_eClamp, static_cast<int>( ::FbxTexture::eClamp)},
    {0, 0}
};


sipClassTypeDef sipTypeDef_fbx_FbxTexture = {
    {
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxTexture,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxTexture,
        {0, 0, 1},
        46, methods_FbxTexture,
        15, variables_FbxTexture,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, intInstances_FbxTexture, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_FbxTexture,
    slots_FbxTexture,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_FbxTexture,
    cast_FbxTexture,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
