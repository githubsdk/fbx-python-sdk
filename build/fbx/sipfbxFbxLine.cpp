/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"


#line 4 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxstatus.sip"
#include <fbxsdk.h>
#line 44 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxLine.cpp"


PyDoc_STRVAR(doc_FbxLine_Create, "Create(FbxManager, str) -> FbxLine\n"
"Create(FbxObject, str) -> FbxLine");

extern "C" {static PyObject *meth_FbxLine_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxLine_Create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8A8", &sipSelf, sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxLine*sipRes;

            sipRes =  ::FbxLine::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxLine,SIP_NULLPTR);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8A8", &sipSelf, sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxLine*sipRes;

            sipRes =  ::FbxLine::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxLine,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLine, sipName_Create, doc_FbxLine_Create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLine_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxLine_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxLine_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxLine)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLine, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxLine::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLine, sipName_GetClassId, doc_FbxLine_GetClassId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLine_GetAttributeType, "GetAttributeType(self) -> FbxNodeAttribute.EType");

extern "C" {static PyObject *meth_FbxLine_GetAttributeType(PyObject *, PyObject *);}
static PyObject *meth_FbxLine_GetAttributeType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxLine)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLine, &sipCpp))
        {
             ::FbxNodeAttribute::EType sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxLine::GetAttributeType() : sipCpp->GetAttributeType());

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_FbxNodeAttribute_EType);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLine, sipName_GetAttributeType, doc_FbxLine_GetAttributeType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLine_Reset, "Reset(self)");

extern "C" {static PyObject *meth_FbxLine_Reset(PyObject *, PyObject *);}
static PyObject *meth_FbxLine_Reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLine, &sipCpp))
        {
            sipCpp->Reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLine, sipName_Reset, doc_FbxLine_Reset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLine_SetIndexArraySize, "SetIndexArraySize(self, int)");

extern "C" {static PyObject *meth_FbxLine_SetIndexArraySize(PyObject *, PyObject *);}
static PyObject *meth_FbxLine_SetIndexArraySize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::FbxLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxLine, &sipCpp, &a0))
        {
            sipCpp->SetIndexArraySize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLine, sipName_SetIndexArraySize, doc_FbxLine_SetIndexArraySize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLine_GetIndexArraySize, "GetIndexArraySize(self) -> int");

extern "C" {static PyObject *meth_FbxLine_GetIndexArraySize(PyObject *, PyObject *);}
static PyObject *meth_FbxLine_GetIndexArraySize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetIndexArraySize();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLine, sipName_GetIndexArraySize, doc_FbxLine_GetIndexArraySize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLine_GetIndexArray, "GetIndexArray(self) -> IntArray");

extern "C" {static PyObject *meth_FbxLine_GetIndexArray(PyObject *, PyObject *);}
static PyObject *meth_FbxLine_GetIndexArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLine, &sipCpp))
        {
             ::IntArray*sipRes;

            sipRes = sipCpp->GetIndexArray();

            return sipConvertFromType(sipRes,sipType_IntArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLine, sipName_GetIndexArray, doc_FbxLine_GetIndexArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLine_SetPointIndexAt, "SetPointIndexAt(self, int, int, bool = False) -> bool");

extern "C" {static PyObject *meth_FbxLine_SetPointIndexAt(PyObject *, PyObject *);}
static PyObject *meth_FbxLine_SetPointIndexAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        bool a2 = 0;
         ::FbxLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii|b", &sipSelf, sipType_FbxLine, &sipCpp, &a0, &a1, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->SetPointIndexAt(a0,a1,a2);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLine, sipName_SetPointIndexAt, doc_FbxLine_SetPointIndexAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLine_GetPointIndexAt, "GetPointIndexAt(self, int) -> int");

extern "C" {static PyObject *meth_FbxLine_GetPointIndexAt(PyObject *, PyObject *);}
static PyObject *meth_FbxLine_GetPointIndexAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::FbxLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxLine, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->GetPointIndexAt(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLine, sipName_GetPointIndexAt, doc_FbxLine_GetPointIndexAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLine_AddPointIndex, "AddPointIndex(self, int, bool = False) -> bool");

extern "C" {static PyObject *meth_FbxLine_AddPointIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxLine_AddPointIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        bool a1 = 0;
         ::FbxLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|b", &sipSelf, sipType_FbxLine, &sipCpp, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->AddPointIndex(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLine, sipName_AddPointIndex, doc_FbxLine_AddPointIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLine_GetEndPointArray, "GetEndPointArray(self) -> IntArray");

extern "C" {static PyObject *meth_FbxLine_GetEndPointArray(PyObject *, PyObject *);}
static PyObject *meth_FbxLine_GetEndPointArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLine, &sipCpp))
        {
             ::IntArray*sipRes;

            sipRes = sipCpp->GetEndPointArray();

            return sipConvertFromType(sipRes,sipType_IntArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLine, sipName_GetEndPointArray, doc_FbxLine_GetEndPointArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLine_AddEndPoint, "AddEndPoint(self, int) -> bool");

extern "C" {static PyObject *meth_FbxLine_AddEndPoint(PyObject *, PyObject *);}
static PyObject *meth_FbxLine_AddEndPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::FbxLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxLine, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->AddEndPoint(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLine, sipName_AddEndPoint, doc_FbxLine_AddEndPoint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLine_GetEndPointAt, "GetEndPointAt(self, int) -> int");

extern "C" {static PyObject *meth_FbxLine_GetEndPointAt(PyObject *, PyObject *);}
static PyObject *meth_FbxLine_GetEndPointAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::FbxLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxLine, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->GetEndPointAt(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLine, sipName_GetEndPointAt, doc_FbxLine_GetEndPointAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLine_GetEndPointCount, "GetEndPointCount(self) -> int");

extern "C" {static PyObject *meth_FbxLine_GetEndPointCount(PyObject *, PyObject *);}
static PyObject *meth_FbxLine_GetEndPointCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetEndPointCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLine, sipName_GetEndPointCount, doc_FbxLine_GetEndPointCount);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_FbxLine___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxLine___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxLine *sipCpp = reinterpret_cast< ::FbxLine *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxLine));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxLine* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxLine, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxLine::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxLine, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxLine___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxLine___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxLine *sipCpp = reinterpret_cast< ::FbxLine *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxLine));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxLine* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxLine, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxLine::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxLine, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxLine(void *, const sipTypeDef *);}
static void *cast_FbxLine(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxLine *sipCpp = reinterpret_cast< ::FbxLine *>(sipCppV);

    if (targetType == sipType_FbxLine)
        return sipCppV;

    sipCppV = ((const sipClassTypeDef *)sipType_FbxGeometry)->ctd_cast(static_cast< ::FbxGeometry *>(sipCpp), targetType);
    if (sipCppV)
        return sipCppV;

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxLine(void *, int);}
static void release_FbxLine(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxLine[] = {{147, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxLine[] = {
    {(void *)slot_FbxLine___ne__, ne_slot},
    {(void *)slot_FbxLine___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxLine[] = {
    {sipName_AddEndPoint, meth_FbxLine_AddEndPoint, METH_VARARGS, doc_FbxLine_AddEndPoint},
    {sipName_AddPointIndex, meth_FbxLine_AddPointIndex, METH_VARARGS, doc_FbxLine_AddPointIndex},
    {sipName_Create, meth_FbxLine_Create, METH_VARARGS, doc_FbxLine_Create},
    {sipName_GetAttributeType, meth_FbxLine_GetAttributeType, METH_VARARGS, doc_FbxLine_GetAttributeType},
    {sipName_GetClassId, meth_FbxLine_GetClassId, METH_VARARGS, doc_FbxLine_GetClassId},
    {sipName_GetEndPointArray, meth_FbxLine_GetEndPointArray, METH_VARARGS, doc_FbxLine_GetEndPointArray},
    {sipName_GetEndPointAt, meth_FbxLine_GetEndPointAt, METH_VARARGS, doc_FbxLine_GetEndPointAt},
    {sipName_GetEndPointCount, meth_FbxLine_GetEndPointCount, METH_VARARGS, doc_FbxLine_GetEndPointCount},
    {sipName_GetIndexArray, meth_FbxLine_GetIndexArray, METH_VARARGS, doc_FbxLine_GetIndexArray},
    {sipName_GetIndexArraySize, meth_FbxLine_GetIndexArraySize, METH_VARARGS, doc_FbxLine_GetIndexArraySize},
    {sipName_GetPointIndexAt, meth_FbxLine_GetPointIndexAt, METH_VARARGS, doc_FbxLine_GetPointIndexAt},
    {sipName_Reset, meth_FbxLine_Reset, METH_VARARGS, doc_FbxLine_Reset},
    {sipName_SetIndexArraySize, meth_FbxLine_SetIndexArraySize, METH_VARARGS, doc_FbxLine_SetIndexArraySize},
    {sipName_SetPointIndexAt, meth_FbxLine_SetPointIndexAt, METH_VARARGS, doc_FbxLine_SetPointIndexAt}
};


extern "C" {static PyObject *varget_FbxLine_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLine_ClassId(void *, PyObject *sipPySelf, PyObject *)
{
    static PyObject *sipPy = SIP_NULLPTR;
     ::FbxClassId*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal = & ::FbxLine::ClassId;

    sipPy = sipConvertFromType(sipVal, sipType_FbxClassId, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -37, sipPySelf);
        Py_INCREF(sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLine_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxLine_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy, sipType_FbxClassId, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxLine::ClassId = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLine_Renderable(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLine_Renderable(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyBool1*sipVal;
     ::FbxLine *sipCpp = reinterpret_cast< ::FbxLine *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -39);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->Renderable;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyBool1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -38, sipPySelf);
        sipKeepReference(sipPySelf, -39, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLine_Renderable(void *, PyObject *, PyObject *);}
static int varset_FbxLine_Renderable(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxLine *sipCpp = reinterpret_cast< ::FbxLine *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyBool1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Renderable = *sipVal;

    return 0;
}

sipVariableDef variables_FbxLine[] = {
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxLine_ClassId, (PyMethodDef *)varset_FbxLine_ClassId, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_Renderable, (PyMethodDef *)varget_FbxLine_Renderable, (PyMethodDef *)varset_FbxLine_Renderable, SIP_NULLPTR, SIP_NULLPTR},
};


sipClassTypeDef sipTypeDef_fbx_FbxLine = {
    {
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxLine,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxLine,
        {0, 0, 1},
        14, methods_FbxLine,
        2, variables_FbxLine,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_FbxLine,
    slots_FbxLine,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_FbxLine,
    cast_FbxLine,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
