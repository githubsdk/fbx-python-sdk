/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxDisplayLayer_Create, "Create(FbxManager, str) -> FbxDisplayLayer\n"
"Create(FbxObject, str) -> FbxDisplayLayer");

extern "C" {static PyObject *meth_FbxDisplayLayer_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxDisplayLayer_Create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8A8", &sipSelf, sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxDisplayLayer*sipRes;

            sipRes =  ::FbxDisplayLayer::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxDisplayLayer,SIP_NULLPTR);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8A8", &sipSelf, sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxDisplayLayer*sipRes;

            sipRes =  ::FbxDisplayLayer::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxDisplayLayer,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxDisplayLayer, sipName_Create, doc_FbxDisplayLayer_Create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxDisplayLayer_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxDisplayLayer_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxDisplayLayer_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxDisplayLayer)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxDisplayLayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxDisplayLayer, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxDisplayLayer::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxDisplayLayer, sipName_GetClassId, doc_FbxDisplayLayer_GetClassId);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_FbxDisplayLayer___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxDisplayLayer___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxDisplayLayer *sipCpp = reinterpret_cast< ::FbxDisplayLayer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxDisplayLayer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxDisplayLayer* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxDisplayLayer, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxDisplayLayer::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxDisplayLayer, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxDisplayLayer___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxDisplayLayer___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxDisplayLayer *sipCpp = reinterpret_cast< ::FbxDisplayLayer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxDisplayLayer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxDisplayLayer* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxDisplayLayer, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxDisplayLayer::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxDisplayLayer, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxDisplayLayer(void *, const sipTypeDef *);}
static void *cast_FbxDisplayLayer(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxDisplayLayer *sipCpp = reinterpret_cast< ::FbxDisplayLayer *>(sipCppV);

    if (targetType == sipType_FbxDisplayLayer)
        return sipCppV;

    sipCppV = ((const sipClassTypeDef *)sipType_FbxCollectionExclusive)->ctd_cast(static_cast< ::FbxCollectionExclusive *>(sipCpp), targetType);
    if (sipCppV)
        return sipCppV;

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxDisplayLayer(void *, int);}
static void release_FbxDisplayLayer(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxDisplayLayer[] = {{101, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxDisplayLayer[] = {
    {(void *)slot_FbxDisplayLayer___ne__, ne_slot},
    {(void *)slot_FbxDisplayLayer___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxDisplayLayer[] = {
    {sipName_Create, meth_FbxDisplayLayer_Create, METH_VARARGS, doc_FbxDisplayLayer_Create},
    {sipName_GetClassId, meth_FbxDisplayLayer_GetClassId, METH_VARARGS, doc_FbxDisplayLayer_GetClassId}
};


extern "C" {static PyObject *varget_FbxDisplayLayer_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxDisplayLayer_ClassId(void *, PyObject *sipPySelf, PyObject *)
{
    static PyObject *sipPy = SIP_NULLPTR;
     ::FbxClassId*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal = & ::FbxDisplayLayer::ClassId;

    sipPy = sipConvertFromType(sipVal, sipType_FbxClassId, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -1132, sipPySelf);
        Py_INCREF(sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxDisplayLayer_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxDisplayLayer_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy, sipType_FbxClassId, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxDisplayLayer::ClassId = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxDisplayLayer_Color(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxDisplayLayer_Color(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble3*sipVal;
     ::FbxDisplayLayer *sipCpp = reinterpret_cast< ::FbxDisplayLayer *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -1134);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->Color;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -1133, sipPySelf);
        sipKeepReference(sipPySelf, -1134, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxDisplayLayer_Color(void *, PyObject *, PyObject *);}
static int varset_FbxDisplayLayer_Color(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxDisplayLayer *sipCpp = reinterpret_cast< ::FbxDisplayLayer *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble3, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Color = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxDisplayLayer_Freeze(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxDisplayLayer_Freeze(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyBool1*sipVal;
     ::FbxDisplayLayer *sipCpp = reinterpret_cast< ::FbxDisplayLayer *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -1136);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->Freeze;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyBool1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -1135, sipPySelf);
        sipKeepReference(sipPySelf, -1136, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxDisplayLayer_Freeze(void *, PyObject *, PyObject *);}
static int varset_FbxDisplayLayer_Freeze(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxDisplayLayer *sipCpp = reinterpret_cast< ::FbxDisplayLayer *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyBool1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Freeze = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxDisplayLayer_LODBox(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxDisplayLayer_LODBox(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyBool1*sipVal;
     ::FbxDisplayLayer *sipCpp = reinterpret_cast< ::FbxDisplayLayer *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -1138);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->LODBox;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyBool1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -1137, sipPySelf);
        sipKeepReference(sipPySelf, -1138, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxDisplayLayer_LODBox(void *, PyObject *, PyObject *);}
static int varset_FbxDisplayLayer_LODBox(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxDisplayLayer *sipCpp = reinterpret_cast< ::FbxDisplayLayer *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyBool1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->LODBox = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxDisplayLayer_Show(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxDisplayLayer_Show(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyBool1*sipVal;
     ::FbxDisplayLayer *sipCpp = reinterpret_cast< ::FbxDisplayLayer *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -1140);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->Show;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyBool1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -1139, sipPySelf);
        sipKeepReference(sipPySelf, -1140, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxDisplayLayer_Show(void *, PyObject *, PyObject *);}
static int varset_FbxDisplayLayer_Show(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxDisplayLayer *sipCpp = reinterpret_cast< ::FbxDisplayLayer *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyBool1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Show = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxDisplayLayer_sColorDefault(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxDisplayLayer_sColorDefault(void *, PyObject *, PyObject *)
{
    const  ::FbxDouble3*sipVal;

    sipVal = new  ::FbxDouble3( ::FbxDisplayLayer::sColorDefault);

    return sipConvertFromNewType(const_cast< ::FbxDouble3 *>(sipVal), sipType_FbxDouble3, SIP_NULLPTR);
}

sipVariableDef variables_FbxDisplayLayer[] = {
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxDisplayLayer_ClassId, (PyMethodDef *)varset_FbxDisplayLayer_ClassId, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_Color, (PyMethodDef *)varget_FbxDisplayLayer_Color, (PyMethodDef *)varset_FbxDisplayLayer_Color, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_Freeze, (PyMethodDef *)varget_FbxDisplayLayer_Freeze, (PyMethodDef *)varset_FbxDisplayLayer_Freeze, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_LODBox, (PyMethodDef *)varget_FbxDisplayLayer_LODBox, (PyMethodDef *)varset_FbxDisplayLayer_LODBox, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_Show, (PyMethodDef *)varget_FbxDisplayLayer_Show, (PyMethodDef *)varset_FbxDisplayLayer_Show, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_sColorDefault, (PyMethodDef *)varget_FbxDisplayLayer_sColorDefault, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};


sipClassTypeDef sipTypeDef_fbx_FbxDisplayLayer = {
    {
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxDisplayLayer,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxDisplayLayer,
        {0, 0, 1},
        2, methods_FbxDisplayLayer,
        6, variables_FbxDisplayLayer,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_FbxDisplayLayer,
    slots_FbxDisplayLayer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_FbxDisplayLayer,
    cast_FbxDisplayLayer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
