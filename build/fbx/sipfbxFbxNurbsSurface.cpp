/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"


#line 4 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxstatus.sip"
#include <fbxsdk.h>
#line 44 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxNurbsSurface.cpp"


PyDoc_STRVAR(doc_FbxNurbsSurface_Create, "Create(FbxManager, str) -> FbxNurbsSurface\n"
"Create(FbxObject, str) -> FbxNurbsSurface");

extern "C" {static PyObject *meth_FbxNurbsSurface_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_Create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8A8", &sipSelf, sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxNurbsSurface*sipRes;

            sipRes =  ::FbxNurbsSurface::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxNurbsSurface,SIP_NULLPTR);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8A8", &sipSelf, sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxNurbsSurface*sipRes;

            sipRes =  ::FbxNurbsSurface::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxNurbsSurface,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_Create, doc_FbxNurbsSurface_Create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxNurbsSurface_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxNurbsSurface)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNurbsSurface, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxNurbsSurface::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_GetClassId, doc_FbxNurbsSurface_GetClassId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_GetAttributeType, "GetAttributeType(self) -> FbxNodeAttribute.EType");

extern "C" {static PyObject *meth_FbxNurbsSurface_GetAttributeType(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_GetAttributeType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxNurbsSurface)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNurbsSurface, &sipCpp))
        {
             ::FbxNodeAttribute::EType sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxNurbsSurface::GetAttributeType() : sipCpp->GetAttributeType());

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_FbxNodeAttribute_EType);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_GetAttributeType, doc_FbxNurbsSurface_GetAttributeType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_Reset, "Reset(self)");

extern "C" {static PyObject *meth_FbxNurbsSurface_Reset(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_Reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNurbsSurface, &sipCpp))
        {
            sipCpp->Reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_Reset, doc_FbxNurbsSurface_Reset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_SetSurfaceMode, "SetSurfaceMode(self, FbxGeometry.ESurfaceMode)");

extern "C" {static PyObject *meth_FbxNurbsSurface_SetSurfaceMode(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_SetSurfaceMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxGeometry::ESurfaceMode a0;
         ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxNurbsSurface, &sipCpp, sipType_FbxGeometry_ESurfaceMode, &a0))
        {
            sipCpp->SetSurfaceMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_SetSurfaceMode, doc_FbxNurbsSurface_SetSurfaceMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_GetSurfaceMode, "GetSurfaceMode(self) -> FbxGeometry.ESurfaceMode");

extern "C" {static PyObject *meth_FbxNurbsSurface_GetSurfaceMode(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_GetSurfaceMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNurbsSurface, &sipCpp))
        {
             ::FbxGeometry::ESurfaceMode sipRes;

            sipRes = sipCpp->GetSurfaceMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_FbxGeometry_ESurfaceMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_GetSurfaceMode, doc_FbxNurbsSurface_GetSurfaceMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_InitControlPoints, "InitControlPoints(self, int, FbxNurbsSurface.EType, int, FbxNurbsSurface.EType)");

extern "C" {static PyObject *meth_FbxNurbsSurface_InitControlPoints(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_InitControlPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::FbxNurbsSurface::EType a1;
        int a2;
         ::FbxNurbsSurface::EType a3;
         ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiEiE", &sipSelf, sipType_FbxNurbsSurface, &sipCpp, &a0, sipType_FbxNurbsSurface_EType, &a1, &a2, sipType_FbxNurbsSurface_EType, &a3))
        {
            sipCpp->InitControlPoints(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_InitControlPoints, doc_FbxNurbsSurface_InitControlPoints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_GetUCount, "GetUCount(self) -> int");

extern "C" {static PyObject *meth_FbxNurbsSurface_GetUCount(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_GetUCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNurbsSurface, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetUCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_GetUCount, doc_FbxNurbsSurface_GetUCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_GetVCount, "GetVCount(self) -> int");

extern "C" {static PyObject *meth_FbxNurbsSurface_GetVCount(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_GetVCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNurbsSurface, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetVCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_GetVCount, doc_FbxNurbsSurface_GetVCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_GetNurbsUType, "GetNurbsUType(self) -> FbxNurbsSurface.EType");

extern "C" {static PyObject *meth_FbxNurbsSurface_GetNurbsUType(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_GetNurbsUType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNurbsSurface, &sipCpp))
        {
             ::FbxNurbsSurface::EType sipRes;

            sipRes = sipCpp->GetNurbsUType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_FbxNurbsSurface_EType);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_GetNurbsUType, doc_FbxNurbsSurface_GetNurbsUType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_GetNurbsVType, "GetNurbsVType(self) -> FbxNurbsSurface.EType");

extern "C" {static PyObject *meth_FbxNurbsSurface_GetNurbsVType(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_GetNurbsVType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNurbsSurface, &sipCpp))
        {
             ::FbxNurbsSurface::EType sipRes;

            sipRes = sipCpp->GetNurbsVType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_FbxNurbsSurface_EType);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_GetNurbsVType, doc_FbxNurbsSurface_GetNurbsVType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_GetUKnotCount, "GetUKnotCount(self) -> int");

extern "C" {static PyObject *meth_FbxNurbsSurface_GetUKnotCount(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_GetUKnotCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNurbsSurface, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetUKnotCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_GetUKnotCount, doc_FbxNurbsSurface_GetUKnotCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_GetUKnotVector, "GetUKnotVector(self) -> List");

extern "C" {static PyObject *meth_FbxNurbsSurface_GetUKnotVector(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_GetUKnotVector(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNurbsSurface, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 34 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxnurbsurface.sip"
    double * uknots = sipCpp->GetUKnotVector();
    int uknotcount = sipCpp->GetUKnotCount();

    if ((sipRes = PyList_New(uknotcount)) == NULL)
        return NULL;

    for (int i = 0; i < uknotcount; ++i)
    {
        PyList_SET_ITEM(sipRes, i, PyFloat_FromDouble(*uknots));
        uknots++;
    }
#line 423 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxNurbsSurface.cpp"

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_GetUKnotVector, doc_FbxNurbsSurface_GetUKnotVector);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_GetVKnotCount, "GetVKnotCount(self) -> int");

extern "C" {static PyObject *meth_FbxNurbsSurface_GetVKnotCount(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_GetVKnotCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNurbsSurface, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetVKnotCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_GetVKnotCount, doc_FbxNurbsSurface_GetVKnotCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_GetVKnotVector, "GetVKnotVector(self) -> List");

extern "C" {static PyObject *meth_FbxNurbsSurface_GetVKnotVector(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_GetVKnotVector(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNurbsSurface, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 49 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxnurbsurface.sip"
    double * vknots = sipCpp->GetVKnotVector();
    int vknotcount = sipCpp->GetVKnotCount();

    if ((sipRes = PyList_New(vknotcount)) == NULL)
        return NULL;

    for (int i = 0; i < vknotcount; ++i)
    {
        PyList_SET_ITEM(sipRes, i, PyFloat_FromDouble(*vknots));
        vknots++;
    }
#line 489 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxNurbsSurface.cpp"

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_GetVKnotVector, doc_FbxNurbsSurface_GetVKnotVector);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_SetOrder, "SetOrder(self, int, int)");

extern "C" {static PyObject *meth_FbxNurbsSurface_SetOrder(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_SetOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxUInt32 a0;
         ::FbxUInt32 a1;
         ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_FbxNurbsSurface, &sipCpp, &a0, &a1))
        {
            sipCpp->SetOrder(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_SetOrder, doc_FbxNurbsSurface_SetOrder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_GetUOrder, "GetUOrder(self) -> int");

extern "C" {static PyObject *meth_FbxNurbsSurface_GetUOrder(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_GetUOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNurbsSurface, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetUOrder();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_GetUOrder, doc_FbxNurbsSurface_GetUOrder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_GetVOrder, "GetVOrder(self) -> int");

extern "C" {static PyObject *meth_FbxNurbsSurface_GetVOrder(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_GetVOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNurbsSurface, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetVOrder();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_GetVOrder, doc_FbxNurbsSurface_GetVOrder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_SetStep, "SetStep(self, int, int)");

extern "C" {static PyObject *meth_FbxNurbsSurface_SetStep(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_SetStep(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_FbxNurbsSurface, &sipCpp, &a0, &a1))
        {
            sipCpp->SetStep(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_SetStep, doc_FbxNurbsSurface_SetStep);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_GetUStep, "GetUStep(self) -> int");

extern "C" {static PyObject *meth_FbxNurbsSurface_GetUStep(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_GetUStep(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNurbsSurface, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetUStep();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_GetUStep, doc_FbxNurbsSurface_GetUStep);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_GetVStep, "GetVStep(self) -> int");

extern "C" {static PyObject *meth_FbxNurbsSurface_GetVStep(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_GetVStep(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNurbsSurface, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetVStep();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_GetVStep, doc_FbxNurbsSurface_GetVStep);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_GetUSpanCount, "GetUSpanCount(self) -> int");

extern "C" {static PyObject *meth_FbxNurbsSurface_GetUSpanCount(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_GetUSpanCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNurbsSurface, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetUSpanCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_GetUSpanCount, doc_FbxNurbsSurface_GetUSpanCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_GetVSpanCount, "GetVSpanCount(self) -> int");

extern "C" {static PyObject *meth_FbxNurbsSurface_GetVSpanCount(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_GetVSpanCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNurbsSurface, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetVSpanCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_GetVSpanCount, doc_FbxNurbsSurface_GetVSpanCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_SetApplyFlipUV, "SetApplyFlipUV(self, bool)");

extern "C" {static PyObject *meth_FbxNurbsSurface_SetApplyFlipUV(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_SetApplyFlipUV(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxNurbsSurface, &sipCpp, &a0))
        {
            sipCpp->SetApplyFlipUV(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_SetApplyFlipUV, doc_FbxNurbsSurface_SetApplyFlipUV);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_GetApplyFlipUV, "GetApplyFlipUV(self) -> bool");

extern "C" {static PyObject *meth_FbxNurbsSurface_GetApplyFlipUV(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_GetApplyFlipUV(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNurbsSurface, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetApplyFlipUV();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_GetApplyFlipUV, doc_FbxNurbsSurface_GetApplyFlipUV);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_SetApplyFlipLinks, "SetApplyFlipLinks(self, bool)");

extern "C" {static PyObject *meth_FbxNurbsSurface_SetApplyFlipLinks(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_SetApplyFlipLinks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxNurbsSurface, &sipCpp, &a0))
        {
            sipCpp->SetApplyFlipLinks(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_SetApplyFlipLinks, doc_FbxNurbsSurface_SetApplyFlipLinks);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_GetApplyFlipLinks, "GetApplyFlipLinks(self) -> bool");

extern "C" {static PyObject *meth_FbxNurbsSurface_GetApplyFlipLinks(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_GetApplyFlipLinks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNurbsSurface, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetApplyFlipLinks();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_GetApplyFlipLinks, doc_FbxNurbsSurface_GetApplyFlipLinks);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_GetApplyFlip, "GetApplyFlip(self) -> bool");

extern "C" {static PyObject *meth_FbxNurbsSurface_GetApplyFlip(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_GetApplyFlip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNurbsSurface, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetApplyFlip();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_GetApplyFlip, doc_FbxNurbsSurface_GetApplyFlip);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_AddCurveOnSurface, "AddCurveOnSurface(self, FbxNode)");

extern "C" {static PyObject *meth_FbxNurbsSurface_AddCurveOnSurface(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_AddCurveOnSurface(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxNode* a0;
         ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxNurbsSurface, &sipCpp, sipType_FbxNode, &a0))
        {
            sipCpp->AddCurveOnSurface(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_AddCurveOnSurface, doc_FbxNurbsSurface_AddCurveOnSurface);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_GetCurveOnSurface, "GetCurveOnSurface(self, int) -> FbxNode");

extern "C" {static PyObject *meth_FbxNurbsSurface_GetCurveOnSurface(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_GetCurveOnSurface(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxNurbsSurface, &sipCpp, &a0))
        {
             ::FbxNode*sipRes;

            sipRes = sipCpp->GetCurveOnSurface(a0);

            return sipConvertFromType(sipRes,sipType_FbxNode,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_GetCurveOnSurface, doc_FbxNurbsSurface_GetCurveOnSurface);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_GetCurveOnSurfaceCount, "GetCurveOnSurfaceCount(self) -> int");

extern "C" {static PyObject *meth_FbxNurbsSurface_GetCurveOnSurfaceCount(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_GetCurveOnSurfaceCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNurbsSurface, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetCurveOnSurfaceCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_GetCurveOnSurfaceCount, doc_FbxNurbsSurface_GetCurveOnSurfaceCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_RemoveCurveOnSurface, "RemoveCurveOnSurface(self, FbxNode) -> bool");

extern "C" {static PyObject *meth_FbxNurbsSurface_RemoveCurveOnSurface(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_RemoveCurveOnSurface(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxNode* a0;
         ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxNurbsSurface, &sipCpp, sipType_FbxNode, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->RemoveCurveOnSurface(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_RemoveCurveOnSurface, doc_FbxNurbsSurface_RemoveCurveOnSurface);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxNurbsSurface_IsRational, "IsRational(self) -> bool");

extern "C" {static PyObject *meth_FbxNurbsSurface_IsRational(PyObject *, PyObject *);}
static PyObject *meth_FbxNurbsSurface_IsRational(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxNurbsSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNurbsSurface, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->IsRational();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxNurbsSurface, sipName_IsRational, doc_FbxNurbsSurface_IsRational);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_FbxNurbsSurface___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxNurbsSurface___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxNurbsSurface *sipCpp = reinterpret_cast< ::FbxNurbsSurface *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxNurbsSurface));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxNurbsSurface* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxNurbsSurface, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxNurbsSurface::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxNurbsSurface, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxNurbsSurface___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxNurbsSurface___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxNurbsSurface *sipCpp = reinterpret_cast< ::FbxNurbsSurface *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxNurbsSurface));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxNurbsSurface* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxNurbsSurface, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxNurbsSurface::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxNurbsSurface, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxNurbsSurface(void *, const sipTypeDef *);}
static void *cast_FbxNurbsSurface(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxNurbsSurface *sipCpp = reinterpret_cast< ::FbxNurbsSurface *>(sipCppV);

    if (targetType == sipType_FbxNurbsSurface)
        return sipCppV;

    sipCppV = ((const sipClassTypeDef *)sipType_FbxGeometry)->ctd_cast(static_cast< ::FbxGeometry *>(sipCpp), targetType);
    if (sipCppV)
        return sipCppV;

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxNurbsSurface(void *, int);}
static void release_FbxNurbsSurface(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxNurbsSurface[] = {{147, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxNurbsSurface[] = {
    {(void *)slot_FbxNurbsSurface___ne__, ne_slot},
    {(void *)slot_FbxNurbsSurface___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxNurbsSurface[] = {
    {sipName_AddCurveOnSurface, meth_FbxNurbsSurface_AddCurveOnSurface, METH_VARARGS, doc_FbxNurbsSurface_AddCurveOnSurface},
    {sipName_Create, meth_FbxNurbsSurface_Create, METH_VARARGS, doc_FbxNurbsSurface_Create},
    {sipName_GetApplyFlip, meth_FbxNurbsSurface_GetApplyFlip, METH_VARARGS, doc_FbxNurbsSurface_GetApplyFlip},
    {sipName_GetApplyFlipLinks, meth_FbxNurbsSurface_GetApplyFlipLinks, METH_VARARGS, doc_FbxNurbsSurface_GetApplyFlipLinks},
    {sipName_GetApplyFlipUV, meth_FbxNurbsSurface_GetApplyFlipUV, METH_VARARGS, doc_FbxNurbsSurface_GetApplyFlipUV},
    {sipName_GetAttributeType, meth_FbxNurbsSurface_GetAttributeType, METH_VARARGS, doc_FbxNurbsSurface_GetAttributeType},
    {sipName_GetClassId, meth_FbxNurbsSurface_GetClassId, METH_VARARGS, doc_FbxNurbsSurface_GetClassId},
    {sipName_GetCurveOnSurface, meth_FbxNurbsSurface_GetCurveOnSurface, METH_VARARGS, doc_FbxNurbsSurface_GetCurveOnSurface},
    {sipName_GetCurveOnSurfaceCount, meth_FbxNurbsSurface_GetCurveOnSurfaceCount, METH_VARARGS, doc_FbxNurbsSurface_GetCurveOnSurfaceCount},
    {sipName_GetNurbsUType, meth_FbxNurbsSurface_GetNurbsUType, METH_VARARGS, doc_FbxNurbsSurface_GetNurbsUType},
    {sipName_GetNurbsVType, meth_FbxNurbsSurface_GetNurbsVType, METH_VARARGS, doc_FbxNurbsSurface_GetNurbsVType},
    {sipName_GetSurfaceMode, meth_FbxNurbsSurface_GetSurfaceMode, METH_VARARGS, doc_FbxNurbsSurface_GetSurfaceMode},
    {sipName_GetUCount, meth_FbxNurbsSurface_GetUCount, METH_VARARGS, doc_FbxNurbsSurface_GetUCount},
    {sipName_GetUKnotCount, meth_FbxNurbsSurface_GetUKnotCount, METH_VARARGS, doc_FbxNurbsSurface_GetUKnotCount},
    {sipName_GetUKnotVector, meth_FbxNurbsSurface_GetUKnotVector, METH_VARARGS, doc_FbxNurbsSurface_GetUKnotVector},
    {sipName_GetUOrder, meth_FbxNurbsSurface_GetUOrder, METH_VARARGS, doc_FbxNurbsSurface_GetUOrder},
    {sipName_GetUSpanCount, meth_FbxNurbsSurface_GetUSpanCount, METH_VARARGS, doc_FbxNurbsSurface_GetUSpanCount},
    {sipName_GetUStep, meth_FbxNurbsSurface_GetUStep, METH_VARARGS, doc_FbxNurbsSurface_GetUStep},
    {sipName_GetVCount, meth_FbxNurbsSurface_GetVCount, METH_VARARGS, doc_FbxNurbsSurface_GetVCount},
    {sipName_GetVKnotCount, meth_FbxNurbsSurface_GetVKnotCount, METH_VARARGS, doc_FbxNurbsSurface_GetVKnotCount},
    {sipName_GetVKnotVector, meth_FbxNurbsSurface_GetVKnotVector, METH_VARARGS, doc_FbxNurbsSurface_GetVKnotVector},
    {sipName_GetVOrder, meth_FbxNurbsSurface_GetVOrder, METH_VARARGS, doc_FbxNurbsSurface_GetVOrder},
    {sipName_GetVSpanCount, meth_FbxNurbsSurface_GetVSpanCount, METH_VARARGS, doc_FbxNurbsSurface_GetVSpanCount},
    {sipName_GetVStep, meth_FbxNurbsSurface_GetVStep, METH_VARARGS, doc_FbxNurbsSurface_GetVStep},
    {sipName_InitControlPoints, meth_FbxNurbsSurface_InitControlPoints, METH_VARARGS, doc_FbxNurbsSurface_InitControlPoints},
    {sipName_IsRational, meth_FbxNurbsSurface_IsRational, METH_VARARGS, doc_FbxNurbsSurface_IsRational},
    {sipName_RemoveCurveOnSurface, meth_FbxNurbsSurface_RemoveCurveOnSurface, METH_VARARGS, doc_FbxNurbsSurface_RemoveCurveOnSurface},
    {sipName_Reset, meth_FbxNurbsSurface_Reset, METH_VARARGS, doc_FbxNurbsSurface_Reset},
    {sipName_SetApplyFlipLinks, meth_FbxNurbsSurface_SetApplyFlipLinks, METH_VARARGS, doc_FbxNurbsSurface_SetApplyFlipLinks},
    {sipName_SetApplyFlipUV, meth_FbxNurbsSurface_SetApplyFlipUV, METH_VARARGS, doc_FbxNurbsSurface_SetApplyFlipUV},
    {sipName_SetOrder, meth_FbxNurbsSurface_SetOrder, METH_VARARGS, doc_FbxNurbsSurface_SetOrder},
    {sipName_SetStep, meth_FbxNurbsSurface_SetStep, METH_VARARGS, doc_FbxNurbsSurface_SetStep},
    {sipName_SetSurfaceMode, meth_FbxNurbsSurface_SetSurfaceMode, METH_VARARGS, doc_FbxNurbsSurface_SetSurfaceMode}
};


extern "C" {static PyObject *varget_FbxNurbsSurface_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNurbsSurface_ClassId(void *, PyObject *sipPySelf, PyObject *)
{
    static PyObject *sipPy = SIP_NULLPTR;
     ::FbxClassId*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal = & ::FbxNurbsSurface::ClassId;

    sipPy = sipConvertFromType(sipVal, sipType_FbxClassId, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -33, sipPySelf);
        Py_INCREF(sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxNurbsSurface_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxNurbsSurface_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy, sipType_FbxClassId, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxNurbsSurface::ClassId = *sipVal;

    return 0;
}

sipVariableDef variables_FbxNurbsSurface[] = {
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxNurbsSurface_ClassId, (PyMethodDef *)varset_FbxNurbsSurface_ClassId, SIP_NULLPTR, SIP_NULLPTR},
};


/* Define the enum members and ints to be added to this type. */
static sipIntInstanceDef intInstances_FbxNurbsSurface[] = {
    {sipName_ePeriodic, static_cast<int>( ::FbxNurbsSurface::ePeriodic)},
    {sipName_eClosed, static_cast<int>( ::FbxNurbsSurface::eClosed)},
    {sipName_eOpen, static_cast<int>( ::FbxNurbsSurface::eOpen)},
    {0, 0}
};


sipClassTypeDef sipTypeDef_fbx_FbxNurbsSurface = {
    {
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxNurbsSurface,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxNurbsSurface,
        {0, 0, 1},
        33, methods_FbxNurbsSurface,
        1, variables_FbxNurbsSurface,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, intInstances_FbxNurbsSurface, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_FbxNurbsSurface,
    slots_FbxNurbsSurface,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_FbxNurbsSurface,
    cast_FbxNurbsSurface,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
