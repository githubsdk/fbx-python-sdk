/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxClassId_Destroy, "Destroy(self)");

extern "C" {static PyObject *meth_FbxClassId_Destroy(PyObject *, PyObject *);}
static PyObject *meth_FbxClassId_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxClassId *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxClassId, &sipCpp))
        {
            sipCpp->Destroy();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxClassId, sipName_Destroy, doc_FbxClassId_Destroy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxClassId_GetName, "GetName(self) -> str");

extern "C" {static PyObject *meth_FbxClassId_GetName(PyObject *, PyObject *);}
static PyObject *meth_FbxClassId_GetName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxClassId *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxClassId, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->GetName();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_FromString(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxClassId, sipName_GetName, doc_FbxClassId_GetName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxClassId_GetParent, "GetParent(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxClassId_GetParent(PyObject *, PyObject *);}
static PyObject *meth_FbxClassId_GetParent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxClassId *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxClassId, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId(sipCpp->GetParent());

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxClassId, sipName_GetParent, doc_FbxClassId_GetParent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxClassId_Create, "Create(self, FbxManager, str, FbxObject) -> FbxObject");

extern "C" {static PyObject *meth_FbxClassId_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxClassId_Create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;
        const  ::FbxObject* a2;
         ::FbxClassId *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9A8J8", &sipSelf, sipType_FbxClassId, &sipCpp, sipType_FbxManager, &a0, &a1Keep, &a1, sipType_FbxObject, &a2))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->Create(*a0,a1,a2);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxClassId, sipName_Create, doc_FbxClassId_Create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxClassId_Is, "Is(self, FbxClassId) -> bool");

extern "C" {static PyObject *meth_FbxClassId_Is(PyObject *, PyObject *);}
static PyObject *meth_FbxClassId_Is(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxClassId* a0;
        const  ::FbxClassId *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxClassId, &sipCpp, sipType_FbxClassId, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->Is(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxClassId, sipName_Is, doc_FbxClassId_Is);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxClassId_GetFbxFileTypeName, "GetFbxFileTypeName(self, bool = False) -> str");

extern "C" {static PyObject *meth_FbxClassId_GetFbxFileTypeName(PyObject *, PyObject *);}
static PyObject *meth_FbxClassId_GetFbxFileTypeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 0;
        const  ::FbxClassId *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|b", &sipSelf, sipType_FbxClassId, &sipCpp, &a0))
        {
            const char*sipRes;

            sipRes = sipCpp->GetFbxFileTypeName(a0);

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_FromString(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxClassId, sipName_GetFbxFileTypeName, doc_FbxClassId_GetFbxFileTypeName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxClassId_GetFbxFileSubTypeName, "GetFbxFileSubTypeName(self) -> str");

extern "C" {static PyObject *meth_FbxClassId_GetFbxFileSubTypeName(PyObject *, PyObject *);}
static PyObject *meth_FbxClassId_GetFbxFileSubTypeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxClassId *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxClassId, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->GetFbxFileSubTypeName();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_FromString(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxClassId, sipName_GetFbxFileSubTypeName, doc_FbxClassId_GetFbxFileSubTypeName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxClassId_IsValid, "IsValid(self) -> bool");

extern "C" {static PyObject *meth_FbxClassId_IsValid(PyObject *, PyObject *);}
static PyObject *meth_FbxClassId_IsValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxClassId *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxClassId, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->IsValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxClassId, sipName_IsValid, doc_FbxClassId_IsValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxClassId_SetObjectTypePrefix, "SetObjectTypePrefix(self, str)");

extern "C" {static PyObject *meth_FbxClassId_SetObjectTypePrefix(PyObject *, PyObject *);}
static PyObject *meth_FbxClassId_SetObjectTypePrefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxClassId *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxClassId, &sipCpp, &a0Keep, &a0))
        {
            sipCpp->SetObjectTypePrefix(a0);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxClassId, sipName_SetObjectTypePrefix, doc_FbxClassId_SetObjectTypePrefix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxClassId_GetObjectTypePrefix, "GetObjectTypePrefix(self) -> str");

extern "C" {static PyObject *meth_FbxClassId_GetObjectTypePrefix(PyObject *, PyObject *);}
static PyObject *meth_FbxClassId_GetObjectTypePrefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxClassId *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxClassId, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->GetObjectTypePrefix();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_FromString(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxClassId, sipName_GetObjectTypePrefix, doc_FbxClassId_GetObjectTypePrefix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxClassId_ClassInstanceIncRef, "ClassInstanceIncRef(self) -> int");

extern "C" {static PyObject *meth_FbxClassId_ClassInstanceIncRef(PyObject *, PyObject *);}
static PyObject *meth_FbxClassId_ClassInstanceIncRef(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxClassId *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxClassId, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->ClassInstanceIncRef();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxClassId, sipName_ClassInstanceIncRef, doc_FbxClassId_ClassInstanceIncRef);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxClassId_ClassInstanceDecRef, "ClassInstanceDecRef(self) -> int");

extern "C" {static PyObject *meth_FbxClassId_ClassInstanceDecRef(PyObject *, PyObject *);}
static PyObject *meth_FbxClassId_ClassInstanceDecRef(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxClassId *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxClassId, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->ClassInstanceDecRef();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxClassId, sipName_ClassInstanceDecRef, doc_FbxClassId_ClassInstanceDecRef);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxClassId_GetInstanceRef, "GetInstanceRef(self) -> int");

extern "C" {static PyObject *meth_FbxClassId_GetInstanceRef(PyObject *, PyObject *);}
static PyObject *meth_FbxClassId_GetInstanceRef(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxClassId *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxClassId, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetInstanceRef();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxClassId, sipName_GetInstanceRef, doc_FbxClassId_GetInstanceRef);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_FbxClassId___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxClassId___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxClassId *sipCpp = reinterpret_cast< ::FbxClassId *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxClassId));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxClassId* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxClassId, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxClassId::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxClassId, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxClassId___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxClassId___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxClassId *sipCpp = reinterpret_cast< ::FbxClassId *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxClassId));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxClassId* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxClassId, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxClassId::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxClassId, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxClassId(void *, int);}
static void release_FbxClassId(void *sipCppV, int)
{
    delete reinterpret_cast< ::FbxClassId *>(sipCppV);
}


extern "C" {static void *array_FbxClassId(Py_ssize_t);}
static void *array_FbxClassId(Py_ssize_t sipNrElem)
{
    return new  ::FbxClassId[sipNrElem];
}


extern "C" {static void assign_FbxClassId(void *, Py_ssize_t, void *);}
static void assign_FbxClassId(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::FbxClassId *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::FbxClassId *>(sipSrc);
}


extern "C" {static void *copy_FbxClassId(const void *, Py_ssize_t);}
static void *copy_FbxClassId(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::FbxClassId(reinterpret_cast<const  ::FbxClassId *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxClassId(sipSimpleWrapper *);}
static void dealloc_FbxClassId(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxClassId(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_FbxClassId(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxClassId(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::FbxClassId *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::FbxClassId();

            return sipCpp;
        }
    }

    {
        const  ::FbxClassId* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_FbxClassId, &a0))
        {
            sipCpp = new  ::FbxClassId(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxClassId[] = {
    {(void *)slot_FbxClassId___ne__, ne_slot},
    {(void *)slot_FbxClassId___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxClassId[] = {
    {sipName_ClassInstanceDecRef, meth_FbxClassId_ClassInstanceDecRef, METH_VARARGS, doc_FbxClassId_ClassInstanceDecRef},
    {sipName_ClassInstanceIncRef, meth_FbxClassId_ClassInstanceIncRef, METH_VARARGS, doc_FbxClassId_ClassInstanceIncRef},
    {sipName_Create, meth_FbxClassId_Create, METH_VARARGS, doc_FbxClassId_Create},
    {sipName_Destroy, meth_FbxClassId_Destroy, METH_VARARGS, doc_FbxClassId_Destroy},
    {sipName_GetFbxFileSubTypeName, meth_FbxClassId_GetFbxFileSubTypeName, METH_VARARGS, doc_FbxClassId_GetFbxFileSubTypeName},
    {sipName_GetFbxFileTypeName, meth_FbxClassId_GetFbxFileTypeName, METH_VARARGS, doc_FbxClassId_GetFbxFileTypeName},
    {sipName_GetInstanceRef, meth_FbxClassId_GetInstanceRef, METH_VARARGS, doc_FbxClassId_GetInstanceRef},
    {sipName_GetName, meth_FbxClassId_GetName, METH_VARARGS, doc_FbxClassId_GetName},
    {sipName_GetObjectTypePrefix, meth_FbxClassId_GetObjectTypePrefix, METH_VARARGS, doc_FbxClassId_GetObjectTypePrefix},
    {sipName_GetParent, meth_FbxClassId_GetParent, METH_VARARGS, doc_FbxClassId_GetParent},
    {sipName_Is, meth_FbxClassId_Is, METH_VARARGS, doc_FbxClassId_Is},
    {sipName_IsValid, meth_FbxClassId_IsValid, METH_VARARGS, doc_FbxClassId_IsValid},
    {sipName_SetObjectTypePrefix, meth_FbxClassId_SetObjectTypePrefix, METH_VARARGS, doc_FbxClassId_SetObjectTypePrefix}
};

PyDoc_STRVAR(doc_FbxClassId, "\1FbxClassId()\n"
"FbxClassId(FbxClassId)");


sipClassTypeDef sipTypeDef_fbx_FbxClassId = {
    {
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_FbxClassId,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxClassId,
        {0, 0, 1},
        13, methods_FbxClassId,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_FbxClassId,
    -1,
    -1,
    SIP_NULLPTR,
    slots_FbxClassId,
    init_type_FbxClassId,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_FbxClassId,
    assign_FbxClassId,
    array_FbxClassId,
    copy_FbxClassId,
    release_FbxClassId,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
