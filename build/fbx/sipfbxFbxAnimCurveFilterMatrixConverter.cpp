/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"


#line 4 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxstatus.sip"
#include <fbxsdk.h>
#line 44 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxAnimCurveFilterMatrixConverter.cpp"


class sipFbxAnimCurveFilterMatrixConverter : public  ::FbxAnimCurveFilterMatrixConverter
{
public:
    sipFbxAnimCurveFilterMatrixConverter();
    sipFbxAnimCurveFilterMatrixConverter(const  ::FbxAnimCurveFilterMatrixConverter&);
    virtual ~sipFbxAnimCurveFilterMatrixConverter();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    const char* GetName() const SIP_OVERRIDE;
    bool NeedApply( ::FbxAnimStack*, ::FbxStatus*) SIP_OVERRIDE;
    bool NeedApply( ::FbxObject*, ::FbxAnimStack*, ::FbxStatus*) SIP_OVERRIDE;
    bool NeedApply( ::FbxAnimCurve**,int, ::FbxStatus*) SIP_OVERRIDE;
    bool NeedApply( ::FbxAnimCurve&, ::FbxStatus*) SIP_OVERRIDE;
    bool Apply( ::FbxAnimStack*, ::FbxStatus*) SIP_OVERRIDE;
    bool Apply( ::FbxObject*, ::FbxAnimStack*, ::FbxStatus*) SIP_OVERRIDE;
    bool Apply( ::FbxAnimCurve**,int, ::FbxStatus*) SIP_OVERRIDE;
    bool Apply( ::FbxAnimCurve&, ::FbxStatus*) SIP_OVERRIDE;
    void Reset() SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipFbxAnimCurveFilterMatrixConverter(const sipFbxAnimCurveFilterMatrixConverter &);
    sipFbxAnimCurveFilterMatrixConverter &operator = (const sipFbxAnimCurveFilterMatrixConverter &);

    char sipPyMethods[10];
};

sipFbxAnimCurveFilterMatrixConverter::sipFbxAnimCurveFilterMatrixConverter():  ::FbxAnimCurveFilterMatrixConverter(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipFbxAnimCurveFilterMatrixConverter::sipFbxAnimCurveFilterMatrixConverter(const  ::FbxAnimCurveFilterMatrixConverter& a0):  ::FbxAnimCurveFilterMatrixConverter(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipFbxAnimCurveFilterMatrixConverter::~sipFbxAnimCurveFilterMatrixConverter()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const char* sipFbxAnimCurveFilterMatrixConverter::GetName() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetName);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterMatrixConverter::GetName();

    extern const char* sipVH_fbx_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_fbx_27(sipGILState, 0, sipPySelf, sipMeth, -1490);
}

bool sipFbxAnimCurveFilterMatrixConverter::NeedApply( ::FbxAnimStack*a0, ::FbxStatus*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_NeedApply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterMatrixConverter::NeedApply(a0,a1);

    extern bool sipVH_fbx_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimStack*, ::FbxStatus*);

    return sipVH_fbx_28(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipFbxAnimCurveFilterMatrixConverter::NeedApply( ::FbxObject*a0, ::FbxAnimStack*a1, ::FbxStatus*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_NeedApply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterMatrixConverter::NeedApply(a0,a1,a2);

    extern bool sipVH_fbx_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxObject*, ::FbxAnimStack*, ::FbxStatus*);

    return sipVH_fbx_29(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipFbxAnimCurveFilterMatrixConverter::NeedApply( ::FbxAnimCurve**a0,int a1, ::FbxStatus*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_NeedApply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterMatrixConverter::NeedApply(a0,a1,a2);

    extern bool sipVH_fbx_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimCurve**,int, ::FbxStatus*);

    return sipVH_fbx_31(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipFbxAnimCurveFilterMatrixConverter::NeedApply( ::FbxAnimCurve& a0, ::FbxStatus*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_NeedApply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterMatrixConverter::NeedApply(a0,a1);

    extern bool sipVH_fbx_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimCurve&, ::FbxStatus*);

    return sipVH_fbx_32(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipFbxAnimCurveFilterMatrixConverter::Apply( ::FbxAnimStack*a0, ::FbxStatus*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_Apply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterMatrixConverter::Apply(a0,a1);

    extern bool sipVH_fbx_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimStack*, ::FbxStatus*);

    return sipVH_fbx_28(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipFbxAnimCurveFilterMatrixConverter::Apply( ::FbxObject*a0, ::FbxAnimStack*a1, ::FbxStatus*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_Apply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterMatrixConverter::Apply(a0,a1,a2);

    extern bool sipVH_fbx_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxObject*, ::FbxAnimStack*, ::FbxStatus*);

    return sipVH_fbx_29(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipFbxAnimCurveFilterMatrixConverter::Apply( ::FbxAnimCurve**a0,int a1, ::FbxStatus*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_Apply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterMatrixConverter::Apply(a0,a1,a2);

    extern bool sipVH_fbx_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimCurve**,int, ::FbxStatus*);

    return sipVH_fbx_31(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipFbxAnimCurveFilterMatrixConverter::Apply( ::FbxAnimCurve& a0, ::FbxStatus*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_Apply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterMatrixConverter::Apply(a0,a1);

    extern bool sipVH_fbx_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimCurve&, ::FbxStatus*);

    return sipVH_fbx_32(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipFbxAnimCurveFilterMatrixConverter::Reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_Reset);

    if (!sipMeth)
    {
         ::FbxAnimCurveFilterMatrixConverter::Reset();
        return;
    }

    extern void sipVH_fbx_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_fbx_0(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterMatrixConverter_GetName, "GetName(self) -> str");

extern "C" {static PyObject *meth_FbxAnimCurveFilterMatrixConverter_GetName(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterMatrixConverter_GetName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxAnimCurveFilterMatrixConverter)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp))
        {
            const char*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterMatrixConverter::GetName() : sipCpp->GetName());

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_FromString(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterMatrixConverter, sipName_GetName, doc_FbxAnimCurveFilterMatrixConverter_GetName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterMatrixConverter_NeedApply, "NeedApply(self, int, FbxStatus = None) -> Tuple[bool, FbxAnimCurve]\n"
"NeedApply(self, FbxAnimStack, FbxStatus = None) -> bool\n"
"NeedApply(self, FbxObject, FbxAnimStack, FbxStatus = None) -> bool\n"
"NeedApply(self, FbxAnimCurve, FbxStatus = None) -> bool");

extern "C" {static PyObject *meth_FbxAnimCurveFilterMatrixConverter_NeedApply(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterMatrixConverter_NeedApply(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxAnimCurveFilterMatrixConverter)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxAnimCurve* a0;
        int a1;
         ::FbxStatus* a2 = 0;
         ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|J8", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp, &a1, sipType_FbxStatus, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterMatrixConverter::NeedApply(&a0,a1,a2) : sipCpp->NeedApply(&a0,a1,a2));

            return sipBuildResult(0,"(bD)",sipRes,a0,sipType_FbxAnimCurve,SIP_NULLPTR);
        }
    }

    {
         ::FbxAnimStack* a0;
         ::FbxStatus* a1 = 0;
         ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|J8", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp, sipType_FbxAnimStack, &a0, sipType_FbxStatus, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterMatrixConverter::NeedApply(a0,a1) : sipCpp->NeedApply(a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::FbxObject* a0;
         ::FbxAnimStack* a1;
         ::FbxStatus* a2 = 0;
         ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8|J8", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp, sipType_FbxObject, &a0, sipType_FbxAnimStack, &a1, sipType_FbxStatus, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterMatrixConverter::NeedApply(a0,a1,a2) : sipCpp->NeedApply(a0,a1,a2));

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::FbxAnimCurve* a0;
         ::FbxStatus* a1 = 0;
         ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|J8", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp, sipType_FbxAnimCurve, &a0, sipType_FbxStatus, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterMatrixConverter::NeedApply(*a0,a1) : sipCpp->NeedApply(*a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterMatrixConverter, sipName_NeedApply, doc_FbxAnimCurveFilterMatrixConverter_NeedApply);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterMatrixConverter_Apply, "Apply(self, FbxAnimStack, FbxStatus = None) -> bool\n"
"Apply(self, FbxObject, FbxAnimStack, FbxStatus = None) -> bool\n"
"Apply(self, int, FbxStatus = None) -> Tuple[bool, FbxAnimCurve]\n"
"Apply(self, FbxStatus = None) -> Tuple[bool, FbxAnimCurve, float]\n"
"Apply(self, FbxAnimCurve, FbxStatus = None) -> bool");

extern "C" {static PyObject *meth_FbxAnimCurveFilterMatrixConverter_Apply(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterMatrixConverter_Apply(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxAnimCurveFilterMatrixConverter)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxAnimStack* a0;
         ::FbxStatus* a1 = 0;
         ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|J8", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp, sipType_FbxAnimStack, &a0, sipType_FbxStatus, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterMatrixConverter::Apply(a0,a1) : sipCpp->Apply(a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::FbxObject* a0;
         ::FbxAnimStack* a1;
         ::FbxStatus* a2 = 0;
         ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8|J8", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp, sipType_FbxObject, &a0, sipType_FbxAnimStack, &a1, sipType_FbxStatus, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterMatrixConverter::Apply(a0,a1,a2) : sipCpp->Apply(a0,a1,a2));

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::FbxAnimCurve* a0;
        int a1;
         ::FbxStatus* a2 = 0;
         ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|J8", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp, &a1, sipType_FbxStatus, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterMatrixConverter::Apply(&a0,a1,a2) : sipCpp->Apply(&a0,a1,a2));

            return sipBuildResult(0,"(bD)",sipRes,a0,sipType_FbxAnimCurve,SIP_NULLPTR);
        }
    }

    {
         ::FbxAnimCurve* a0;
        double a1;
         ::FbxStatus* a2 = 0;
         ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J8", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp, sipType_FbxStatus, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->Apply(&a0,&a1,a2);

            return sipBuildResult(0,"(bDd)",sipRes,a0,sipType_FbxAnimCurve,SIP_NULLPTR,a1);
        }
    }

    {
         ::FbxAnimCurve* a0;
         ::FbxStatus* a1 = 0;
         ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|J8", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp, sipType_FbxAnimCurve, &a0, sipType_FbxStatus, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterMatrixConverter::Apply(*a0,a1) : sipCpp->Apply(*a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterMatrixConverter, sipName_Apply, doc_FbxAnimCurveFilterMatrixConverter_Apply);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterMatrixConverter_Reset, "Reset(self)");

extern "C" {static PyObject *meth_FbxAnimCurveFilterMatrixConverter_Reset(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterMatrixConverter_Reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxAnimCurveFilterMatrixConverter)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterMatrixConverter::Reset() : sipCpp->Reset());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterMatrixConverter, sipName_Reset, doc_FbxAnimCurveFilterMatrixConverter_Reset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterMatrixConverter_GetSourceMatrix, "GetSourceMatrix(self, FbxAnimCurveFilterMatrixConverter.EMatrixIndex, FbxAMatrix)");

extern "C" {static PyObject *meth_FbxAnimCurveFilterMatrixConverter_GetSourceMatrix(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterMatrixConverter_GetSourceMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxAnimCurveFilterMatrixConverter::EMatrixIndex a0;
         ::FbxAMatrix* a1;
        const  ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp, sipType_FbxAnimCurveFilterMatrixConverter_EMatrixIndex, &a0, sipType_FbxAMatrix, &a1))
        {
            sipCpp->GetSourceMatrix(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterMatrixConverter, sipName_GetSourceMatrix, doc_FbxAnimCurveFilterMatrixConverter_GetSourceMatrix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterMatrixConverter_SetSourceMatrix, "SetSourceMatrix(self, FbxAnimCurveFilterMatrixConverter.EMatrixIndex, FbxAMatrix)");

extern "C" {static PyObject *meth_FbxAnimCurveFilterMatrixConverter_SetSourceMatrix(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterMatrixConverter_SetSourceMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxAnimCurveFilterMatrixConverter::EMatrixIndex a0;
         ::FbxAMatrix* a1;
         ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp, sipType_FbxAnimCurveFilterMatrixConverter_EMatrixIndex, &a0, sipType_FbxAMatrix, &a1))
        {
            sipCpp->SetSourceMatrix(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterMatrixConverter, sipName_SetSourceMatrix, doc_FbxAnimCurveFilterMatrixConverter_SetSourceMatrix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterMatrixConverter_GetDestMatrix, "GetDestMatrix(self, FbxAnimCurveFilterMatrixConverter.EMatrixIndex, FbxAMatrix)");

extern "C" {static PyObject *meth_FbxAnimCurveFilterMatrixConverter_GetDestMatrix(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterMatrixConverter_GetDestMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxAnimCurveFilterMatrixConverter::EMatrixIndex a0;
         ::FbxAMatrix* a1;
        const  ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp, sipType_FbxAnimCurveFilterMatrixConverter_EMatrixIndex, &a0, sipType_FbxAMatrix, &a1))
        {
            sipCpp->GetDestMatrix(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterMatrixConverter, sipName_GetDestMatrix, doc_FbxAnimCurveFilterMatrixConverter_GetDestMatrix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterMatrixConverter_SetDestMatrix, "SetDestMatrix(self, FbxAnimCurveFilterMatrixConverter.EMatrixIndex, FbxAMatrix)");

extern "C" {static PyObject *meth_FbxAnimCurveFilterMatrixConverter_SetDestMatrix(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterMatrixConverter_SetDestMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxAnimCurveFilterMatrixConverter::EMatrixIndex a0;
         ::FbxAMatrix* a1;
         ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp, sipType_FbxAnimCurveFilterMatrixConverter_EMatrixIndex, &a0, sipType_FbxAMatrix, &a1))
        {
            sipCpp->SetDestMatrix(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterMatrixConverter, sipName_SetDestMatrix, doc_FbxAnimCurveFilterMatrixConverter_SetDestMatrix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterMatrixConverter_GetResamplingPeriod, "GetResamplingPeriod(self) -> FbxTime");

extern "C" {static PyObject *meth_FbxAnimCurveFilterMatrixConverter_GetResamplingPeriod(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterMatrixConverter_GetResamplingPeriod(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp))
        {
             ::FbxTime*sipRes;

            sipRes = new  ::FbxTime(sipCpp->GetResamplingPeriod());

            return sipConvertFromNewType(sipRes,sipType_FbxTime,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterMatrixConverter, sipName_GetResamplingPeriod, doc_FbxAnimCurveFilterMatrixConverter_GetResamplingPeriod);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterMatrixConverter_SetResamplingPeriod, "SetResamplingPeriod(self, FbxTime)");

extern "C" {static PyObject *meth_FbxAnimCurveFilterMatrixConverter_SetResamplingPeriod(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterMatrixConverter_SetResamplingPeriod(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxTime* a0;
         ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp, sipType_FbxTime, &a0))
        {
            sipCpp->SetResamplingPeriod(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterMatrixConverter, sipName_SetResamplingPeriod, doc_FbxAnimCurveFilterMatrixConverter_SetResamplingPeriod);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterMatrixConverter_GetGenerateLastKeyExactlyAtEndTime, "GetGenerateLastKeyExactlyAtEndTime(self) -> bool");

extern "C" {static PyObject *meth_FbxAnimCurveFilterMatrixConverter_GetGenerateLastKeyExactlyAtEndTime(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterMatrixConverter_GetGenerateLastKeyExactlyAtEndTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetGenerateLastKeyExactlyAtEndTime();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterMatrixConverter, sipName_GetGenerateLastKeyExactlyAtEndTime, doc_FbxAnimCurveFilterMatrixConverter_GetGenerateLastKeyExactlyAtEndTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterMatrixConverter_SetGenerateLastKeyExactlyAtEndTime, "SetGenerateLastKeyExactlyAtEndTime(self, bool)");

extern "C" {static PyObject *meth_FbxAnimCurveFilterMatrixConverter_SetGenerateLastKeyExactlyAtEndTime(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterMatrixConverter_SetGenerateLastKeyExactlyAtEndTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp, &a0))
        {
            sipCpp->SetGenerateLastKeyExactlyAtEndTime(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterMatrixConverter, sipName_SetGenerateLastKeyExactlyAtEndTime, doc_FbxAnimCurveFilterMatrixConverter_SetGenerateLastKeyExactlyAtEndTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterMatrixConverter_GetResamplingOnFrameRateMultiple, "GetResamplingOnFrameRateMultiple(self) -> bool");

extern "C" {static PyObject *meth_FbxAnimCurveFilterMatrixConverter_GetResamplingOnFrameRateMultiple(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterMatrixConverter_GetResamplingOnFrameRateMultiple(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetResamplingOnFrameRateMultiple();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterMatrixConverter, sipName_GetResamplingOnFrameRateMultiple, doc_FbxAnimCurveFilterMatrixConverter_GetResamplingOnFrameRateMultiple);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterMatrixConverter_SetResamplingOnFrameRateMultiple, "SetResamplingOnFrameRateMultiple(self, bool)");

extern "C" {static PyObject *meth_FbxAnimCurveFilterMatrixConverter_SetResamplingOnFrameRateMultiple(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterMatrixConverter_SetResamplingOnFrameRateMultiple(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp, &a0))
        {
            sipCpp->SetResamplingOnFrameRateMultiple(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterMatrixConverter, sipName_SetResamplingOnFrameRateMultiple, doc_FbxAnimCurveFilterMatrixConverter_SetResamplingOnFrameRateMultiple);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterMatrixConverter_GetApplyUnroll, "GetApplyUnroll(self) -> bool");

extern "C" {static PyObject *meth_FbxAnimCurveFilterMatrixConverter_GetApplyUnroll(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterMatrixConverter_GetApplyUnroll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetApplyUnroll();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterMatrixConverter, sipName_GetApplyUnroll, doc_FbxAnimCurveFilterMatrixConverter_GetApplyUnroll);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterMatrixConverter_SetApplyUnroll, "SetApplyUnroll(self, bool)");

extern "C" {static PyObject *meth_FbxAnimCurveFilterMatrixConverter_SetApplyUnroll(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterMatrixConverter_SetApplyUnroll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp, &a0))
        {
            sipCpp->SetApplyUnroll(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterMatrixConverter, sipName_SetApplyUnroll, doc_FbxAnimCurveFilterMatrixConverter_SetApplyUnroll);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterMatrixConverter_GetApplyConstantKeyReducer, "GetApplyConstantKeyReducer(self) -> bool");

extern "C" {static PyObject *meth_FbxAnimCurveFilterMatrixConverter_GetApplyConstantKeyReducer(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterMatrixConverter_GetApplyConstantKeyReducer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetApplyConstantKeyReducer();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterMatrixConverter, sipName_GetApplyConstantKeyReducer, doc_FbxAnimCurveFilterMatrixConverter_GetApplyConstantKeyReducer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterMatrixConverter_SetApplyConstantKeyReducer, "SetApplyConstantKeyReducer(self, bool)");

extern "C" {static PyObject *meth_FbxAnimCurveFilterMatrixConverter_SetApplyConstantKeyReducer(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterMatrixConverter_SetApplyConstantKeyReducer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp, &a0))
        {
            sipCpp->SetApplyConstantKeyReducer(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterMatrixConverter, sipName_SetApplyConstantKeyReducer, doc_FbxAnimCurveFilterMatrixConverter_SetApplyConstantKeyReducer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterMatrixConverter_GetResampleTranslation, "GetResampleTranslation(self) -> bool");

extern "C" {static PyObject *meth_FbxAnimCurveFilterMatrixConverter_GetResampleTranslation(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterMatrixConverter_GetResampleTranslation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetResampleTranslation();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterMatrixConverter, sipName_GetResampleTranslation, doc_FbxAnimCurveFilterMatrixConverter_GetResampleTranslation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterMatrixConverter_SetResampleTranslation, "SetResampleTranslation(self, bool)");

extern "C" {static PyObject *meth_FbxAnimCurveFilterMatrixConverter_SetResampleTranslation(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterMatrixConverter_SetResampleTranslation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp, &a0))
        {
            sipCpp->SetResampleTranslation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterMatrixConverter, sipName_SetResampleTranslation, doc_FbxAnimCurveFilterMatrixConverter_SetResampleTranslation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterMatrixConverter_SetSrcRotateOrder, "SetSrcRotateOrder(self, FbxEuler.EOrder)");

extern "C" {static PyObject *meth_FbxAnimCurveFilterMatrixConverter_SetSrcRotateOrder(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterMatrixConverter_SetSrcRotateOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxEuler::EOrder a0;
         ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp, sipType_FbxEuler_EOrder, &a0))
        {
            sipCpp->SetSrcRotateOrder(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterMatrixConverter, sipName_SetSrcRotateOrder, doc_FbxAnimCurveFilterMatrixConverter_SetSrcRotateOrder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterMatrixConverter_SetDestRotateOrder, "SetDestRotateOrder(self, FbxEuler.EOrder)");

extern "C" {static PyObject *meth_FbxAnimCurveFilterMatrixConverter_SetDestRotateOrder(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterMatrixConverter_SetDestRotateOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxEuler::EOrder a0;
         ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp, sipType_FbxEuler_EOrder, &a0))
        {
            sipCpp->SetDestRotateOrder(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterMatrixConverter, sipName_SetDestRotateOrder, doc_FbxAnimCurveFilterMatrixConverter_SetDestRotateOrder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterMatrixConverter_SetForceApply, "SetForceApply(self, bool)");

extern "C" {static PyObject *meth_FbxAnimCurveFilterMatrixConverter_SetForceApply(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterMatrixConverter_SetForceApply(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp, &a0))
        {
            sipCpp->SetForceApply(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterMatrixConverter, sipName_SetForceApply, doc_FbxAnimCurveFilterMatrixConverter_SetForceApply);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterMatrixConverter_GetForceApply, "GetForceApply(self) -> bool");

extern "C" {static PyObject *meth_FbxAnimCurveFilterMatrixConverter_GetForceApply(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterMatrixConverter_GetForceApply(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxAnimCurveFilterMatrixConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveFilterMatrixConverter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetForceApply();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterMatrixConverter, sipName_GetForceApply, doc_FbxAnimCurveFilterMatrixConverter_GetForceApply);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxAnimCurveFilterMatrixConverter(void *, const sipTypeDef *);}
static void *cast_FbxAnimCurveFilterMatrixConverter(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxAnimCurveFilterMatrixConverter *sipCpp = reinterpret_cast< ::FbxAnimCurveFilterMatrixConverter *>(sipCppV);

    if (targetType == sipType_FbxAnimCurveFilterMatrixConverter)
        return sipCppV;

    if (targetType == sipType_FbxAnimCurveFilter)
        return static_cast< ::FbxAnimCurveFilter *>(sipCpp);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxAnimCurveFilterMatrixConverter(void *, int);}
static void release_FbxAnimCurveFilterMatrixConverter(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipFbxAnimCurveFilterMatrixConverter *>(sipCppV);
    else
        delete reinterpret_cast< ::FbxAnimCurveFilterMatrixConverter *>(sipCppV);
}


extern "C" {static void *array_FbxAnimCurveFilterMatrixConverter(Py_ssize_t);}
static void *array_FbxAnimCurveFilterMatrixConverter(Py_ssize_t sipNrElem)
{
    return new  ::FbxAnimCurveFilterMatrixConverter[sipNrElem];
}


extern "C" {static void assign_FbxAnimCurveFilterMatrixConverter(void *, Py_ssize_t, void *);}
static void assign_FbxAnimCurveFilterMatrixConverter(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::FbxAnimCurveFilterMatrixConverter *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::FbxAnimCurveFilterMatrixConverter *>(sipSrc);
}


extern "C" {static void *copy_FbxAnimCurveFilterMatrixConverter(const void *, Py_ssize_t);}
static void *copy_FbxAnimCurveFilterMatrixConverter(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::FbxAnimCurveFilterMatrixConverter(reinterpret_cast<const  ::FbxAnimCurveFilterMatrixConverter *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxAnimCurveFilterMatrixConverter(sipSimpleWrapper *);}
static void dealloc_FbxAnimCurveFilterMatrixConverter(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipFbxAnimCurveFilterMatrixConverter *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxAnimCurveFilterMatrixConverter(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_FbxAnimCurveFilterMatrixConverter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxAnimCurveFilterMatrixConverter(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipFbxAnimCurveFilterMatrixConverter *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipFbxAnimCurveFilterMatrixConverter();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::FbxAnimCurveFilterMatrixConverter* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_FbxAnimCurveFilterMatrixConverter, &a0))
        {
            sipCpp = new sipFbxAnimCurveFilterMatrixConverter(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxAnimCurveFilterMatrixConverter[] = {{17, 255, 1}};


static PyMethodDef methods_FbxAnimCurveFilterMatrixConverter[] = {
    {sipName_Apply, meth_FbxAnimCurveFilterMatrixConverter_Apply, METH_VARARGS, doc_FbxAnimCurveFilterMatrixConverter_Apply},
    {sipName_GetApplyConstantKeyReducer, meth_FbxAnimCurveFilterMatrixConverter_GetApplyConstantKeyReducer, METH_VARARGS, doc_FbxAnimCurveFilterMatrixConverter_GetApplyConstantKeyReducer},
    {sipName_GetApplyUnroll, meth_FbxAnimCurveFilterMatrixConverter_GetApplyUnroll, METH_VARARGS, doc_FbxAnimCurveFilterMatrixConverter_GetApplyUnroll},
    {sipName_GetDestMatrix, meth_FbxAnimCurveFilterMatrixConverter_GetDestMatrix, METH_VARARGS, doc_FbxAnimCurveFilterMatrixConverter_GetDestMatrix},
    {sipName_GetForceApply, meth_FbxAnimCurveFilterMatrixConverter_GetForceApply, METH_VARARGS, doc_FbxAnimCurveFilterMatrixConverter_GetForceApply},
    {sipName_GetGenerateLastKeyExactlyAtEndTime, meth_FbxAnimCurveFilterMatrixConverter_GetGenerateLastKeyExactlyAtEndTime, METH_VARARGS, doc_FbxAnimCurveFilterMatrixConverter_GetGenerateLastKeyExactlyAtEndTime},
    {sipName_GetName, meth_FbxAnimCurveFilterMatrixConverter_GetName, METH_VARARGS, doc_FbxAnimCurveFilterMatrixConverter_GetName},
    {sipName_GetResampleTranslation, meth_FbxAnimCurveFilterMatrixConverter_GetResampleTranslation, METH_VARARGS, doc_FbxAnimCurveFilterMatrixConverter_GetResampleTranslation},
    {sipName_GetResamplingOnFrameRateMultiple, meth_FbxAnimCurveFilterMatrixConverter_GetResamplingOnFrameRateMultiple, METH_VARARGS, doc_FbxAnimCurveFilterMatrixConverter_GetResamplingOnFrameRateMultiple},
    {sipName_GetResamplingPeriod, meth_FbxAnimCurveFilterMatrixConverter_GetResamplingPeriod, METH_VARARGS, doc_FbxAnimCurveFilterMatrixConverter_GetResamplingPeriod},
    {sipName_GetSourceMatrix, meth_FbxAnimCurveFilterMatrixConverter_GetSourceMatrix, METH_VARARGS, doc_FbxAnimCurveFilterMatrixConverter_GetSourceMatrix},
    {sipName_NeedApply, meth_FbxAnimCurveFilterMatrixConverter_NeedApply, METH_VARARGS, doc_FbxAnimCurveFilterMatrixConverter_NeedApply},
    {sipName_Reset, meth_FbxAnimCurveFilterMatrixConverter_Reset, METH_VARARGS, doc_FbxAnimCurveFilterMatrixConverter_Reset},
    {sipName_SetApplyConstantKeyReducer, meth_FbxAnimCurveFilterMatrixConverter_SetApplyConstantKeyReducer, METH_VARARGS, doc_FbxAnimCurveFilterMatrixConverter_SetApplyConstantKeyReducer},
    {sipName_SetApplyUnroll, meth_FbxAnimCurveFilterMatrixConverter_SetApplyUnroll, METH_VARARGS, doc_FbxAnimCurveFilterMatrixConverter_SetApplyUnroll},
    {sipName_SetDestMatrix, meth_FbxAnimCurveFilterMatrixConverter_SetDestMatrix, METH_VARARGS, doc_FbxAnimCurveFilterMatrixConverter_SetDestMatrix},
    {sipName_SetDestRotateOrder, meth_FbxAnimCurveFilterMatrixConverter_SetDestRotateOrder, METH_VARARGS, doc_FbxAnimCurveFilterMatrixConverter_SetDestRotateOrder},
    {sipName_SetForceApply, meth_FbxAnimCurveFilterMatrixConverter_SetForceApply, METH_VARARGS, doc_FbxAnimCurveFilterMatrixConverter_SetForceApply},
    {sipName_SetGenerateLastKeyExactlyAtEndTime, meth_FbxAnimCurveFilterMatrixConverter_SetGenerateLastKeyExactlyAtEndTime, METH_VARARGS, doc_FbxAnimCurveFilterMatrixConverter_SetGenerateLastKeyExactlyAtEndTime},
    {sipName_SetResampleTranslation, meth_FbxAnimCurveFilterMatrixConverter_SetResampleTranslation, METH_VARARGS, doc_FbxAnimCurveFilterMatrixConverter_SetResampleTranslation},
    {sipName_SetResamplingOnFrameRateMultiple, meth_FbxAnimCurveFilterMatrixConverter_SetResamplingOnFrameRateMultiple, METH_VARARGS, doc_FbxAnimCurveFilterMatrixConverter_SetResamplingOnFrameRateMultiple},
    {sipName_SetResamplingPeriod, meth_FbxAnimCurveFilterMatrixConverter_SetResamplingPeriod, METH_VARARGS, doc_FbxAnimCurveFilterMatrixConverter_SetResamplingPeriod},
    {sipName_SetSourceMatrix, meth_FbxAnimCurveFilterMatrixConverter_SetSourceMatrix, METH_VARARGS, doc_FbxAnimCurveFilterMatrixConverter_SetSourceMatrix},
    {sipName_SetSrcRotateOrder, meth_FbxAnimCurveFilterMatrixConverter_SetSrcRotateOrder, METH_VARARGS, doc_FbxAnimCurveFilterMatrixConverter_SetSrcRotateOrder}
};


/* Define the enum members and ints to be added to this type. */
static sipIntInstanceDef intInstances_FbxAnimCurveFilterMatrixConverter[] = {
    {sipName_ePreGlobal, static_cast<int>( ::FbxAnimCurveFilterMatrixConverter::ePreGlobal)},
    {sipName_ePreTranslate, static_cast<int>( ::FbxAnimCurveFilterMatrixConverter::ePreTranslate)},
    {sipName_ePostTranslate, static_cast<int>( ::FbxAnimCurveFilterMatrixConverter::ePostTranslate)},
    {sipName_ePreRotate, static_cast<int>( ::FbxAnimCurveFilterMatrixConverter::ePreRotate)},
    {sipName_ePostRotate, static_cast<int>( ::FbxAnimCurveFilterMatrixConverter::ePostRotate)},
    {sipName_ePreScale, static_cast<int>( ::FbxAnimCurveFilterMatrixConverter::ePreScale)},
    {sipName_ePostScale, static_cast<int>( ::FbxAnimCurveFilterMatrixConverter::ePostScale)},
    {sipName_ePostGlobal, static_cast<int>( ::FbxAnimCurveFilterMatrixConverter::ePostGlobal)},
    {sipName_eScaleOffset, static_cast<int>( ::FbxAnimCurveFilterMatrixConverter::eScaleOffset)},
    {sipName_eInactivePre, static_cast<int>( ::FbxAnimCurveFilterMatrixConverter::eInactivePre)},
    {sipName_eInactivePost, static_cast<int>( ::FbxAnimCurveFilterMatrixConverter::eInactivePost)},
    {sipName_eRotationPivot, static_cast<int>( ::FbxAnimCurveFilterMatrixConverter::eRotationPivot)},
    {sipName_eScalingPivot, static_cast<int>( ::FbxAnimCurveFilterMatrixConverter::eScalingPivot)},
    {sipName_eMatrixIndexCount, static_cast<int>( ::FbxAnimCurveFilterMatrixConverter::eMatrixIndexCount)},
    {0, 0}
};

PyDoc_STRVAR(doc_FbxAnimCurveFilterMatrixConverter, "\1FbxAnimCurveFilterMatrixConverter()\n"
"FbxAnimCurveFilterMatrixConverter(FbxAnimCurveFilterMatrixConverter)");


sipClassTypeDef sipTypeDef_fbx_FbxAnimCurveFilterMatrixConverter = {
    {
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_FbxAnimCurveFilterMatrixConverter,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxAnimCurveFilterMatrixConverter,
        {0, 0, 1},
        24, methods_FbxAnimCurveFilterMatrixConverter,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, intInstances_FbxAnimCurveFilterMatrixConverter, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_FbxAnimCurveFilterMatrixConverter,
    -1,
    -1,
    supers_FbxAnimCurveFilterMatrixConverter,
    SIP_NULLPTR,
    init_type_FbxAnimCurveFilterMatrixConverter,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_FbxAnimCurveFilterMatrixConverter,
    assign_FbxAnimCurveFilterMatrixConverter,
    array_FbxAnimCurveFilterMatrixConverter,
    copy_FbxAnimCurveFilterMatrixConverter,
    release_FbxAnimCurveFilterMatrixConverter,
    cast_FbxAnimCurveFilterMatrixConverter,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
