/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxLimits_GetActive, "GetActive(self) -> bool");

extern "C" {static PyObject *meth_FbxLimits_GetActive(PyObject *, PyObject *);}
static PyObject *meth_FbxLimits_GetActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxLimits *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLimits, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetActive();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLimits, sipName_GetActive, doc_FbxLimits_GetActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLimits_SetActive, "SetActive(self, bool)");

extern "C" {static PyObject *meth_FbxLimits_SetActive(PyObject *, PyObject *);}
static PyObject *meth_FbxLimits_SetActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::FbxLimits *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxLimits, &sipCpp, &a0))
        {
            sipCpp->SetActive(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLimits, sipName_SetActive, doc_FbxLimits_SetActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLimits_GetMinXActive, "GetMinXActive(self) -> bool");

extern "C" {static PyObject *meth_FbxLimits_GetMinXActive(PyObject *, PyObject *);}
static PyObject *meth_FbxLimits_GetMinXActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxLimits *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLimits, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetMinXActive();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLimits, sipName_GetMinXActive, doc_FbxLimits_GetMinXActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLimits_GetMinYActive, "GetMinYActive(self) -> bool");

extern "C" {static PyObject *meth_FbxLimits_GetMinYActive(PyObject *, PyObject *);}
static PyObject *meth_FbxLimits_GetMinYActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxLimits *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLimits, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetMinYActive();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLimits, sipName_GetMinYActive, doc_FbxLimits_GetMinYActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLimits_GetMinZActive, "GetMinZActive(self) -> bool");

extern "C" {static PyObject *meth_FbxLimits_GetMinZActive(PyObject *, PyObject *);}
static PyObject *meth_FbxLimits_GetMinZActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxLimits *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLimits, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetMinZActive();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLimits, sipName_GetMinZActive, doc_FbxLimits_GetMinZActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLimits_GetMinActive, "GetMinActive(self) -> Tuple[bool, bool, bool]");

extern "C" {static PyObject *meth_FbxLimits_GetMinActive(PyObject *, PyObject *);}
static PyObject *meth_FbxLimits_GetMinActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        bool a1;
        bool a2;
        const  ::FbxLimits *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLimits, &sipCpp))
        {
            sipCpp->GetMinActive(a0,a1,a2);

            return sipBuildResult(0,"(bbb)",a0,a1,a2);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLimits, sipName_GetMinActive, doc_FbxLimits_GetMinActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLimits_GetMin, "GetMin(self) -> FbxDouble3");

extern "C" {static PyObject *meth_FbxLimits_GetMin(PyObject *, PyObject *);}
static PyObject *meth_FbxLimits_GetMin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxLimits *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLimits, &sipCpp))
        {
             ::FbxDouble3*sipRes;

            sipRes = new  ::FbxDouble3(sipCpp->GetMin());

            return sipConvertFromNewType(sipRes,sipType_FbxDouble3,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLimits, sipName_GetMin, doc_FbxLimits_GetMin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLimits_SetMinXActive, "SetMinXActive(self, bool)");

extern "C" {static PyObject *meth_FbxLimits_SetMinXActive(PyObject *, PyObject *);}
static PyObject *meth_FbxLimits_SetMinXActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::FbxLimits *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxLimits, &sipCpp, &a0))
        {
            sipCpp->SetMinXActive(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLimits, sipName_SetMinXActive, doc_FbxLimits_SetMinXActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLimits_SetMinYActive, "SetMinYActive(self, bool)");

extern "C" {static PyObject *meth_FbxLimits_SetMinYActive(PyObject *, PyObject *);}
static PyObject *meth_FbxLimits_SetMinYActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::FbxLimits *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxLimits, &sipCpp, &a0))
        {
            sipCpp->SetMinYActive(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLimits, sipName_SetMinYActive, doc_FbxLimits_SetMinYActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLimits_SetMinZActive, "SetMinZActive(self, bool)");

extern "C" {static PyObject *meth_FbxLimits_SetMinZActive(PyObject *, PyObject *);}
static PyObject *meth_FbxLimits_SetMinZActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::FbxLimits *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxLimits, &sipCpp, &a0))
        {
            sipCpp->SetMinZActive(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLimits, sipName_SetMinZActive, doc_FbxLimits_SetMinZActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLimits_SetMinActive, "SetMinActive(self, bool, bool, bool)");

extern "C" {static PyObject *meth_FbxLimits_SetMinActive(PyObject *, PyObject *);}
static PyObject *meth_FbxLimits_SetMinActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        bool a1;
        bool a2;
         ::FbxLimits *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bbbb", &sipSelf, sipType_FbxLimits, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->SetMinActive(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLimits, sipName_SetMinActive, doc_FbxLimits_SetMinActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLimits_SetMin, "SetMin(self, FbxDouble3)");

extern "C" {static PyObject *meth_FbxLimits_SetMin(PyObject *, PyObject *);}
static PyObject *meth_FbxLimits_SetMin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxDouble3* a0;
         ::FbxLimits *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxLimits, &sipCpp, sipType_FbxDouble3, &a0))
        {
            sipCpp->SetMin(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLimits, sipName_SetMin, doc_FbxLimits_SetMin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLimits_GetMaxXActive, "GetMaxXActive(self) -> bool");

extern "C" {static PyObject *meth_FbxLimits_GetMaxXActive(PyObject *, PyObject *);}
static PyObject *meth_FbxLimits_GetMaxXActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxLimits *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLimits, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetMaxXActive();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLimits, sipName_GetMaxXActive, doc_FbxLimits_GetMaxXActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLimits_GetMaxYActive, "GetMaxYActive(self) -> bool");

extern "C" {static PyObject *meth_FbxLimits_GetMaxYActive(PyObject *, PyObject *);}
static PyObject *meth_FbxLimits_GetMaxYActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxLimits *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLimits, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetMaxYActive();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLimits, sipName_GetMaxYActive, doc_FbxLimits_GetMaxYActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLimits_GetMaxZActive, "GetMaxZActive(self) -> bool");

extern "C" {static PyObject *meth_FbxLimits_GetMaxZActive(PyObject *, PyObject *);}
static PyObject *meth_FbxLimits_GetMaxZActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxLimits *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLimits, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetMaxZActive();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLimits, sipName_GetMaxZActive, doc_FbxLimits_GetMaxZActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLimits_GetMaxActive, "GetMaxActive(self) -> Tuple[bool, bool, bool]");

extern "C" {static PyObject *meth_FbxLimits_GetMaxActive(PyObject *, PyObject *);}
static PyObject *meth_FbxLimits_GetMaxActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        bool a1;
        bool a2;
        const  ::FbxLimits *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLimits, &sipCpp))
        {
            sipCpp->GetMaxActive(a0,a1,a2);

            return sipBuildResult(0,"(bbb)",a0,a1,a2);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLimits, sipName_GetMaxActive, doc_FbxLimits_GetMaxActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLimits_GetMax, "GetMax(self) -> FbxDouble3");

extern "C" {static PyObject *meth_FbxLimits_GetMax(PyObject *, PyObject *);}
static PyObject *meth_FbxLimits_GetMax(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxLimits *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLimits, &sipCpp))
        {
             ::FbxDouble3*sipRes;

            sipRes = new  ::FbxDouble3(sipCpp->GetMax());

            return sipConvertFromNewType(sipRes,sipType_FbxDouble3,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLimits, sipName_GetMax, doc_FbxLimits_GetMax);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLimits_SetMaxXActive, "SetMaxXActive(self, bool)");

extern "C" {static PyObject *meth_FbxLimits_SetMaxXActive(PyObject *, PyObject *);}
static PyObject *meth_FbxLimits_SetMaxXActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::FbxLimits *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxLimits, &sipCpp, &a0))
        {
            sipCpp->SetMaxXActive(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLimits, sipName_SetMaxXActive, doc_FbxLimits_SetMaxXActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLimits_SetMaxYActive, "SetMaxYActive(self, bool)");

extern "C" {static PyObject *meth_FbxLimits_SetMaxYActive(PyObject *, PyObject *);}
static PyObject *meth_FbxLimits_SetMaxYActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::FbxLimits *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxLimits, &sipCpp, &a0))
        {
            sipCpp->SetMaxYActive(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLimits, sipName_SetMaxYActive, doc_FbxLimits_SetMaxYActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLimits_SetMaxZActive, "SetMaxZActive(self, bool)");

extern "C" {static PyObject *meth_FbxLimits_SetMaxZActive(PyObject *, PyObject *);}
static PyObject *meth_FbxLimits_SetMaxZActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::FbxLimits *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxLimits, &sipCpp, &a0))
        {
            sipCpp->SetMaxZActive(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLimits, sipName_SetMaxZActive, doc_FbxLimits_SetMaxZActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLimits_SetMaxActive, "SetMaxActive(self, bool, bool, bool)");

extern "C" {static PyObject *meth_FbxLimits_SetMaxActive(PyObject *, PyObject *);}
static PyObject *meth_FbxLimits_SetMaxActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        bool a1;
        bool a2;
         ::FbxLimits *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bbbb", &sipSelf, sipType_FbxLimits, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->SetMaxActive(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLimits, sipName_SetMaxActive, doc_FbxLimits_SetMaxActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLimits_SetMax, "SetMax(self, FbxDouble3)");

extern "C" {static PyObject *meth_FbxLimits_SetMax(PyObject *, PyObject *);}
static PyObject *meth_FbxLimits_SetMax(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxDouble3* a0;
         ::FbxLimits *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxLimits, &sipCpp, sipType_FbxDouble3, &a0))
        {
            sipCpp->SetMax(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLimits, sipName_SetMax, doc_FbxLimits_SetMax);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLimits_GetAnyMinMaxActive, "GetAnyMinMaxActive(self) -> bool");

extern "C" {static PyObject *meth_FbxLimits_GetAnyMinMaxActive(PyObject *, PyObject *);}
static PyObject *meth_FbxLimits_GetAnyMinMaxActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxLimits *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLimits, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetAnyMinMaxActive();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLimits, sipName_GetAnyMinMaxActive, doc_FbxLimits_GetAnyMinMaxActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLimits_Apply, "Apply(self, FbxDouble3) -> FbxDouble3");

extern "C" {static PyObject *meth_FbxLimits_Apply(PyObject *, PyObject *);}
static PyObject *meth_FbxLimits_Apply(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxDouble3* a0;
         ::FbxLimits *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxLimits, &sipCpp, sipType_FbxDouble3, &a0))
        {
             ::FbxDouble3*sipRes;

            sipRes = new  ::FbxDouble3(sipCpp->Apply(*a0));

            return sipConvertFromNewType(sipRes,sipType_FbxDouble3,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLimits, sipName_Apply, doc_FbxLimits_Apply);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxLimits(void *, int);}
static void release_FbxLimits(void *sipCppV, int)
{
    delete reinterpret_cast< ::FbxLimits *>(sipCppV);
}


extern "C" {static void *array_FbxLimits(Py_ssize_t);}
static void *array_FbxLimits(Py_ssize_t sipNrElem)
{
    return new  ::FbxLimits[sipNrElem];
}


extern "C" {static void assign_FbxLimits(void *, Py_ssize_t, void *);}
static void assign_FbxLimits(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::FbxLimits *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::FbxLimits *>(sipSrc);
}


extern "C" {static void *copy_FbxLimits(const void *, Py_ssize_t);}
static void *copy_FbxLimits(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::FbxLimits(reinterpret_cast<const  ::FbxLimits *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxLimits(sipSimpleWrapper *);}
static void dealloc_FbxLimits(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxLimits(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_FbxLimits(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxLimits(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::FbxLimits *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::FbxLimits();

            return sipCpp;
        }
    }

    {
        const  ::FbxLimits* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_FbxLimits, &a0))
        {
            sipCpp = new  ::FbxLimits(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_FbxLimits[] = {
    {sipName_Apply, meth_FbxLimits_Apply, METH_VARARGS, doc_FbxLimits_Apply},
    {sipName_GetActive, meth_FbxLimits_GetActive, METH_VARARGS, doc_FbxLimits_GetActive},
    {sipName_GetAnyMinMaxActive, meth_FbxLimits_GetAnyMinMaxActive, METH_VARARGS, doc_FbxLimits_GetAnyMinMaxActive},
    {sipName_GetMax, meth_FbxLimits_GetMax, METH_VARARGS, doc_FbxLimits_GetMax},
    {sipName_GetMaxActive, meth_FbxLimits_GetMaxActive, METH_VARARGS, doc_FbxLimits_GetMaxActive},
    {sipName_GetMaxXActive, meth_FbxLimits_GetMaxXActive, METH_VARARGS, doc_FbxLimits_GetMaxXActive},
    {sipName_GetMaxYActive, meth_FbxLimits_GetMaxYActive, METH_VARARGS, doc_FbxLimits_GetMaxYActive},
    {sipName_GetMaxZActive, meth_FbxLimits_GetMaxZActive, METH_VARARGS, doc_FbxLimits_GetMaxZActive},
    {sipName_GetMin, meth_FbxLimits_GetMin, METH_VARARGS, doc_FbxLimits_GetMin},
    {sipName_GetMinActive, meth_FbxLimits_GetMinActive, METH_VARARGS, doc_FbxLimits_GetMinActive},
    {sipName_GetMinXActive, meth_FbxLimits_GetMinXActive, METH_VARARGS, doc_FbxLimits_GetMinXActive},
    {sipName_GetMinYActive, meth_FbxLimits_GetMinYActive, METH_VARARGS, doc_FbxLimits_GetMinYActive},
    {sipName_GetMinZActive, meth_FbxLimits_GetMinZActive, METH_VARARGS, doc_FbxLimits_GetMinZActive},
    {sipName_SetActive, meth_FbxLimits_SetActive, METH_VARARGS, doc_FbxLimits_SetActive},
    {sipName_SetMax, meth_FbxLimits_SetMax, METH_VARARGS, doc_FbxLimits_SetMax},
    {sipName_SetMaxActive, meth_FbxLimits_SetMaxActive, METH_VARARGS, doc_FbxLimits_SetMaxActive},
    {sipName_SetMaxXActive, meth_FbxLimits_SetMaxXActive, METH_VARARGS, doc_FbxLimits_SetMaxXActive},
    {sipName_SetMaxYActive, meth_FbxLimits_SetMaxYActive, METH_VARARGS, doc_FbxLimits_SetMaxYActive},
    {sipName_SetMaxZActive, meth_FbxLimits_SetMaxZActive, METH_VARARGS, doc_FbxLimits_SetMaxZActive},
    {sipName_SetMin, meth_FbxLimits_SetMin, METH_VARARGS, doc_FbxLimits_SetMin},
    {sipName_SetMinActive, meth_FbxLimits_SetMinActive, METH_VARARGS, doc_FbxLimits_SetMinActive},
    {sipName_SetMinXActive, meth_FbxLimits_SetMinXActive, METH_VARARGS, doc_FbxLimits_SetMinXActive},
    {sipName_SetMinYActive, meth_FbxLimits_SetMinYActive, METH_VARARGS, doc_FbxLimits_SetMinYActive},
    {sipName_SetMinZActive, meth_FbxLimits_SetMinZActive, METH_VARARGS, doc_FbxLimits_SetMinZActive}
};

PyDoc_STRVAR(doc_FbxLimits, "\1FbxLimits()\n"
"FbxLimits(FbxLimits)");


sipClassTypeDef sipTypeDef_fbx_FbxLimits = {
    {
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_FbxLimits,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxLimits,
        {0, 0, 1},
        24, methods_FbxLimits,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_FbxLimits,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_FbxLimits,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_FbxLimits,
    assign_FbxLimits,
    array_FbxLimits,
    copy_FbxLimits,
    release_FbxLimits,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
