/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"


#line 4 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxstatus.sip"
#include <fbxsdk.h>
#line 44 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxAnimCurveFilterKeySync.cpp"


class sipFbxAnimCurveFilterKeySync : public  ::FbxAnimCurveFilterKeySync
{
public:
    sipFbxAnimCurveFilterKeySync();
    sipFbxAnimCurveFilterKeySync(const  ::FbxAnimCurveFilterKeySync&);
    virtual ~sipFbxAnimCurveFilterKeySync();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    const char* GetName() const SIP_OVERRIDE;
    bool NeedApply( ::FbxAnimStack*, ::FbxStatus*) SIP_OVERRIDE;
    bool NeedApply( ::FbxObject*, ::FbxAnimStack*, ::FbxStatus*) SIP_OVERRIDE;
    bool NeedApply( ::FbxAnimCurveNode&, ::FbxStatus*) SIP_OVERRIDE;
    bool NeedApply( ::FbxAnimCurve**,int, ::FbxStatus*) SIP_OVERRIDE;
    bool NeedApply( ::FbxAnimCurve&, ::FbxStatus*) SIP_OVERRIDE;
    bool Apply( ::FbxAnimStack*, ::FbxStatus*) SIP_OVERRIDE;
    bool Apply( ::FbxObject*, ::FbxAnimStack*, ::FbxStatus*) SIP_OVERRIDE;
    bool Apply( ::FbxAnimCurveNode&, ::FbxStatus*) SIP_OVERRIDE;
    bool Apply( ::FbxAnimCurve**,int, ::FbxStatus*) SIP_OVERRIDE;
    bool Apply( ::FbxAnimCurve&, ::FbxStatus*) SIP_OVERRIDE;
    void Reset() SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipFbxAnimCurveFilterKeySync(const sipFbxAnimCurveFilterKeySync &);
    sipFbxAnimCurveFilterKeySync &operator = (const sipFbxAnimCurveFilterKeySync &);

    char sipPyMethods[12];
};

sipFbxAnimCurveFilterKeySync::sipFbxAnimCurveFilterKeySync():  ::FbxAnimCurveFilterKeySync(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipFbxAnimCurveFilterKeySync::sipFbxAnimCurveFilterKeySync(const  ::FbxAnimCurveFilterKeySync& a0):  ::FbxAnimCurveFilterKeySync(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipFbxAnimCurveFilterKeySync::~sipFbxAnimCurveFilterKeySync()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const char* sipFbxAnimCurveFilterKeySync::GetName() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetName);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterKeySync::GetName();

    extern const char* sipVH_fbx_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_fbx_27(sipGILState, 0, sipPySelf, sipMeth, -1495);
}

bool sipFbxAnimCurveFilterKeySync::NeedApply( ::FbxAnimStack*a0, ::FbxStatus*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_NeedApply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterKeySync::NeedApply(a0,a1);

    extern bool sipVH_fbx_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimStack*, ::FbxStatus*);

    return sipVH_fbx_28(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipFbxAnimCurveFilterKeySync::NeedApply( ::FbxObject*a0, ::FbxAnimStack*a1, ::FbxStatus*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_NeedApply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterKeySync::NeedApply(a0,a1,a2);

    extern bool sipVH_fbx_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxObject*, ::FbxAnimStack*, ::FbxStatus*);

    return sipVH_fbx_29(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipFbxAnimCurveFilterKeySync::NeedApply( ::FbxAnimCurveNode& a0, ::FbxStatus*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_NeedApply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterKeySync::NeedApply(a0,a1);

    extern bool sipVH_fbx_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimCurveNode&, ::FbxStatus*);

    return sipVH_fbx_30(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipFbxAnimCurveFilterKeySync::NeedApply( ::FbxAnimCurve**a0,int a1, ::FbxStatus*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_NeedApply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterKeySync::NeedApply(a0,a1,a2);

    extern bool sipVH_fbx_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimCurve**,int, ::FbxStatus*);

    return sipVH_fbx_31(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipFbxAnimCurveFilterKeySync::NeedApply( ::FbxAnimCurve& a0, ::FbxStatus*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_NeedApply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterKeySync::NeedApply(a0,a1);

    extern bool sipVH_fbx_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimCurve&, ::FbxStatus*);

    return sipVH_fbx_32(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipFbxAnimCurveFilterKeySync::Apply( ::FbxAnimStack*a0, ::FbxStatus*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_Apply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterKeySync::Apply(a0,a1);

    extern bool sipVH_fbx_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimStack*, ::FbxStatus*);

    return sipVH_fbx_28(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipFbxAnimCurveFilterKeySync::Apply( ::FbxObject*a0, ::FbxAnimStack*a1, ::FbxStatus*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_Apply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterKeySync::Apply(a0,a1,a2);

    extern bool sipVH_fbx_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxObject*, ::FbxAnimStack*, ::FbxStatus*);

    return sipVH_fbx_29(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipFbxAnimCurveFilterKeySync::Apply( ::FbxAnimCurveNode& a0, ::FbxStatus*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_Apply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterKeySync::Apply(a0,a1);

    extern bool sipVH_fbx_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimCurveNode&, ::FbxStatus*);

    return sipVH_fbx_30(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipFbxAnimCurveFilterKeySync::Apply( ::FbxAnimCurve**a0,int a1, ::FbxStatus*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_Apply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterKeySync::Apply(a0,a1,a2);

    extern bool sipVH_fbx_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimCurve**,int, ::FbxStatus*);

    return sipVH_fbx_31(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipFbxAnimCurveFilterKeySync::Apply( ::FbxAnimCurve& a0, ::FbxStatus*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_Apply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterKeySync::Apply(a0,a1);

    extern bool sipVH_fbx_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimCurve&, ::FbxStatus*);

    return sipVH_fbx_32(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipFbxAnimCurveFilterKeySync::Reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[11], &sipPySelf, SIP_NULLPTR, sipName_Reset);

    if (!sipMeth)
    {
         ::FbxAnimCurveFilterKeySync::Reset();
        return;
    }

    extern void sipVH_fbx_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_fbx_0(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterKeySync_GetName, "GetName(self) -> str");

extern "C" {static PyObject *meth_FbxAnimCurveFilterKeySync_GetName(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterKeySync_GetName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxAnimCurveFilterKeySync)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxAnimCurveFilterKeySync *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveFilterKeySync, &sipCpp))
        {
            const char*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterKeySync::GetName() : sipCpp->GetName());

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_FromString(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterKeySync, sipName_GetName, doc_FbxAnimCurveFilterKeySync_GetName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterKeySync_NeedApply, "NeedApply(self, FbxAnimStack, FbxStatus = None) -> bool\n"
"NeedApply(self, FbxObject, FbxAnimStack, FbxStatus = None) -> bool\n"
"NeedApply(self, FbxAnimCurveNode, FbxStatus = None) -> bool\n"
"NeedApply(self, int, FbxStatus = None) -> Tuple[bool, FbxAnimCurve]\n"
"NeedApply(self, FbxAnimCurve, FbxStatus = None) -> bool");

extern "C" {static PyObject *meth_FbxAnimCurveFilterKeySync_NeedApply(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterKeySync_NeedApply(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxAnimCurveFilterKeySync)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxAnimStack* a0;
         ::FbxStatus* a1 = 0;
         ::FbxAnimCurveFilterKeySync *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|J8", &sipSelf, sipType_FbxAnimCurveFilterKeySync, &sipCpp, sipType_FbxAnimStack, &a0, sipType_FbxStatus, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterKeySync::NeedApply(a0,a1) : sipCpp->NeedApply(a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::FbxObject* a0;
         ::FbxAnimStack* a1;
         ::FbxStatus* a2 = 0;
         ::FbxAnimCurveFilterKeySync *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8|J8", &sipSelf, sipType_FbxAnimCurveFilterKeySync, &sipCpp, sipType_FbxObject, &a0, sipType_FbxAnimStack, &a1, sipType_FbxStatus, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterKeySync::NeedApply(a0,a1,a2) : sipCpp->NeedApply(a0,a1,a2));

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::FbxAnimCurveNode* a0;
         ::FbxStatus* a1 = 0;
         ::FbxAnimCurveFilterKeySync *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|J8", &sipSelf, sipType_FbxAnimCurveFilterKeySync, &sipCpp, sipType_FbxAnimCurveNode, &a0, sipType_FbxStatus, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterKeySync::NeedApply(*a0,a1) : sipCpp->NeedApply(*a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::FbxAnimCurve* a0;
        int a1;
         ::FbxStatus* a2 = 0;
         ::FbxAnimCurveFilterKeySync *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|J8", &sipSelf, sipType_FbxAnimCurveFilterKeySync, &sipCpp, &a1, sipType_FbxStatus, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterKeySync::NeedApply(&a0,a1,a2) : sipCpp->NeedApply(&a0,a1,a2));

            return sipBuildResult(0,"(bD)",sipRes,a0,sipType_FbxAnimCurve,SIP_NULLPTR);
        }
    }

    {
         ::FbxAnimCurve* a0;
         ::FbxStatus* a1 = 0;
         ::FbxAnimCurveFilterKeySync *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|J8", &sipSelf, sipType_FbxAnimCurveFilterKeySync, &sipCpp, sipType_FbxAnimCurve, &a0, sipType_FbxStatus, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterKeySync::NeedApply(*a0,a1) : sipCpp->NeedApply(*a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterKeySync, sipName_NeedApply, doc_FbxAnimCurveFilterKeySync_NeedApply);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterKeySync_Apply, "Apply(self, FbxAnimStack, FbxStatus = None) -> bool\n"
"Apply(self, FbxObject, FbxAnimStack, FbxStatus = None) -> bool\n"
"Apply(self, FbxAnimCurveNode, FbxStatus = None) -> bool\n"
"Apply(self, int, FbxStatus = None) -> Tuple[bool, FbxAnimCurve]\n"
"Apply(self, FbxAnimCurve, FbxStatus = None) -> bool");

extern "C" {static PyObject *meth_FbxAnimCurveFilterKeySync_Apply(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterKeySync_Apply(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxAnimCurveFilterKeySync)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxAnimStack* a0;
         ::FbxStatus* a1 = 0;
         ::FbxAnimCurveFilterKeySync *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|J8", &sipSelf, sipType_FbxAnimCurveFilterKeySync, &sipCpp, sipType_FbxAnimStack, &a0, sipType_FbxStatus, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterKeySync::Apply(a0,a1) : sipCpp->Apply(a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::FbxObject* a0;
         ::FbxAnimStack* a1;
         ::FbxStatus* a2 = 0;
         ::FbxAnimCurveFilterKeySync *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8|J8", &sipSelf, sipType_FbxAnimCurveFilterKeySync, &sipCpp, sipType_FbxObject, &a0, sipType_FbxAnimStack, &a1, sipType_FbxStatus, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterKeySync::Apply(a0,a1,a2) : sipCpp->Apply(a0,a1,a2));

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::FbxAnimCurveNode* a0;
         ::FbxStatus* a1 = 0;
         ::FbxAnimCurveFilterKeySync *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|J8", &sipSelf, sipType_FbxAnimCurveFilterKeySync, &sipCpp, sipType_FbxAnimCurveNode, &a0, sipType_FbxStatus, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterKeySync::Apply(*a0,a1) : sipCpp->Apply(*a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::FbxAnimCurve* a0;
        int a1;
         ::FbxStatus* a2 = 0;
         ::FbxAnimCurveFilterKeySync *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|J8", &sipSelf, sipType_FbxAnimCurveFilterKeySync, &sipCpp, &a1, sipType_FbxStatus, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterKeySync::Apply(&a0,a1,a2) : sipCpp->Apply(&a0,a1,a2));

            return sipBuildResult(0,"(bD)",sipRes,a0,sipType_FbxAnimCurve,SIP_NULLPTR);
        }
    }

    {
         ::FbxAnimCurve* a0;
         ::FbxStatus* a1 = 0;
         ::FbxAnimCurveFilterKeySync *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|J8", &sipSelf, sipType_FbxAnimCurveFilterKeySync, &sipCpp, sipType_FbxAnimCurve, &a0, sipType_FbxStatus, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterKeySync::Apply(*a0,a1) : sipCpp->Apply(*a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterKeySync, sipName_Apply, doc_FbxAnimCurveFilterKeySync_Apply);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxAnimCurveFilterKeySync(void *, const sipTypeDef *);}
static void *cast_FbxAnimCurveFilterKeySync(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxAnimCurveFilterKeySync *sipCpp = reinterpret_cast< ::FbxAnimCurveFilterKeySync *>(sipCppV);

    if (targetType == sipType_FbxAnimCurveFilterKeySync)
        return sipCppV;

    if (targetType == sipType_FbxAnimCurveFilter)
        return static_cast< ::FbxAnimCurveFilter *>(sipCpp);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxAnimCurveFilterKeySync(void *, int);}
static void release_FbxAnimCurveFilterKeySync(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipFbxAnimCurveFilterKeySync *>(sipCppV);
    else
        delete reinterpret_cast< ::FbxAnimCurveFilterKeySync *>(sipCppV);
}


extern "C" {static void *array_FbxAnimCurveFilterKeySync(Py_ssize_t);}
static void *array_FbxAnimCurveFilterKeySync(Py_ssize_t sipNrElem)
{
    return new  ::FbxAnimCurveFilterKeySync[sipNrElem];
}


extern "C" {static void assign_FbxAnimCurveFilterKeySync(void *, Py_ssize_t, void *);}
static void assign_FbxAnimCurveFilterKeySync(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::FbxAnimCurveFilterKeySync *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::FbxAnimCurveFilterKeySync *>(sipSrc);
}


extern "C" {static void *copy_FbxAnimCurveFilterKeySync(const void *, Py_ssize_t);}
static void *copy_FbxAnimCurveFilterKeySync(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::FbxAnimCurveFilterKeySync(reinterpret_cast<const  ::FbxAnimCurveFilterKeySync *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxAnimCurveFilterKeySync(sipSimpleWrapper *);}
static void dealloc_FbxAnimCurveFilterKeySync(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipFbxAnimCurveFilterKeySync *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxAnimCurveFilterKeySync(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_FbxAnimCurveFilterKeySync(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxAnimCurveFilterKeySync(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipFbxAnimCurveFilterKeySync *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipFbxAnimCurveFilterKeySync();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::FbxAnimCurveFilterKeySync* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_FbxAnimCurveFilterKeySync, &a0))
        {
            sipCpp = new sipFbxAnimCurveFilterKeySync(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxAnimCurveFilterKeySync[] = {{17, 255, 1}};


static PyMethodDef methods_FbxAnimCurveFilterKeySync[] = {
    {sipName_Apply, meth_FbxAnimCurveFilterKeySync_Apply, METH_VARARGS, doc_FbxAnimCurveFilterKeySync_Apply},
    {sipName_GetName, meth_FbxAnimCurveFilterKeySync_GetName, METH_VARARGS, doc_FbxAnimCurveFilterKeySync_GetName},
    {sipName_NeedApply, meth_FbxAnimCurveFilterKeySync_NeedApply, METH_VARARGS, doc_FbxAnimCurveFilterKeySync_NeedApply}
};

PyDoc_STRVAR(doc_FbxAnimCurveFilterKeySync, "\1FbxAnimCurveFilterKeySync()\n"
"FbxAnimCurveFilterKeySync(FbxAnimCurveFilterKeySync)");


sipClassTypeDef sipTypeDef_fbx_FbxAnimCurveFilterKeySync = {
    {
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_FbxAnimCurveFilterKeySync,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxAnimCurveFilterKeySync,
        {0, 0, 1},
        3, methods_FbxAnimCurveFilterKeySync,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_FbxAnimCurveFilterKeySync,
    -1,
    -1,
    supers_FbxAnimCurveFilterKeySync,
    SIP_NULLPTR,
    init_type_FbxAnimCurveFilterKeySync,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_FbxAnimCurveFilterKeySync,
    assign_FbxAnimCurveFilterKeySync,
    array_FbxAnimCurveFilterKeySync,
    copy_FbxAnimCurveFilterKeySync,
    release_FbxAnimCurveFilterKeySync,
    cast_FbxAnimCurveFilterKeySync,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
