/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxCameraSwitcher_Create, "Create(FbxManager, str) -> FbxCameraSwitcher\n"
"Create(FbxObject, str) -> FbxCameraSwitcher");

extern "C" {static PyObject *meth_FbxCameraSwitcher_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxCameraSwitcher_Create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8A8", &sipSelf, sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxCameraSwitcher*sipRes;

            sipRes =  ::FbxCameraSwitcher::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxCameraSwitcher,SIP_NULLPTR);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8A8", &sipSelf, sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxCameraSwitcher*sipRes;

            sipRes =  ::FbxCameraSwitcher::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxCameraSwitcher,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCameraSwitcher, sipName_Create, doc_FbxCameraSwitcher_Create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCameraSwitcher_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxCameraSwitcher_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxCameraSwitcher_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxCameraSwitcher)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxCameraSwitcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCameraSwitcher, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxCameraSwitcher::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCameraSwitcher, sipName_GetClassId, doc_FbxCameraSwitcher_GetClassId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCameraSwitcher_GetAttributeType, "GetAttributeType(self) -> FbxNodeAttribute.EType");

extern "C" {static PyObject *meth_FbxCameraSwitcher_GetAttributeType(PyObject *, PyObject *);}
static PyObject *meth_FbxCameraSwitcher_GetAttributeType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxCameraSwitcher)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxCameraSwitcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCameraSwitcher, &sipCpp))
        {
             ::FbxNodeAttribute::EType sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxCameraSwitcher::GetAttributeType() : sipCpp->GetAttributeType());

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_FbxNodeAttribute_EType);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCameraSwitcher, sipName_GetAttributeType, doc_FbxCameraSwitcher_GetAttributeType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCameraSwitcher_GetDefaultCameraIndex, "GetDefaultCameraIndex(self) -> int");

extern "C" {static PyObject *meth_FbxCameraSwitcher_GetDefaultCameraIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxCameraSwitcher_GetDefaultCameraIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxCameraSwitcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCameraSwitcher, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetDefaultCameraIndex();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCameraSwitcher, sipName_GetDefaultCameraIndex, doc_FbxCameraSwitcher_GetDefaultCameraIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCameraSwitcher_SetDefaultCameraIndex, "SetDefaultCameraIndex(self, int)");

extern "C" {static PyObject *meth_FbxCameraSwitcher_SetDefaultCameraIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxCameraSwitcher_SetDefaultCameraIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::FbxCameraSwitcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxCameraSwitcher, &sipCpp, &a0))
        {
            sipCpp->SetDefaultCameraIndex(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCameraSwitcher, sipName_SetDefaultCameraIndex, doc_FbxCameraSwitcher_SetDefaultCameraIndex);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_FbxCameraSwitcher___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxCameraSwitcher___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxCameraSwitcher *sipCpp = reinterpret_cast< ::FbxCameraSwitcher *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxCameraSwitcher));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxCameraSwitcher* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxCameraSwitcher, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxCameraSwitcher::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxCameraSwitcher, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxCameraSwitcher___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxCameraSwitcher___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxCameraSwitcher *sipCpp = reinterpret_cast< ::FbxCameraSwitcher *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxCameraSwitcher));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxCameraSwitcher* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxCameraSwitcher, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxCameraSwitcher::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxCameraSwitcher, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxCameraSwitcher(void *, const sipTypeDef *);}
static void *cast_FbxCameraSwitcher(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxCameraSwitcher *sipCpp = reinterpret_cast< ::FbxCameraSwitcher *>(sipCppV);

    if (targetType == sipType_FbxCameraSwitcher)
        return sipCppV;

    sipCppV = ((const sipClassTypeDef *)sipType_FbxNodeAttribute)->ctd_cast(static_cast< ::FbxNodeAttribute *>(sipCpp), targetType);
    if (sipCppV)
        return sipCppV;

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxCameraSwitcher(void *, int);}
static void release_FbxCameraSwitcher(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxCameraSwitcher[] = {{233, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxCameraSwitcher[] = {
    {(void *)slot_FbxCameraSwitcher___ne__, ne_slot},
    {(void *)slot_FbxCameraSwitcher___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxCameraSwitcher[] = {
    {sipName_Create, meth_FbxCameraSwitcher_Create, METH_VARARGS, doc_FbxCameraSwitcher_Create},
    {sipName_GetAttributeType, meth_FbxCameraSwitcher_GetAttributeType, METH_VARARGS, doc_FbxCameraSwitcher_GetAttributeType},
    {sipName_GetClassId, meth_FbxCameraSwitcher_GetClassId, METH_VARARGS, doc_FbxCameraSwitcher_GetClassId},
    {sipName_GetDefaultCameraIndex, meth_FbxCameraSwitcher_GetDefaultCameraIndex, METH_VARARGS, doc_FbxCameraSwitcher_GetDefaultCameraIndex},
    {sipName_SetDefaultCameraIndex, meth_FbxCameraSwitcher_SetDefaultCameraIndex, METH_VARARGS, doc_FbxCameraSwitcher_SetDefaultCameraIndex}
};


extern "C" {static PyObject *varget_FbxCameraSwitcher_CameraIndex(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCameraSwitcher_CameraIndex(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyInteger1*sipVal;
     ::FbxCameraSwitcher *sipCpp = reinterpret_cast< ::FbxCameraSwitcher *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -55);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->CameraIndex;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyInteger1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -54, sipPySelf);
        sipKeepReference(sipPySelf, -55, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxCameraSwitcher_CameraIndex(void *, PyObject *, PyObject *);}
static int varset_FbxCameraSwitcher_CameraIndex(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyInteger1*sipVal;
     ::FbxCameraSwitcher *sipCpp = reinterpret_cast< ::FbxCameraSwitcher *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyInteger1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyInteger1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->CameraIndex = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCameraSwitcher_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCameraSwitcher_ClassId(void *, PyObject *sipPySelf, PyObject *)
{
    static PyObject *sipPy = SIP_NULLPTR;
     ::FbxClassId*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal = & ::FbxCameraSwitcher::ClassId;

    sipPy = sipConvertFromType(sipVal, sipType_FbxClassId, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -56, sipPySelf);
        Py_INCREF(sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxCameraSwitcher_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxCameraSwitcher_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy, sipType_FbxClassId, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxCameraSwitcher::ClassId = *sipVal;

    return 0;
}

sipVariableDef variables_FbxCameraSwitcher[] = {
    {InstanceVariable, sipName_CameraIndex, (PyMethodDef *)varget_FbxCameraSwitcher_CameraIndex, (PyMethodDef *)varset_FbxCameraSwitcher_CameraIndex, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxCameraSwitcher_ClassId, (PyMethodDef *)varset_FbxCameraSwitcher_ClassId, SIP_NULLPTR, SIP_NULLPTR},
};


sipClassTypeDef sipTypeDef_fbx_FbxCameraSwitcher = {
    {
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxCameraSwitcher,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxCameraSwitcher,
        {0, 0, 1},
        5, methods_FbxCameraSwitcher,
        2, variables_FbxCameraSwitcher,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_FbxCameraSwitcher,
    slots_FbxCameraSwitcher,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_FbxCameraSwitcher,
    cast_FbxCameraSwitcher,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
