/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxSurfaceLambert_Create, "Create(FbxManager, str) -> FbxSurfaceLambert\n"
"Create(FbxObject, str) -> FbxSurfaceLambert");

extern "C" {static PyObject *meth_FbxSurfaceLambert_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxSurfaceLambert_Create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8A8", &sipSelf, sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxSurfaceLambert*sipRes;

            sipRes =  ::FbxSurfaceLambert::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxSurfaceLambert,SIP_NULLPTR);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8A8", &sipSelf, sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxSurfaceLambert*sipRes;

            sipRes =  ::FbxSurfaceLambert::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxSurfaceLambert,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxSurfaceLambert, sipName_Create, doc_FbxSurfaceLambert_Create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxSurfaceLambert_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxSurfaceLambert_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxSurfaceLambert_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxSurfaceLambert)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxSurfaceLambert *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxSurfaceLambert, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxSurfaceLambert::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxSurfaceLambert, sipName_GetClassId, doc_FbxSurfaceLambert_GetClassId);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_FbxSurfaceLambert___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxSurfaceLambert___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxSurfaceLambert));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxSurfaceLambert* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxSurfaceLambert, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxSurfaceLambert::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxSurfaceLambert, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxSurfaceLambert___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxSurfaceLambert___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxSurfaceLambert));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxSurfaceLambert* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxSurfaceLambert, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxSurfaceLambert::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxSurfaceLambert, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxSurfaceLambert(void *, const sipTypeDef *);}
static void *cast_FbxSurfaceLambert(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipCppV);

    if (targetType == sipType_FbxSurfaceLambert)
        return sipCppV;

    sipCppV = ((const sipClassTypeDef *)sipType_FbxSurfaceMaterial)->ctd_cast(static_cast< ::FbxSurfaceMaterial *>(sipCpp), targetType);
    if (sipCppV)
        return sipCppV;

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxSurfaceLambert(void *, int);}
static void release_FbxSurfaceLambert(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxSurfaceLambert[] = {{351, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxSurfaceLambert[] = {
    {(void *)slot_FbxSurfaceLambert___ne__, ne_slot},
    {(void *)slot_FbxSurfaceLambert___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxSurfaceLambert[] = {
    {sipName_Create, meth_FbxSurfaceLambert_Create, METH_VARARGS, doc_FbxSurfaceLambert_Create},
    {sipName_GetClassId, meth_FbxSurfaceLambert_GetClassId, METH_VARARGS, doc_FbxSurfaceLambert_GetClassId}
};


extern "C" {static PyObject *varget_FbxSurfaceLambert_Ambient(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSurfaceLambert_Ambient(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble3*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -391);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->Ambient;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -390, sipPySelf);
        sipKeepReference(sipPySelf, -391, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxSurfaceLambert_Ambient(void *, PyObject *, PyObject *);}
static int varset_FbxSurfaceLambert_Ambient(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble3, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Ambient = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxSurfaceLambert_AmbientFactor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSurfaceLambert_AmbientFactor(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble1*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -393);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->AmbientFactor;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -392, sipPySelf);
        sipKeepReference(sipPySelf, -393, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxSurfaceLambert_AmbientFactor(void *, PyObject *, PyObject *);}
static int varset_FbxSurfaceLambert_AmbientFactor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AmbientFactor = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxSurfaceLambert_Bump(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSurfaceLambert_Bump(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble3*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -395);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->Bump;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -394, sipPySelf);
        sipKeepReference(sipPySelf, -395, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxSurfaceLambert_Bump(void *, PyObject *, PyObject *);}
static int varset_FbxSurfaceLambert_Bump(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble3, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Bump = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxSurfaceLambert_BumpFactor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSurfaceLambert_BumpFactor(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble1*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -397);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->BumpFactor;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -396, sipPySelf);
        sipKeepReference(sipPySelf, -397, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxSurfaceLambert_BumpFactor(void *, PyObject *, PyObject *);}
static int varset_FbxSurfaceLambert_BumpFactor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->BumpFactor = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxSurfaceLambert_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSurfaceLambert_ClassId(void *, PyObject *sipPySelf, PyObject *)
{
    static PyObject *sipPy = SIP_NULLPTR;
     ::FbxClassId*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal = & ::FbxSurfaceLambert::ClassId;

    sipPy = sipConvertFromType(sipVal, sipType_FbxClassId, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -398, sipPySelf);
        Py_INCREF(sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxSurfaceLambert_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxSurfaceLambert_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy, sipType_FbxClassId, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxSurfaceLambert::ClassId = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxSurfaceLambert_Diffuse(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSurfaceLambert_Diffuse(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble3*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -400);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->Diffuse;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -399, sipPySelf);
        sipKeepReference(sipPySelf, -400, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxSurfaceLambert_Diffuse(void *, PyObject *, PyObject *);}
static int varset_FbxSurfaceLambert_Diffuse(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble3, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Diffuse = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxSurfaceLambert_DiffuseFactor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSurfaceLambert_DiffuseFactor(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble1*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -402);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->DiffuseFactor;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -401, sipPySelf);
        sipKeepReference(sipPySelf, -402, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxSurfaceLambert_DiffuseFactor(void *, PyObject *, PyObject *);}
static int varset_FbxSurfaceLambert_DiffuseFactor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->DiffuseFactor = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxSurfaceLambert_DisplacementColor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSurfaceLambert_DisplacementColor(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble3*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -404);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->DisplacementColor;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -403, sipPySelf);
        sipKeepReference(sipPySelf, -404, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxSurfaceLambert_DisplacementColor(void *, PyObject *, PyObject *);}
static int varset_FbxSurfaceLambert_DisplacementColor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble3, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->DisplacementColor = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxSurfaceLambert_DisplacementFactor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSurfaceLambert_DisplacementFactor(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble1*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -406);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->DisplacementFactor;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -405, sipPySelf);
        sipKeepReference(sipPySelf, -406, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxSurfaceLambert_DisplacementFactor(void *, PyObject *, PyObject *);}
static int varset_FbxSurfaceLambert_DisplacementFactor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->DisplacementFactor = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxSurfaceLambert_Emissive(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSurfaceLambert_Emissive(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble3*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -408);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->Emissive;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -407, sipPySelf);
        sipKeepReference(sipPySelf, -408, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxSurfaceLambert_Emissive(void *, PyObject *, PyObject *);}
static int varset_FbxSurfaceLambert_Emissive(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble3, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Emissive = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxSurfaceLambert_EmissiveFactor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSurfaceLambert_EmissiveFactor(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble1*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -410);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->EmissiveFactor;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -409, sipPySelf);
        sipKeepReference(sipPySelf, -410, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxSurfaceLambert_EmissiveFactor(void *, PyObject *, PyObject *);}
static int varset_FbxSurfaceLambert_EmissiveFactor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->EmissiveFactor = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxSurfaceLambert_NormalMap(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSurfaceLambert_NormalMap(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble3*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -412);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->NormalMap;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -411, sipPySelf);
        sipKeepReference(sipPySelf, -412, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxSurfaceLambert_NormalMap(void *, PyObject *, PyObject *);}
static int varset_FbxSurfaceLambert_NormalMap(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble3, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->NormalMap = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxSurfaceLambert_TransparencyFactor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSurfaceLambert_TransparencyFactor(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble1*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -414);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->TransparencyFactor;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -413, sipPySelf);
        sipKeepReference(sipPySelf, -414, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxSurfaceLambert_TransparencyFactor(void *, PyObject *, PyObject *);}
static int varset_FbxSurfaceLambert_TransparencyFactor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->TransparencyFactor = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxSurfaceLambert_TransparentColor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSurfaceLambert_TransparentColor(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble3*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -416);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->TransparentColor;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -415, sipPySelf);
        sipKeepReference(sipPySelf, -416, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxSurfaceLambert_TransparentColor(void *, PyObject *, PyObject *);}
static int varset_FbxSurfaceLambert_TransparentColor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble3, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->TransparentColor = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxSurfaceLambert_VectorDisplacementColor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSurfaceLambert_VectorDisplacementColor(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble3*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -418);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->VectorDisplacementColor;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -417, sipPySelf);
        sipKeepReference(sipPySelf, -418, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxSurfaceLambert_VectorDisplacementColor(void *, PyObject *, PyObject *);}
static int varset_FbxSurfaceLambert_VectorDisplacementColor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble3, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->VectorDisplacementColor = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxSurfaceLambert_VectorDisplacementFactor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSurfaceLambert_VectorDisplacementFactor(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble1*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -420);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->VectorDisplacementFactor;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -419, sipPySelf);
        sipKeepReference(sipPySelf, -420, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxSurfaceLambert_VectorDisplacementFactor(void *, PyObject *, PyObject *);}
static int varset_FbxSurfaceLambert_VectorDisplacementFactor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxSurfaceLambert *sipCpp = reinterpret_cast< ::FbxSurfaceLambert *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->VectorDisplacementFactor = *sipVal;

    return 0;
}

sipVariableDef variables_FbxSurfaceLambert[] = {
    {InstanceVariable, sipName_Ambient, (PyMethodDef *)varget_FbxSurfaceLambert_Ambient, (PyMethodDef *)varset_FbxSurfaceLambert_Ambient, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_AmbientFactor, (PyMethodDef *)varget_FbxSurfaceLambert_AmbientFactor, (PyMethodDef *)varset_FbxSurfaceLambert_AmbientFactor, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_Bump, (PyMethodDef *)varget_FbxSurfaceLambert_Bump, (PyMethodDef *)varset_FbxSurfaceLambert_Bump, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_BumpFactor, (PyMethodDef *)varget_FbxSurfaceLambert_BumpFactor, (PyMethodDef *)varset_FbxSurfaceLambert_BumpFactor, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxSurfaceLambert_ClassId, (PyMethodDef *)varset_FbxSurfaceLambert_ClassId, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_Diffuse, (PyMethodDef *)varget_FbxSurfaceLambert_Diffuse, (PyMethodDef *)varset_FbxSurfaceLambert_Diffuse, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_DiffuseFactor, (PyMethodDef *)varget_FbxSurfaceLambert_DiffuseFactor, (PyMethodDef *)varset_FbxSurfaceLambert_DiffuseFactor, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_DisplacementColor, (PyMethodDef *)varget_FbxSurfaceLambert_DisplacementColor, (PyMethodDef *)varset_FbxSurfaceLambert_DisplacementColor, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_DisplacementFactor, (PyMethodDef *)varget_FbxSurfaceLambert_DisplacementFactor, (PyMethodDef *)varset_FbxSurfaceLambert_DisplacementFactor, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_Emissive, (PyMethodDef *)varget_FbxSurfaceLambert_Emissive, (PyMethodDef *)varset_FbxSurfaceLambert_Emissive, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_EmissiveFactor, (PyMethodDef *)varget_FbxSurfaceLambert_EmissiveFactor, (PyMethodDef *)varset_FbxSurfaceLambert_EmissiveFactor, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_NormalMap, (PyMethodDef *)varget_FbxSurfaceLambert_NormalMap, (PyMethodDef *)varset_FbxSurfaceLambert_NormalMap, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_TransparencyFactor, (PyMethodDef *)varget_FbxSurfaceLambert_TransparencyFactor, (PyMethodDef *)varset_FbxSurfaceLambert_TransparencyFactor, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_TransparentColor, (PyMethodDef *)varget_FbxSurfaceLambert_TransparentColor, (PyMethodDef *)varset_FbxSurfaceLambert_TransparentColor, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_VectorDisplacementColor, (PyMethodDef *)varget_FbxSurfaceLambert_VectorDisplacementColor, (PyMethodDef *)varset_FbxSurfaceLambert_VectorDisplacementColor, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_VectorDisplacementFactor, (PyMethodDef *)varget_FbxSurfaceLambert_VectorDisplacementFactor, (PyMethodDef *)varset_FbxSurfaceLambert_VectorDisplacementFactor, SIP_NULLPTR, SIP_NULLPTR},
};


sipClassTypeDef sipTypeDef_fbx_FbxSurfaceLambert = {
    {
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxSurfaceLambert,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxSurfaceLambert,
        {0, 0, 1},
        2, methods_FbxSurfaceLambert,
        16, variables_FbxSurfaceLambert,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_FbxSurfaceLambert,
    slots_FbxSurfaceLambert,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_FbxSurfaceLambert,
    cast_FbxSurfaceLambert,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
