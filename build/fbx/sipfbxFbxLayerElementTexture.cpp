/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




class sipFbxLayerElementTexture : public  ::FbxLayerElementTexture
{
public:
    sipFbxLayerElementTexture();
    sipFbxLayerElementTexture(const  ::FbxLayerElementTexture&);
    ~sipFbxLayerElementTexture();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipFbxLayerElementTexture(const sipFbxLayerElementTexture &);
    sipFbxLayerElementTexture &operator = (const sipFbxLayerElementTexture &);
};

sipFbxLayerElementTexture::sipFbxLayerElementTexture():  ::FbxLayerElementTexture(), sipPySelf(SIP_NULLPTR)
{
}

sipFbxLayerElementTexture::sipFbxLayerElementTexture(const  ::FbxLayerElementTexture& a0):  ::FbxLayerElementTexture(a0), sipPySelf(SIP_NULLPTR)
{
}

sipFbxLayerElementTexture::~sipFbxLayerElementTexture()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_FbxLayerElementTexture_Create, "Create(FbxLayerContainer, str) -> FbxLayerElementTexture");

extern "C" {static PyObject *meth_FbxLayerElementTexture_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerElementTexture_Create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxLayerContainer* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8A8", &sipSelf, sipType_FbxLayerContainer, &a0, &a1Keep, &a1))
        {
             ::FbxLayerElementTexture*sipRes;

            sipRes =  ::FbxLayerElementTexture::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxLayerElementTexture,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLayerElementTexture, sipName_Create, doc_FbxLayerElementTexture_Create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLayerElementTexture_SetBlendMode, "SetBlendMode(self, FbxLayerElementTexture.EBlendMode)");

extern "C" {static PyObject *meth_FbxLayerElementTexture_SetBlendMode(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerElementTexture_SetBlendMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxLayerElementTexture::EBlendMode a0;
         ::FbxLayerElementTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxLayerElementTexture, &sipCpp, sipType_FbxLayerElementTexture_EBlendMode, &a0))
        {
            sipCpp->SetBlendMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLayerElementTexture, sipName_SetBlendMode, doc_FbxLayerElementTexture_SetBlendMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLayerElementTexture_SetAlpha, "SetAlpha(self, float)");

extern "C" {static PyObject *meth_FbxLayerElementTexture_SetAlpha(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerElementTexture_SetAlpha(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
         ::FbxLayerElementTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_FbxLayerElementTexture, &sipCpp, &a0))
        {
            sipCpp->SetAlpha(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLayerElementTexture, sipName_SetAlpha, doc_FbxLayerElementTexture_SetAlpha);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLayerElementTexture_GetBlendMode, "GetBlendMode(self) -> FbxLayerElementTexture.EBlendMode");

extern "C" {static PyObject *meth_FbxLayerElementTexture_GetBlendMode(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerElementTexture_GetBlendMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxLayerElementTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLayerElementTexture, &sipCpp))
        {
             ::FbxLayerElementTexture::EBlendMode sipRes;

            sipRes = sipCpp->GetBlendMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_FbxLayerElementTexture_EBlendMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLayerElementTexture, sipName_GetBlendMode, doc_FbxLayerElementTexture_GetBlendMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLayerElementTexture_GetAlpha, "GetAlpha(self) -> float");

extern "C" {static PyObject *meth_FbxLayerElementTexture_GetAlpha(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerElementTexture_GetAlpha(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxLayerElementTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLayerElementTexture, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->GetAlpha();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLayerElementTexture, sipName_GetAlpha, doc_FbxLayerElementTexture_GetAlpha);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxLayerElementTexture(void *, const sipTypeDef *);}
static void *cast_FbxLayerElementTexture(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxLayerElementTexture *sipCpp = reinterpret_cast< ::FbxLayerElementTexture *>(sipCppV);

    if (targetType == sipType_FbxLayerElementTexture)
        return sipCppV;

    sipCppV = ((const sipClassTypeDef *)sipType_FbxLayerElementTemplate_TexturePtr)->ctd_cast(static_cast< ::FbxLayerElementTemplate_TexturePtr *>(sipCpp), targetType);
    if (sipCppV)
        return sipCppV;

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxLayerElementTexture(void *, int);}
static void release_FbxLayerElementTexture(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipFbxLayerElementTexture *>(sipCppV);
}


extern "C" {static void dealloc_FbxLayerElementTexture(sipSimpleWrapper *);}
static void dealloc_FbxLayerElementTexture(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipFbxLayerElementTexture *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxLayerElementTexture(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_FbxLayerElementTexture(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxLayerElementTexture(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipFbxLayerElementTexture *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipFbxLayerElementTexture();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::FbxLayerElementTexture* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_FbxLayerElementTexture, &a0))
        {
            sipCpp = new sipFbxLayerElementTexture(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxLayerElementTexture[] = {{197, 255, 1}};


static PyMethodDef methods_FbxLayerElementTexture[] = {
    {sipName_Create, meth_FbxLayerElementTexture_Create, METH_VARARGS, doc_FbxLayerElementTexture_Create},
    {sipName_GetAlpha, meth_FbxLayerElementTexture_GetAlpha, METH_VARARGS, doc_FbxLayerElementTexture_GetAlpha},
    {sipName_GetBlendMode, meth_FbxLayerElementTexture_GetBlendMode, METH_VARARGS, doc_FbxLayerElementTexture_GetBlendMode},
    {sipName_SetAlpha, meth_FbxLayerElementTexture_SetAlpha, METH_VARARGS, doc_FbxLayerElementTexture_SetAlpha},
    {sipName_SetBlendMode, meth_FbxLayerElementTexture_SetBlendMode, METH_VARARGS, doc_FbxLayerElementTexture_SetBlendMode}
};


/* Define the enum members and ints to be added to this type. */
static sipIntInstanceDef intInstances_FbxLayerElementTexture[] = {
    {sipName_eTranslucent, static_cast<int>( ::FbxLayerElementTexture::eTranslucent)},
    {sipName_eAdd, static_cast<int>( ::FbxLayerElementTexture::eAdd)},
    {sipName_eModulate, static_cast<int>( ::FbxLayerElementTexture::eModulate)},
    {sipName_eModulate2, static_cast<int>( ::FbxLayerElementTexture::eModulate2)},
    {sipName_eOver, static_cast<int>( ::FbxLayerElementTexture::eOver)},
    {sipName_eNormal, static_cast<int>( ::FbxLayerElementTexture::eNormal)},
    {sipName_eDissolve, static_cast<int>( ::FbxLayerElementTexture::eDissolve)},
    {sipName_eDarken, static_cast<int>( ::FbxLayerElementTexture::eDarken)},
    {sipName_eColorBurn, static_cast<int>( ::FbxLayerElementTexture::eColorBurn)},
    {sipName_eLinearBurn, static_cast<int>( ::FbxLayerElementTexture::eLinearBurn)},
    {sipName_eDarkerColor, static_cast<int>( ::FbxLayerElementTexture::eDarkerColor)},
    {sipName_eLighten, static_cast<int>( ::FbxLayerElementTexture::eLighten)},
    {sipName_eScreen, static_cast<int>( ::FbxLayerElementTexture::eScreen)},
    {sipName_eColorDodge, static_cast<int>( ::FbxLayerElementTexture::eColorDodge)},
    {sipName_eLinearDodge, static_cast<int>( ::FbxLayerElementTexture::eLinearDodge)},
    {sipName_eLighterColor, static_cast<int>( ::FbxLayerElementTexture::eLighterColor)},
    {sipName_eSoftLight, static_cast<int>( ::FbxLayerElementTexture::eSoftLight)},
    {sipName_eHardLight, static_cast<int>( ::FbxLayerElementTexture::eHardLight)},
    {sipName_eVividLight, static_cast<int>( ::FbxLayerElementTexture::eVividLight)},
    {sipName_eLinearLight, static_cast<int>( ::FbxLayerElementTexture::eLinearLight)},
    {sipName_ePinLight, static_cast<int>( ::FbxLayerElementTexture::ePinLight)},
    {sipName_eHardMix, static_cast<int>( ::FbxLayerElementTexture::eHardMix)},
    {sipName_eDifference, static_cast<int>( ::FbxLayerElementTexture::eDifference)},
    {sipName_eExclusion, static_cast<int>( ::FbxLayerElementTexture::eExclusion)},
    {sipName_eSubtract, static_cast<int>( ::FbxLayerElementTexture::eSubtract)},
    {sipName_eDivide, static_cast<int>( ::FbxLayerElementTexture::eDivide)},
    {sipName_eHue, static_cast<int>( ::FbxLayerElementTexture::eHue)},
    {sipName_eSaturation, static_cast<int>( ::FbxLayerElementTexture::eSaturation)},
    {sipName_eColor, static_cast<int>( ::FbxLayerElementTexture::eColor)},
    {sipName_eLuminosity, static_cast<int>( ::FbxLayerElementTexture::eLuminosity)},
    {sipName_eOverlay, static_cast<int>( ::FbxLayerElementTexture::eOverlay)},
    {sipName_eBlendModeCount, static_cast<int>( ::FbxLayerElementTexture::eBlendModeCount)},
    {0, 0}
};

PyDoc_STRVAR(doc_FbxLayerElementTexture, "\1FbxLayerElementTexture()\n"
"FbxLayerElementTexture(FbxLayerElementTexture)");


sipClassTypeDef sipTypeDef_fbx_FbxLayerElementTexture = {
    {
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxLayerElementTexture,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxLayerElementTexture,
        {0, 0, 1},
        5, methods_FbxLayerElementTexture,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, intInstances_FbxLayerElementTexture, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_FbxLayerElementTexture,
    -1,
    -1,
    supers_FbxLayerElementTexture,
    SIP_NULLPTR,
    init_type_FbxLayerElementTexture,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_FbxLayerElementTexture,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_FbxLayerElementTexture,
    cast_FbxLayerElementTexture,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
