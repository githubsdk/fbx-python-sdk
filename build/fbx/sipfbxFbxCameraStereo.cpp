/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxCameraStereo_Create, "Create(FbxManager, str) -> FbxCameraStereo\n"
"Create(FbxObject, str) -> FbxCameraStereo");

extern "C" {static PyObject *meth_FbxCameraStereo_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxCameraStereo_Create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8A8", &sipSelf, sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxCameraStereo*sipRes;

            sipRes =  ::FbxCameraStereo::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxCameraStereo,SIP_NULLPTR);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8A8", &sipSelf, sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxCameraStereo*sipRes;

            sipRes =  ::FbxCameraStereo::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxCameraStereo,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCameraStereo, sipName_Create, doc_FbxCameraStereo_Create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCameraStereo_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxCameraStereo_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxCameraStereo_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxCameraStereo)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxCameraStereo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCameraStereo, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxCameraStereo::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCameraStereo, sipName_GetClassId, doc_FbxCameraStereo_GetClassId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCameraStereo_GetAttributeType, "GetAttributeType(self) -> FbxNodeAttribute.EType");

extern "C" {static PyObject *meth_FbxCameraStereo_GetAttributeType(PyObject *, PyObject *);}
static PyObject *meth_FbxCameraStereo_GetAttributeType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxCameraStereo)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxCameraStereo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCameraStereo, &sipCpp))
        {
             ::FbxNodeAttribute::EType sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxCameraStereo::GetAttributeType() : sipCpp->GetAttributeType());

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_FbxNodeAttribute_EType);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCameraStereo, sipName_GetAttributeType, doc_FbxCameraStereo_GetAttributeType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCameraStereo_Reset, "Reset(self)");

extern "C" {static PyObject *meth_FbxCameraStereo_Reset(PyObject *, PyObject *);}
static PyObject *meth_FbxCameraStereo_Reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxCameraStereo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCameraStereo, &sipCpp))
        {
            sipCpp->Reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCameraStereo, sipName_Reset, doc_FbxCameraStereo_Reset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCameraStereo_GetLeftCamera, "GetLeftCamera(self) -> FbxCamera");

extern "C" {static PyObject *meth_FbxCameraStereo_GetLeftCamera(PyObject *, PyObject *);}
static PyObject *meth_FbxCameraStereo_GetLeftCamera(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxCameraStereo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCameraStereo, &sipCpp))
        {
             ::FbxCamera*sipRes;

            sipRes = sipCpp->GetLeftCamera();

            return sipConvertFromType(sipRes,sipType_FbxCamera,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCameraStereo, sipName_GetLeftCamera, doc_FbxCameraStereo_GetLeftCamera);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCameraStereo_GetRightCamera, "GetRightCamera(self) -> FbxCamera");

extern "C" {static PyObject *meth_FbxCameraStereo_GetRightCamera(PyObject *, PyObject *);}
static PyObject *meth_FbxCameraStereo_GetRightCamera(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxCameraStereo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCameraStereo, &sipCpp))
        {
             ::FbxCamera*sipRes;

            sipRes = sipCpp->GetRightCamera();

            return sipConvertFromType(sipRes,sipType_FbxCamera,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCameraStereo, sipName_GetRightCamera, doc_FbxCameraStereo_GetRightCamera);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCameraStereo_SetLeftCamera, "SetLeftCamera(self, FbxCamera) -> bool");

extern "C" {static PyObject *meth_FbxCameraStereo_SetLeftCamera(PyObject *, PyObject *);}
static PyObject *meth_FbxCameraStereo_SetLeftCamera(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxCamera* a0;
         ::FbxCameraStereo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxCameraStereo, &sipCpp, sipType_FbxCamera, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->SetLeftCamera(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCameraStereo, sipName_SetLeftCamera, doc_FbxCameraStereo_SetLeftCamera);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCameraStereo_SetRightCamera, "SetRightCamera(self, FbxCamera) -> bool");

extern "C" {static PyObject *meth_FbxCameraStereo_SetRightCamera(PyObject *, PyObject *);}
static PyObject *meth_FbxCameraStereo_SetRightCamera(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxCamera* a0;
         ::FbxCameraStereo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxCameraStereo, &sipCpp, sipType_FbxCamera, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->SetRightCamera(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCameraStereo, sipName_SetRightCamera, doc_FbxCameraStereo_SetRightCamera);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCameraStereo_GetLeftCameraLocalMatrix, "GetLeftCameraLocalMatrix(self) -> FbxAMatrix");

extern "C" {static PyObject *meth_FbxCameraStereo_GetLeftCameraLocalMatrix(PyObject *, PyObject *);}
static PyObject *meth_FbxCameraStereo_GetLeftCameraLocalMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxCameraStereo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCameraStereo, &sipCpp))
        {
             ::FbxAMatrix*sipRes;

            sipRes = new  ::FbxAMatrix(sipCpp->GetLeftCameraLocalMatrix());

            return sipConvertFromNewType(sipRes,sipType_FbxAMatrix,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCameraStereo, sipName_GetLeftCameraLocalMatrix, doc_FbxCameraStereo_GetLeftCameraLocalMatrix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCameraStereo_GetLeftCameraGlobalMatrix, "GetLeftCameraGlobalMatrix(self) -> FbxAMatrix");

extern "C" {static PyObject *meth_FbxCameraStereo_GetLeftCameraGlobalMatrix(PyObject *, PyObject *);}
static PyObject *meth_FbxCameraStereo_GetLeftCameraGlobalMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxCameraStereo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCameraStereo, &sipCpp))
        {
             ::FbxAMatrix*sipRes;

            sipRes = new  ::FbxAMatrix(sipCpp->GetLeftCameraGlobalMatrix());

            return sipConvertFromNewType(sipRes,sipType_FbxAMatrix,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCameraStereo, sipName_GetLeftCameraGlobalMatrix, doc_FbxCameraStereo_GetLeftCameraGlobalMatrix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCameraStereo_GetRightCameraLocalMatrix, "GetRightCameraLocalMatrix(self) -> FbxAMatrix");

extern "C" {static PyObject *meth_FbxCameraStereo_GetRightCameraLocalMatrix(PyObject *, PyObject *);}
static PyObject *meth_FbxCameraStereo_GetRightCameraLocalMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxCameraStereo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCameraStereo, &sipCpp))
        {
             ::FbxAMatrix*sipRes;

            sipRes = new  ::FbxAMatrix(sipCpp->GetRightCameraLocalMatrix());

            return sipConvertFromNewType(sipRes,sipType_FbxAMatrix,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCameraStereo, sipName_GetRightCameraLocalMatrix, doc_FbxCameraStereo_GetRightCameraLocalMatrix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCameraStereo_GetRightCameraGlobalMatrix, "GetRightCameraGlobalMatrix(self) -> FbxAMatrix");

extern "C" {static PyObject *meth_FbxCameraStereo_GetRightCameraGlobalMatrix(PyObject *, PyObject *);}
static PyObject *meth_FbxCameraStereo_GetRightCameraGlobalMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxCameraStereo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCameraStereo, &sipCpp))
        {
             ::FbxAMatrix*sipRes;

            sipRes = new  ::FbxAMatrix(sipCpp->GetRightCameraGlobalMatrix());

            return sipConvertFromNewType(sipRes,sipType_FbxAMatrix,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCameraStereo, sipName_GetRightCameraGlobalMatrix, doc_FbxCameraStereo_GetRightCameraGlobalMatrix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCameraStereo_ReevaluateLeftCameraFilmOffsetX, "ReevaluateLeftCameraFilmOffsetX(self) -> float");

extern "C" {static PyObject *meth_FbxCameraStereo_ReevaluateLeftCameraFilmOffsetX(PyObject *, PyObject *);}
static PyObject *meth_FbxCameraStereo_ReevaluateLeftCameraFilmOffsetX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxCameraStereo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCameraStereo, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->ReevaluateLeftCameraFilmOffsetX();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCameraStereo, sipName_ReevaluateLeftCameraFilmOffsetX, doc_FbxCameraStereo_ReevaluateLeftCameraFilmOffsetX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxCameraStereo_ReevaluateRightCameraFilmOffsetX, "ReevaluateRightCameraFilmOffsetX(self) -> float");

extern "C" {static PyObject *meth_FbxCameraStereo_ReevaluateRightCameraFilmOffsetX(PyObject *, PyObject *);}
static PyObject *meth_FbxCameraStereo_ReevaluateRightCameraFilmOffsetX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxCameraStereo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCameraStereo, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->ReevaluateRightCameraFilmOffsetX();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxCameraStereo, sipName_ReevaluateRightCameraFilmOffsetX, doc_FbxCameraStereo_ReevaluateRightCameraFilmOffsetX);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_FbxCameraStereo___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxCameraStereo___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxCameraStereo *sipCpp = reinterpret_cast< ::FbxCameraStereo *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxCameraStereo));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxCameraStereo* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxCameraStereo, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxCameraStereo::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxCameraStereo, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxCameraStereo___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxCameraStereo___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxCameraStereo *sipCpp = reinterpret_cast< ::FbxCameraStereo *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxCameraStereo));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxCameraStereo* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxCameraStereo, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxCameraStereo::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxCameraStereo, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxCameraStereo(void *, const sipTypeDef *);}
static void *cast_FbxCameraStereo(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxCameraStereo *sipCpp = reinterpret_cast< ::FbxCameraStereo *>(sipCppV);

    if (targetType == sipType_FbxCameraStereo)
        return sipCppV;

    sipCppV = ((const sipClassTypeDef *)sipType_FbxCamera)->ctd_cast(static_cast< ::FbxCamera *>(sipCpp), targetType);
    if (sipCppV)
        return sipCppV;

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxCameraStereo(void *, int);}
static void release_FbxCameraStereo(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxCameraStereo[] = {{60, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxCameraStereo[] = {
    {(void *)slot_FbxCameraStereo___ne__, ne_slot},
    {(void *)slot_FbxCameraStereo___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxCameraStereo[] = {
    {sipName_Create, meth_FbxCameraStereo_Create, METH_VARARGS, doc_FbxCameraStereo_Create},
    {sipName_GetAttributeType, meth_FbxCameraStereo_GetAttributeType, METH_VARARGS, doc_FbxCameraStereo_GetAttributeType},
    {sipName_GetClassId, meth_FbxCameraStereo_GetClassId, METH_VARARGS, doc_FbxCameraStereo_GetClassId},
    {sipName_GetLeftCamera, meth_FbxCameraStereo_GetLeftCamera, METH_VARARGS, doc_FbxCameraStereo_GetLeftCamera},
    {sipName_GetLeftCameraGlobalMatrix, meth_FbxCameraStereo_GetLeftCameraGlobalMatrix, METH_VARARGS, doc_FbxCameraStereo_GetLeftCameraGlobalMatrix},
    {sipName_GetLeftCameraLocalMatrix, meth_FbxCameraStereo_GetLeftCameraLocalMatrix, METH_VARARGS, doc_FbxCameraStereo_GetLeftCameraLocalMatrix},
    {sipName_GetRightCamera, meth_FbxCameraStereo_GetRightCamera, METH_VARARGS, doc_FbxCameraStereo_GetRightCamera},
    {sipName_GetRightCameraGlobalMatrix, meth_FbxCameraStereo_GetRightCameraGlobalMatrix, METH_VARARGS, doc_FbxCameraStereo_GetRightCameraGlobalMatrix},
    {sipName_GetRightCameraLocalMatrix, meth_FbxCameraStereo_GetRightCameraLocalMatrix, METH_VARARGS, doc_FbxCameraStereo_GetRightCameraLocalMatrix},
    {sipName_ReevaluateLeftCameraFilmOffsetX, meth_FbxCameraStereo_ReevaluateLeftCameraFilmOffsetX, METH_VARARGS, doc_FbxCameraStereo_ReevaluateLeftCameraFilmOffsetX},
    {sipName_ReevaluateRightCameraFilmOffsetX, meth_FbxCameraStereo_ReevaluateRightCameraFilmOffsetX, METH_VARARGS, doc_FbxCameraStereo_ReevaluateRightCameraFilmOffsetX},
    {sipName_Reset, meth_FbxCameraStereo_Reset, METH_VARARGS, doc_FbxCameraStereo_Reset},
    {sipName_SetLeftCamera, meth_FbxCameraStereo_SetLeftCamera, METH_VARARGS, doc_FbxCameraStereo_SetLeftCamera},
    {sipName_SetRightCamera, meth_FbxCameraStereo_SetRightCamera, METH_VARARGS, doc_FbxCameraStereo_SetRightCamera}
};


extern "C" {static PyObject *varget_FbxCameraStereo_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCameraStereo_ClassId(void *, PyObject *sipPySelf, PyObject *)
{
    static PyObject *sipPy = SIP_NULLPTR;
     ::FbxClassId*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal = & ::FbxCameraStereo::ClassId;

    sipPy = sipConvertFromType(sipVal, sipType_FbxClassId, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -57, sipPySelf);
        Py_INCREF(sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxCameraStereo_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxCameraStereo_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy, sipType_FbxClassId, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxCameraStereo::ClassId = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCameraStereo_FilmOffsetLeftCam(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCameraStereo_FilmOffsetLeftCam(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble1*sipVal;
     ::FbxCameraStereo *sipCpp = reinterpret_cast< ::FbxCameraStereo *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -59);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->FilmOffsetLeftCam;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -58, sipPySelf);
        sipKeepReference(sipPySelf, -59, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxCameraStereo_FilmOffsetLeftCam(void *, PyObject *, PyObject *);}
static int varset_FbxCameraStereo_FilmOffsetLeftCam(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCameraStereo *sipCpp = reinterpret_cast< ::FbxCameraStereo *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FilmOffsetLeftCam = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCameraStereo_FilmOffsetRightCam(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCameraStereo_FilmOffsetRightCam(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble1*sipVal;
     ::FbxCameraStereo *sipCpp = reinterpret_cast< ::FbxCameraStereo *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -61);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->FilmOffsetRightCam;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -60, sipPySelf);
        sipKeepReference(sipPySelf, -61, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxCameraStereo_FilmOffsetRightCam(void *, PyObject *, PyObject *);}
static int varset_FbxCameraStereo_FilmOffsetRightCam(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCameraStereo *sipCpp = reinterpret_cast< ::FbxCameraStereo *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FilmOffsetRightCam = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCameraStereo_InteraxialSeparation(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCameraStereo_InteraxialSeparation(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble1*sipVal;
     ::FbxCameraStereo *sipCpp = reinterpret_cast< ::FbxCameraStereo *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -63);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->InteraxialSeparation;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -62, sipPySelf);
        sipKeepReference(sipPySelf, -63, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxCameraStereo_InteraxialSeparation(void *, PyObject *, PyObject *);}
static int varset_FbxCameraStereo_InteraxialSeparation(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCameraStereo *sipCpp = reinterpret_cast< ::FbxCameraStereo *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->InteraxialSeparation = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCameraStereo_LeftCamera(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCameraStereo_LeftCamera(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyFbxReference*sipVal;
     ::FbxCameraStereo *sipCpp = reinterpret_cast< ::FbxCameraStereo *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -65);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->LeftCamera;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyFbxReference, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -64, sipPySelf);
        sipKeepReference(sipPySelf, -65, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxCameraStereo_LeftCamera(void *, PyObject *, PyObject *);}
static int varset_FbxCameraStereo_LeftCamera(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxCameraStereo *sipCpp = reinterpret_cast< ::FbxCameraStereo *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyFbxReference *>(sipForceConvertToType(sipPy, sipType_FbxPropertyFbxReference, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->LeftCamera = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCameraStereo_PrecompFileName(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCameraStereo_PrecompFileName(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyString*sipVal;
     ::FbxCameraStereo *sipCpp = reinterpret_cast< ::FbxCameraStereo *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -67);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->PrecompFileName;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyString, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -66, sipPySelf);
        sipKeepReference(sipPySelf, -67, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxCameraStereo_PrecompFileName(void *, PyObject *, PyObject *);}
static int varset_FbxCameraStereo_PrecompFileName(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyString*sipVal;
     ::FbxCameraStereo *sipCpp = reinterpret_cast< ::FbxCameraStereo *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyString *>(sipForceConvertToType(sipPy, sipType_FbxPropertyString, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->PrecompFileName = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCameraStereo_RelativePrecompFileName(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCameraStereo_RelativePrecompFileName(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyString*sipVal;
     ::FbxCameraStereo *sipCpp = reinterpret_cast< ::FbxCameraStereo *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -69);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->RelativePrecompFileName;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyString, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -68, sipPySelf);
        sipKeepReference(sipPySelf, -69, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxCameraStereo_RelativePrecompFileName(void *, PyObject *, PyObject *);}
static int varset_FbxCameraStereo_RelativePrecompFileName(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyString*sipVal;
     ::FbxCameraStereo *sipCpp = reinterpret_cast< ::FbxCameraStereo *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyString *>(sipForceConvertToType(sipPy, sipType_FbxPropertyString, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RelativePrecompFileName = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCameraStereo_RightCamera(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCameraStereo_RightCamera(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyFbxReference*sipVal;
     ::FbxCameraStereo *sipCpp = reinterpret_cast< ::FbxCameraStereo *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -71);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->RightCamera;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyFbxReference, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -70, sipPySelf);
        sipKeepReference(sipPySelf, -71, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxCameraStereo_RightCamera(void *, PyObject *, PyObject *);}
static int varset_FbxCameraStereo_RightCamera(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxCameraStereo *sipCpp = reinterpret_cast< ::FbxCameraStereo *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyFbxReference *>(sipForceConvertToType(sipPy, sipType_FbxPropertyFbxReference, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RightCamera = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCameraStereo_Stereo(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCameraStereo_Stereo(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyFbxCameraStereoEStereoType*sipVal;
     ::FbxCameraStereo *sipCpp = reinterpret_cast< ::FbxCameraStereo *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -73);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->Stereo;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyFbxCameraStereoEStereoType, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -72, sipPySelf);
        sipKeepReference(sipPySelf, -73, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxCameraStereo_Stereo(void *, PyObject *, PyObject *);}
static int varset_FbxCameraStereo_Stereo(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxCameraStereoEStereoType*sipVal;
     ::FbxCameraStereo *sipCpp = reinterpret_cast< ::FbxCameraStereo *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyFbxCameraStereoEStereoType *>(sipForceConvertToType(sipPy, sipType_FbxPropertyFbxCameraStereoEStereoType, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Stereo = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCameraStereo_ToeInAdjust(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCameraStereo_ToeInAdjust(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble1*sipVal;
     ::FbxCameraStereo *sipCpp = reinterpret_cast< ::FbxCameraStereo *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -75);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->ToeInAdjust;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -74, sipPySelf);
        sipKeepReference(sipPySelf, -75, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxCameraStereo_ToeInAdjust(void *, PyObject *, PyObject *);}
static int varset_FbxCameraStereo_ToeInAdjust(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCameraStereo *sipCpp = reinterpret_cast< ::FbxCameraStereo *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ToeInAdjust = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCameraStereo_ZeroParallax(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCameraStereo_ZeroParallax(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble1*sipVal;
     ::FbxCameraStereo *sipCpp = reinterpret_cast< ::FbxCameraStereo *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -77);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->ZeroParallax;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -76, sipPySelf);
        sipKeepReference(sipPySelf, -77, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxCameraStereo_ZeroParallax(void *, PyObject *, PyObject *);}
static int varset_FbxCameraStereo_ZeroParallax(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCameraStereo *sipCpp = reinterpret_cast< ::FbxCameraStereo *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ZeroParallax = *sipVal;

    return 0;
}

sipVariableDef variables_FbxCameraStereo[] = {
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxCameraStereo_ClassId, (PyMethodDef *)varset_FbxCameraStereo_ClassId, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_FilmOffsetLeftCam, (PyMethodDef *)varget_FbxCameraStereo_FilmOffsetLeftCam, (PyMethodDef *)varset_FbxCameraStereo_FilmOffsetLeftCam, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_FilmOffsetRightCam, (PyMethodDef *)varget_FbxCameraStereo_FilmOffsetRightCam, (PyMethodDef *)varset_FbxCameraStereo_FilmOffsetRightCam, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_InteraxialSeparation, (PyMethodDef *)varget_FbxCameraStereo_InteraxialSeparation, (PyMethodDef *)varset_FbxCameraStereo_InteraxialSeparation, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_LeftCamera, (PyMethodDef *)varget_FbxCameraStereo_LeftCamera, (PyMethodDef *)varset_FbxCameraStereo_LeftCamera, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_PrecompFileName, (PyMethodDef *)varget_FbxCameraStereo_PrecompFileName, (PyMethodDef *)varset_FbxCameraStereo_PrecompFileName, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_RelativePrecompFileName, (PyMethodDef *)varget_FbxCameraStereo_RelativePrecompFileName, (PyMethodDef *)varset_FbxCameraStereo_RelativePrecompFileName, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_RightCamera, (PyMethodDef *)varget_FbxCameraStereo_RightCamera, (PyMethodDef *)varset_FbxCameraStereo_RightCamera, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_Stereo, (PyMethodDef *)varget_FbxCameraStereo_Stereo, (PyMethodDef *)varset_FbxCameraStereo_Stereo, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_ToeInAdjust, (PyMethodDef *)varget_FbxCameraStereo_ToeInAdjust, (PyMethodDef *)varset_FbxCameraStereo_ToeInAdjust, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_ZeroParallax, (PyMethodDef *)varget_FbxCameraStereo_ZeroParallax, (PyMethodDef *)varset_FbxCameraStereo_ZeroParallax, SIP_NULLPTR, SIP_NULLPTR},
};


/* Define the enum members and ints to be added to this type. */
static sipIntInstanceDef intInstances_FbxCameraStereo[] = {
    {sipName_eNone, static_cast<int>( ::FbxCameraStereo::eNone)},
    {sipName_eConverged, static_cast<int>( ::FbxCameraStereo::eConverged)},
    {sipName_eOffAxis, static_cast<int>( ::FbxCameraStereo::eOffAxis)},
    {sipName_eParallel, static_cast<int>( ::FbxCameraStereo::eParallel)},
    {0, 0}
};


sipClassTypeDef sipTypeDef_fbx_FbxCameraStereo = {
    {
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxCameraStereo,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxCameraStereo,
        {0, 0, 1},
        14, methods_FbxCameraStereo,
        11, variables_FbxCameraStereo,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, intInstances_FbxCameraStereo, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_FbxCameraStereo,
    slots_FbxCameraStereo,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_FbxCameraStereo,
    cast_FbxCameraStereo,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
