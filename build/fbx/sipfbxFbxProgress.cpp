/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxProgress_SetTotal, "SetTotal(self, float)");

extern "C" {static PyObject *meth_FbxProgress_SetTotal(PyObject *, PyObject *);}
static PyObject *meth_FbxProgress_SetTotal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::FbxProgress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_FbxProgress, &sipCpp, &a0))
        {
            sipCpp->SetTotal(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProgress, sipName_SetTotal, doc_FbxProgress_SetTotal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProgress_SetThreshold, "SetThreshold(self, float)");

extern "C" {static PyObject *meth_FbxProgress_SetThreshold(PyObject *, PyObject *);}
static PyObject *meth_FbxProgress_SetThreshold(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::FbxProgress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_FbxProgress, &sipCpp, &a0))
        {
            sipCpp->SetThreshold(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProgress, sipName_SetThreshold, doc_FbxProgress_SetThreshold);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProgress_Update, "Update(self, float, str = None)");

extern "C" {static PyObject *meth_FbxProgress_Update(PyObject *, PyObject *);}
static PyObject *meth_FbxProgress_Update(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
         ::FbxProgress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf|A8", &sipSelf, sipType_FbxProgress, &sipCpp, &a0, &a1Keep, &a1))
        {
            sipCpp->Update(a0,a1);
            Py_XDECREF(a1Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProgress, sipName_Update, doc_FbxProgress_Update);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProgress_Reset, "Reset(self)");

extern "C" {static PyObject *meth_FbxProgress_Reset(PyObject *, PyObject *);}
static PyObject *meth_FbxProgress_Reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxProgress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProgress, &sipCpp))
        {
            sipCpp->Reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProgress, sipName_Reset, doc_FbxProgress_Reset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProgress_GetProgress, "GetProgress(self, FbxString = None) -> float");

extern "C" {static PyObject *meth_FbxProgress_GetProgress(PyObject *, PyObject *);}
static PyObject *meth_FbxProgress_GetProgress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxString* a0 = 0;
        int a0State = 0;
         ::FbxProgress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J0", &sipSelf, sipType_FbxProgress, &sipCpp, sipType_FbxString, &a0, &a0State))
        {
            float sipRes;

            sipRes = sipCpp->GetProgress(a0);
            sipReleaseType(a0, sipType_FbxString, a0State);

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProgress, sipName_GetProgress, doc_FbxProgress_GetProgress);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProgress_Complete, "Complete(self, str = None)");

extern "C" {static PyObject *meth_FbxProgress_Complete(PyObject *, PyObject *);}
static PyObject *meth_FbxProgress_Complete(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0 = 0;
        PyObject *a0Keep = 0;
         ::FbxProgress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|A8", &sipSelf, sipType_FbxProgress, &sipCpp, &a0Keep, &a0))
        {
            sipCpp->Complete(a0);
            Py_XDECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProgress, sipName_Complete, doc_FbxProgress_Complete);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxProgress_Cancel, "Cancel(self)");

extern "C" {static PyObject *meth_FbxProgress_Cancel(PyObject *, PyObject *);}
static PyObject *meth_FbxProgress_Cancel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxProgress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxProgress, &sipCpp))
        {
            sipCpp->Cancel();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxProgress, sipName_Cancel, doc_FbxProgress_Cancel);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxProgress(void *, int);}
static void release_FbxProgress(void *sipCppV, int)
{
    delete reinterpret_cast< ::FbxProgress *>(sipCppV);
}


extern "C" {static void *array_FbxProgress(Py_ssize_t);}
static void *array_FbxProgress(Py_ssize_t sipNrElem)
{
    return new  ::FbxProgress[sipNrElem];
}


extern "C" {static void assign_FbxProgress(void *, Py_ssize_t, void *);}
static void assign_FbxProgress(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::FbxProgress *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::FbxProgress *>(sipSrc);
}


extern "C" {static void *copy_FbxProgress(const void *, Py_ssize_t);}
static void *copy_FbxProgress(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::FbxProgress(reinterpret_cast<const  ::FbxProgress *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxProgress(sipSimpleWrapper *);}
static void dealloc_FbxProgress(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxProgress(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_FbxProgress(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxProgress(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::FbxProgress *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::FbxProgress();

            return sipCpp;
        }
    }

    {
        const  ::FbxProgress* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_FbxProgress, &a0))
        {
            sipCpp = new  ::FbxProgress(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_FbxProgress[] = {
    {sipName_Cancel, meth_FbxProgress_Cancel, METH_VARARGS, doc_FbxProgress_Cancel},
    {sipName_Complete, meth_FbxProgress_Complete, METH_VARARGS, doc_FbxProgress_Complete},
    {sipName_GetProgress, meth_FbxProgress_GetProgress, METH_VARARGS, doc_FbxProgress_GetProgress},
    {sipName_Reset, meth_FbxProgress_Reset, METH_VARARGS, doc_FbxProgress_Reset},
    {sipName_SetThreshold, meth_FbxProgress_SetThreshold, METH_VARARGS, doc_FbxProgress_SetThreshold},
    {sipName_SetTotal, meth_FbxProgress_SetTotal, METH_VARARGS, doc_FbxProgress_SetTotal},
    {sipName_Update, meth_FbxProgress_Update, METH_VARARGS, doc_FbxProgress_Update}
};

PyDoc_STRVAR(doc_FbxProgress, "\1FbxProgress()\n"
"FbxProgress(FbxProgress)");


sipClassTypeDef sipTypeDef_fbx_FbxProgress = {
    {
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_FbxProgress,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxProgress,
        {0, 0, 1},
        7, methods_FbxProgress,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_FbxProgress,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_FbxProgress,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_FbxProgress,
    assign_FbxProgress,
    array_FbxProgress,
    copy_FbxProgress,
    release_FbxProgress,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
