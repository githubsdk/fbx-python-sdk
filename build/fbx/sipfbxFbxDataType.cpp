/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxDataType_Create, "Create(str, EFbxType) -> FbxDataType\n"
"Create(str, FbxDataType) -> FbxDataType");

extern "C" {static PyObject *meth_FbxDataType_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxDataType_Create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
         ::EFbxType a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "CA8E", &sipSelf, &a0Keep, &a0, sipType_EFbxType, &a1))
        {
             ::FbxDataType*sipRes;

            sipRes = new  ::FbxDataType( ::FbxDataType::Create(a0,a1));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxDataType,SIP_NULLPTR);
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::FbxDataType* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "CA8J9", &sipSelf, &a0Keep, &a0, sipType_FbxDataType, &a1))
        {
             ::FbxDataType*sipRes;

            sipRes = new  ::FbxDataType( ::FbxDataType::Create(a0,*a1));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxDataType,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxDataType, sipName_Create, doc_FbxDataType_Create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxDataType_Destroy, "Destroy(self)");

extern "C" {static PyObject *meth_FbxDataType_Destroy(PyObject *, PyObject *);}
static PyObject *meth_FbxDataType_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxDataType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxDataType, &sipCpp))
        {
            sipCpp->Destroy();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxDataType, sipName_Destroy, doc_FbxDataType_Destroy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxDataType_Valid, "Valid(self) -> bool");

extern "C" {static PyObject *meth_FbxDataType_Valid(PyObject *, PyObject *);}
static PyObject *meth_FbxDataType_Valid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxDataType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxDataType, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->Valid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxDataType, sipName_Valid, doc_FbxDataType_Valid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxDataType_Is, "Is(self, FbxDataType) -> bool");

extern "C" {static PyObject *meth_FbxDataType_Is(PyObject *, PyObject *);}
static PyObject *meth_FbxDataType_Is(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxDataType* a0;
         ::FbxDataType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxDataType, &sipCpp, sipType_FbxDataType, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->Is(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxDataType, sipName_Is, doc_FbxDataType_Is);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxDataType_GetType, "GetType(self) -> EFbxType");

extern "C" {static PyObject *meth_FbxDataType_GetType(PyObject *, PyObject *);}
static PyObject *meth_FbxDataType_GetType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxDataType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxDataType, &sipCpp))
        {
             ::EFbxType sipRes;

            sipRes = sipCpp->GetType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_EFbxType);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxDataType, sipName_GetType, doc_FbxDataType_GetType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxDataType_GetName, "GetName(self) -> str");

extern "C" {static PyObject *meth_FbxDataType_GetName(PyObject *, PyObject *);}
static PyObject *meth_FbxDataType_GetName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxDataType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxDataType, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->GetName();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_FromString(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxDataType, sipName_GetName, doc_FbxDataType_GetName);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_FbxDataType___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxDataType___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxDataType *sipCpp = reinterpret_cast< ::FbxDataType *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxDataType));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxDataType* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxDataType, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxDataType::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxDataType, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxDataType___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxDataType___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxDataType *sipCpp = reinterpret_cast< ::FbxDataType *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxDataType));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxDataType* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxDataType, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxDataType::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxDataType, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxDataType(void *, int);}
static void release_FbxDataType(void *sipCppV, int)
{
    delete reinterpret_cast< ::FbxDataType *>(sipCppV);
}


extern "C" {static void *array_FbxDataType(Py_ssize_t);}
static void *array_FbxDataType(Py_ssize_t sipNrElem)
{
    return new  ::FbxDataType[sipNrElem];
}


extern "C" {static void assign_FbxDataType(void *, Py_ssize_t, void *);}
static void assign_FbxDataType(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::FbxDataType *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::FbxDataType *>(sipSrc);
}


extern "C" {static void *copy_FbxDataType(const void *, Py_ssize_t);}
static void *copy_FbxDataType(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::FbxDataType(reinterpret_cast<const  ::FbxDataType *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxDataType(sipSimpleWrapper *);}
static void dealloc_FbxDataType(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxDataType(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_FbxDataType(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxDataType(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::FbxDataType *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::FbxDataType();

            return sipCpp;
        }
    }

    {
        const  ::FbxDataType* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_FbxDataType, &a0))
        {
            sipCpp = new  ::FbxDataType(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxDataType[] = {
    {(void *)slot_FbxDataType___ne__, ne_slot},
    {(void *)slot_FbxDataType___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxDataType[] = {
    {sipName_Create, meth_FbxDataType_Create, METH_VARARGS, doc_FbxDataType_Create},
    {sipName_Destroy, meth_FbxDataType_Destroy, METH_VARARGS, doc_FbxDataType_Destroy},
    {sipName_GetName, meth_FbxDataType_GetName, METH_VARARGS, doc_FbxDataType_GetName},
    {sipName_GetType, meth_FbxDataType_GetType, METH_VARARGS, doc_FbxDataType_GetType},
    {sipName_Is, meth_FbxDataType_Is, METH_VARARGS, doc_FbxDataType_Is},
    {sipName_Valid, meth_FbxDataType_Valid, METH_VARARGS, doc_FbxDataType_Valid}
};

PyDoc_STRVAR(doc_FbxDataType, "\1FbxDataType()\n"
"FbxDataType(FbxDataType)");


sipClassTypeDef sipTypeDef_fbx_FbxDataType = {
    {
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_FbxDataType,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxDataType,
        {0, 0, 1},
        6, methods_FbxDataType,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_FbxDataType,
    -1,
    -1,
    SIP_NULLPTR,
    slots_FbxDataType,
    init_type_FbxDataType,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_FbxDataType,
    assign_FbxDataType,
    array_FbxDataType,
    copy_FbxDataType,
    release_FbxDataType,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
