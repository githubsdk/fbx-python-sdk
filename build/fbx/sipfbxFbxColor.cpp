/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxColor_Set, "Set(self, float, float, float, float = 1)");

extern "C" {static PyObject *meth_FbxColor_Set(PyObject *, PyObject *);}
static PyObject *meth_FbxColor_Set(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
        double a1;
        double a2;
        double a3 = 1;
         ::FbxColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bddd|d", &sipSelf, sipType_FbxColor, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->Set(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxColor, sipName_Set, doc_FbxColor_Set);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxColor_IsValid, "IsValid(self) -> bool");

extern "C" {static PyObject *meth_FbxColor_IsValid(PyObject *, PyObject *);}
static PyObject *meth_FbxColor_IsValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxColor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->IsValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxColor, sipName_IsValid, doc_FbxColor_IsValid);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_FbxColor___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxColor___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxColor *sipCpp = reinterpret_cast< ::FbxColor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxColor));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxColor* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxColor, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxColor::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxColor, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxColor___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxColor___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxColor *sipCpp = reinterpret_cast< ::FbxColor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxColor));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxColor* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxColor, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxColor::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxColor, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxColor(void *, int);}
static void release_FbxColor(void *sipCppV, int)
{
    delete reinterpret_cast< ::FbxColor *>(sipCppV);
}


extern "C" {static void *array_FbxColor(Py_ssize_t);}
static void *array_FbxColor(Py_ssize_t sipNrElem)
{
    return new  ::FbxColor[sipNrElem];
}


extern "C" {static void assign_FbxColor(void *, Py_ssize_t, void *);}
static void assign_FbxColor(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::FbxColor *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::FbxColor *>(sipSrc);
}


extern "C" {static void *copy_FbxColor(const void *, Py_ssize_t);}
static void *copy_FbxColor(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::FbxColor(reinterpret_cast<const  ::FbxColor *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxColor(sipSimpleWrapper *);}
static void dealloc_FbxColor(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxColor(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_FbxColor(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxColor(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::FbxColor *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::FbxColor();

            return sipCpp;
        }
    }

    {
        double a0;
        double a1;
        double a2;
        double a3 = 1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "ddd|d", &a0, &a1, &a2, &a3))
        {
            sipCpp = new  ::FbxColor(a0,a1,a2,a3);

            return sipCpp;
        }
    }

    {
        const  ::FbxColor* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_FbxColor, &a0))
        {
            sipCpp = new  ::FbxColor(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxColor[] = {
    {(void *)slot_FbxColor___ne__, ne_slot},
    {(void *)slot_FbxColor___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxColor[] = {
    {sipName_IsValid, meth_FbxColor_IsValid, METH_VARARGS, doc_FbxColor_IsValid},
    {sipName_Set, meth_FbxColor_Set, METH_VARARGS, doc_FbxColor_Set}
};


extern "C" {static PyObject *varget_FbxColor_mAlpha(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxColor_mAlpha(void *sipSelf, PyObject *, PyObject *)
{
    double sipVal;
     ::FbxColor *sipCpp = reinterpret_cast< ::FbxColor *>(sipSelf);

    sipVal = sipCpp->mAlpha;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_FbxColor_mAlpha(void *, PyObject *, PyObject *);}
static int varset_FbxColor_mAlpha(void *sipSelf, PyObject *sipPy, PyObject *)
{
    double sipVal;
     ::FbxColor *sipCpp = reinterpret_cast< ::FbxColor *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->mAlpha = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxColor_mBlue(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxColor_mBlue(void *sipSelf, PyObject *, PyObject *)
{
    double sipVal;
     ::FbxColor *sipCpp = reinterpret_cast< ::FbxColor *>(sipSelf);

    sipVal = sipCpp->mBlue;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_FbxColor_mBlue(void *, PyObject *, PyObject *);}
static int varset_FbxColor_mBlue(void *sipSelf, PyObject *sipPy, PyObject *)
{
    double sipVal;
     ::FbxColor *sipCpp = reinterpret_cast< ::FbxColor *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->mBlue = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxColor_mGreen(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxColor_mGreen(void *sipSelf, PyObject *, PyObject *)
{
    double sipVal;
     ::FbxColor *sipCpp = reinterpret_cast< ::FbxColor *>(sipSelf);

    sipVal = sipCpp->mGreen;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_FbxColor_mGreen(void *, PyObject *, PyObject *);}
static int varset_FbxColor_mGreen(void *sipSelf, PyObject *sipPy, PyObject *)
{
    double sipVal;
     ::FbxColor *sipCpp = reinterpret_cast< ::FbxColor *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->mGreen = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxColor_mRed(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxColor_mRed(void *sipSelf, PyObject *, PyObject *)
{
    double sipVal;
     ::FbxColor *sipCpp = reinterpret_cast< ::FbxColor *>(sipSelf);

    sipVal = sipCpp->mRed;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_FbxColor_mRed(void *, PyObject *, PyObject *);}
static int varset_FbxColor_mRed(void *sipSelf, PyObject *sipPy, PyObject *)
{
    double sipVal;
     ::FbxColor *sipCpp = reinterpret_cast< ::FbxColor *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->mRed = sipVal;

    return 0;
}

sipVariableDef variables_FbxColor[] = {
    {InstanceVariable, sipName_mAlpha, (PyMethodDef *)varget_FbxColor_mAlpha, (PyMethodDef *)varset_FbxColor_mAlpha, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_mBlue, (PyMethodDef *)varget_FbxColor_mBlue, (PyMethodDef *)varset_FbxColor_mBlue, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_mGreen, (PyMethodDef *)varget_FbxColor_mGreen, (PyMethodDef *)varset_FbxColor_mGreen, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_mRed, (PyMethodDef *)varget_FbxColor_mRed, (PyMethodDef *)varset_FbxColor_mRed, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_FbxColor, "\1FbxColor()\n"
"FbxColor(float, float, float, float = 1)\n"
"FbxColor(FbxColor)");


sipClassTypeDef sipTypeDef_fbx_FbxColor = {
    {
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_FbxColor,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxColor,
        {0, 0, 1},
        2, methods_FbxColor,
        4, variables_FbxColor,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_FbxColor,
    -1,
    -1,
    SIP_NULLPTR,
    slots_FbxColor,
    init_type_FbxColor,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_FbxColor,
    assign_FbxColor,
    array_FbxColor,
    copy_FbxColor,
    release_FbxColor,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
