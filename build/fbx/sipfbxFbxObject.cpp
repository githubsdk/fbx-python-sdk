/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxObject_Destroy, "Destroy(self, bool = False)");

extern "C" {static PyObject *meth_FbxObject_Destroy(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 0;
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|b", &sipSelf, sipType_FbxObject, &sipCpp, &a0))
        {
            sipCpp->Destroy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_Destroy, doc_FbxObject_Destroy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_Create, "Create(FbxManager, str) -> FbxObject\n"
"Create(FbxObject, str) -> FbxObject");

extern "C" {static PyObject *meth_FbxObject_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_Create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8A8", &sipSelf, sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxObject*sipRes;

            sipRes =  ::FbxObject::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8A8", &sipSelf, sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxObject*sipRes;

            sipRes =  ::FbxObject::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_Create, doc_FbxObject_Create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxObject_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxObject)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxObject::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetClassId, doc_FbxObject_GetClassId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_Clone, "Clone(self, FbxObject.ECloneType = FbxObject.eDeepClone, FbxObject = None, sip.voidptr = None) -> FbxObject");

extern "C" {static PyObject *meth_FbxObject_Clone(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxObject)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxObject::ECloneType a0 =  ::FbxObject::eDeepClone;
         ::FbxObject* a1 = 0;
        void* a2 = 0;
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|EJ8v", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxObject_ECloneType, &a0, sipType_FbxObject, &a1, &a2))
        {
             ::FbxObject*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxObject::Clone(a0,a1,a2) : sipCpp->Clone(a0,a1,a2));

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_Clone, doc_FbxObject_Clone);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_IsAReferenceTo, "IsAReferenceTo(self) -> bool");

extern "C" {static PyObject *meth_FbxObject_IsAReferenceTo(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_IsAReferenceTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->IsAReferenceTo();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_IsAReferenceTo, doc_FbxObject_IsAReferenceTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetReferenceTo, "GetReferenceTo(self) -> FbxObject");

extern "C" {static PyObject *meth_FbxObject_GetReferenceTo(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetReferenceTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->GetReferenceTo();

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetReferenceTo, doc_FbxObject_GetReferenceTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_IsReferencedBy, "IsReferencedBy(self) -> bool");

extern "C" {static PyObject *meth_FbxObject_IsReferencedBy(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_IsReferencedBy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->IsReferencedBy();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_IsReferencedBy, doc_FbxObject_IsReferencedBy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetReferencedByCount, "GetReferencedByCount(self) -> int");

extern "C" {static PyObject *meth_FbxObject_GetReferencedByCount(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetReferencedByCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetReferencedByCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetReferencedByCount, doc_FbxObject_GetReferencedByCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetReferencedBy, "GetReferencedBy(self, int) -> FbxObject");

extern "C" {static PyObject *meth_FbxObject_GetReferencedBy(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetReferencedBy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxObject, &sipCpp, &a0))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->GetReferencedBy(a0);

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetReferencedBy, doc_FbxObject_GetReferencedBy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_ContentUnload, "ContentUnload(self) -> int");

extern "C" {static PyObject *meth_FbxObject_ContentUnload(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_ContentUnload(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->ContentUnload();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_ContentUnload, doc_FbxObject_ContentUnload);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_ContentLoad, "ContentLoad(self) -> int");

extern "C" {static PyObject *meth_FbxObject_ContentLoad(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_ContentLoad(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->ContentLoad();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_ContentLoad, doc_FbxObject_ContentLoad);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_ContentIsLoaded, "ContentIsLoaded(self) -> bool");

extern "C" {static PyObject *meth_FbxObject_ContentIsLoaded(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_ContentIsLoaded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->ContentIsLoaded();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_ContentIsLoaded, doc_FbxObject_ContentIsLoaded);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_ContentDecrementLockCount, "ContentDecrementLockCount(self)");

extern "C" {static PyObject *meth_FbxObject_ContentDecrementLockCount(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_ContentDecrementLockCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
            sipCpp->ContentDecrementLockCount();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_ContentDecrementLockCount, doc_FbxObject_ContentDecrementLockCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_ContentIncrementLockCount, "ContentIncrementLockCount(self)");

extern "C" {static PyObject *meth_FbxObject_ContentIncrementLockCount(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_ContentIncrementLockCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
            sipCpp->ContentIncrementLockCount();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_ContentIncrementLockCount, doc_FbxObject_ContentIncrementLockCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_ContentIsLocked, "ContentIsLocked(self) -> bool");

extern "C" {static PyObject *meth_FbxObject_ContentIsLocked(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_ContentIsLocked(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->ContentIsLocked();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_ContentIsLocked, doc_FbxObject_ContentIsLocked);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_SetName, "SetName(self, str)");

extern "C" {static PyObject *meth_FbxObject_SetName(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_SetName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxObject, &sipCpp, &a0Keep, &a0))
        {
            sipCpp->SetName(a0);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_SetName, doc_FbxObject_SetName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetName, "GetName(self) -> str");

extern "C" {static PyObject *meth_FbxObject_GetName(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->GetName();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_FromString(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetName, doc_FbxObject_GetName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetNameWithoutNameSpacePrefix, "GetNameWithoutNameSpacePrefix(self) -> FbxString");

extern "C" {static PyObject *meth_FbxObject_GetNameWithoutNameSpacePrefix(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetNameWithoutNameSpacePrefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString(sipCpp->GetNameWithoutNameSpacePrefix());

            return sipConvertFromNewType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetNameWithoutNameSpacePrefix, doc_FbxObject_GetNameWithoutNameSpacePrefix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetNameWithNameSpacePrefix, "GetNameWithNameSpacePrefix(self) -> FbxString");

extern "C" {static PyObject *meth_FbxObject_GetNameWithNameSpacePrefix(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetNameWithNameSpacePrefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString(sipCpp->GetNameWithNameSpacePrefix());

            return sipConvertFromNewType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetNameWithNameSpacePrefix, doc_FbxObject_GetNameWithNameSpacePrefix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_SetInitialName, "SetInitialName(self, str)");

extern "C" {static PyObject *meth_FbxObject_SetInitialName(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_SetInitialName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxObject, &sipCpp, &a0Keep, &a0))
        {
            sipCpp->SetInitialName(a0);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_SetInitialName, doc_FbxObject_SetInitialName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetInitialName, "GetInitialName(self) -> str");

extern "C" {static PyObject *meth_FbxObject_GetInitialName(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetInitialName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->GetInitialName();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_FromString(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetInitialName, doc_FbxObject_GetInitialName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetNameSpaceOnly, "GetNameSpaceOnly(self) -> FbxString");

extern "C" {static PyObject *meth_FbxObject_GetNameSpaceOnly(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetNameSpaceOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString(sipCpp->GetNameSpaceOnly());

            return sipConvertFromNewType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetNameSpaceOnly, doc_FbxObject_GetNameSpaceOnly);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_SetNameSpace, "SetNameSpace(self, FbxString)");

extern "C" {static PyObject *meth_FbxObject_SetNameSpace(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_SetNameSpace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxString* a0;
        int a0State = 0;
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxString, &a0, &a0State))
        {
            sipCpp->SetNameSpace(*a0);
            sipReleaseType(a0, sipType_FbxString, a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_SetNameSpace, doc_FbxObject_SetNameSpace);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetNameSpaceArray, "GetNameSpaceArray(self, str) -> List");

extern "C" {static PyObject *meth_FbxObject_GetNameSpaceArray(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetNameSpaceArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        char a0;
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Ba8", &sipSelf, sipType_FbxObject, &sipCpp, &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 333 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxobject.sip"
        FbxArray<FbxString*> result = sipCpp->GetNameSpaceArray(a0);
        if ((sipRes = PyList_New(result.GetCount())) == NULL)
            return NULL;
            
        for (int i = 0; i < result.GetCount(); ++i)
        {
            PyList_SET_ITEM(sipRes, i, PyUnicode_DecodeASCII(result[i]->Buffer(), result[i]->GetLen(), NULL));
        }
#line 733 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxObject.cpp"

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetNameSpaceArray, doc_FbxObject_GetNameSpaceArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetNameOnly, "GetNameOnly(self) -> FbxString");

extern "C" {static PyObject *meth_FbxObject_GetNameOnly(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetNameOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString(sipCpp->GetNameOnly());

            return sipConvertFromNewType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetNameOnly, doc_FbxObject_GetNameOnly);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetNameSpacePrefix, "GetNameSpacePrefix(self) -> FbxString");

extern "C" {static PyObject *meth_FbxObject_GetNameSpacePrefix(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetNameSpacePrefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString(sipCpp->GetNameSpacePrefix());

            return sipConvertFromNewType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetNameSpacePrefix, doc_FbxObject_GetNameSpacePrefix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_RemovePrefix, "RemovePrefix(str) -> FbxString");

extern "C" {static PyObject *meth_FbxObject_RemovePrefix(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_RemovePrefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CA8", &sipSelf, &a0Keep, &a0))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString( ::FbxObject::RemovePrefix(a0));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_RemovePrefix, doc_FbxObject_RemovePrefix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_StripPrefix, "StripPrefix(FbxString) -> FbxString\n"
"StripPrefix(str) -> FbxString");

extern "C" {static PyObject *meth_FbxObject_StripPrefix(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_StripPrefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ1", &sipSelf, sipType_FbxString, &a0, &a0State))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString( ::FbxObject::StripPrefix(*a0));
            sipReleaseType(a0, sipType_FbxString, a0State);

            return sipConvertFromNewType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CA8", &sipSelf, &a0Keep, &a0))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString( ::FbxObject::StripPrefix(a0));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_StripPrefix, doc_FbxObject_StripPrefix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetUniqueID, "GetUniqueID(self) -> int");

extern "C" {static PyObject *meth_FbxObject_GetUniqueID(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetUniqueID(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
             ::FbxUInt64 sipRes;

            sipRes = sipCpp->GetUniqueID();

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetUniqueID, doc_FbxObject_GetUniqueID);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetSelected, "GetSelected(self) -> bool");

extern "C" {static PyObject *meth_FbxObject_GetSelected(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxObject)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxObject::GetSelected() : sipCpp->GetSelected());

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetSelected, doc_FbxObject_GetSelected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_SetSelected, "SetSelected(self, bool)");

extern "C" {static PyObject *meth_FbxObject_SetSelected(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_SetSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxObject)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxObject, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::FbxObject::SetSelected(a0) : sipCpp->SetSelected(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_SetSelected, doc_FbxObject_SetSelected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetFirstProperty, "GetFirstProperty(self) -> FbxProperty");

extern "C" {static PyObject *meth_FbxObject_GetFirstProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetFirstProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->GetFirstProperty());

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetFirstProperty, doc_FbxObject_GetFirstProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetNextProperty, "GetNextProperty(self, FbxProperty) -> FbxProperty");

extern "C" {static PyObject *meth_FbxObject_GetNextProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetNextProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty* a0;
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxProperty, &a0))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->GetNextProperty(*a0));

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetNextProperty, doc_FbxObject_GetNextProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_FindProperty, "FindProperty(self, str, bool = True) -> FbxProperty\n"
"FindProperty(self, str, FbxDataType, bool = True) -> FbxProperty");

extern "C" {static PyObject *meth_FbxObject_FindProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_FindProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        bool a1 = 1;
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8|b", &sipSelf, sipType_FbxObject, &sipCpp, &a0Keep, &a0, &a1))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->FindProperty(a0,a1));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::FbxDataType* a1;
        bool a2 = 1;
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8J9|b", &sipSelf, sipType_FbxObject, &sipCpp, &a0Keep, &a0, sipType_FbxDataType, &a1, &a2))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->FindProperty(a0,*a1,a2));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_FindProperty, doc_FbxObject_FindProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_FindPropertyHierarchical, "FindPropertyHierarchical(self, str, bool = True) -> FbxProperty\n"
"FindPropertyHierarchical(self, str, FbxDataType, bool = True) -> FbxProperty");

extern "C" {static PyObject *meth_FbxObject_FindPropertyHierarchical(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_FindPropertyHierarchical(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        bool a1 = 1;
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8|b", &sipSelf, sipType_FbxObject, &sipCpp, &a0Keep, &a0, &a1))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->FindPropertyHierarchical(a0,a1));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::FbxDataType* a1;
        bool a2 = 1;
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8J9|b", &sipSelf, sipType_FbxObject, &sipCpp, &a0Keep, &a0, sipType_FbxDataType, &a1, &a2))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->FindPropertyHierarchical(a0,*a1,a2));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_FindPropertyHierarchical, doc_FbxObject_FindPropertyHierarchical);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetClassRootProperty, "GetClassRootProperty(self) -> FbxProperty");

extern "C" {static PyObject *meth_FbxObject_GetClassRootProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetClassRootProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->GetClassRootProperty());

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetClassRootProperty, doc_FbxObject_GetClassRootProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_ConnectSrcObject, "ConnectSrcObject(self, FbxObject, FbxConnection.EType = FbxConnection.eNone) -> bool");

extern "C" {static PyObject *meth_FbxObject_ConnectSrcObject(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_ConnectSrcObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxObject* a0;
         ::FbxConnection::EType a1 = FbxConnection::eNone;
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|E", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxObject, &a0, sipType_FbxConnection_EType, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->ConnectSrcObject(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_ConnectSrcObject, doc_FbxObject_ConnectSrcObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_IsConnectedSrcObject, "IsConnectedSrcObject(self, FbxObject) -> bool");

extern "C" {static PyObject *meth_FbxObject_IsConnectedSrcObject(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_IsConnectedSrcObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject* a0;
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxObject, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->IsConnectedSrcObject(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_IsConnectedSrcObject, doc_FbxObject_IsConnectedSrcObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_DisconnectSrcObject, "DisconnectSrcObject(self, FbxObject) -> bool");

extern "C" {static PyObject *meth_FbxObject_DisconnectSrcObject(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_DisconnectSrcObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxObject* a0;
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxObject, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->DisconnectSrcObject(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_DisconnectSrcObject, doc_FbxObject_DisconnectSrcObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_DisconnectAllSrcObject, "DisconnectAllSrcObject(self) -> bool\n"
"DisconnectAllSrcObject(self, FbxCriteria) -> bool");

extern "C" {static PyObject *meth_FbxObject_DisconnectAllSrcObject(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_DisconnectAllSrcObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->DisconnectAllSrcObject();

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::FbxCriteria* a0;
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxCriteria, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->DisconnectAllSrcObject(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_DisconnectAllSrcObject, doc_FbxObject_DisconnectAllSrcObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetSrcObjectCount, "GetSrcObjectCount(self) -> int\n"
"GetSrcObjectCount(self, FbxCriteria) -> int");

extern "C" {static PyObject *meth_FbxObject_GetSrcObjectCount(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetSrcObjectCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetSrcObjectCount();

            return PyLong_FromLong(sipRes);
        }
    }

    {
        const  ::FbxCriteria* a0;
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxCriteria, &a0))
        {
            int sipRes;

            sipRes = sipCpp->GetSrcObjectCount(*a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetSrcObjectCount, doc_FbxObject_GetSrcObjectCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetSrcObject, "GetSrcObject(self, int = 0) -> FbxObject\n"
"GetSrcObject(self, FbxCriteria, int = 0) -> FbxObject");

extern "C" {static PyObject *meth_FbxObject_GetSrcObject(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetSrcObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_FbxObject, &sipCpp, &a0))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->GetSrcObject(a0);

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    {
        const  ::FbxCriteria* a0;
        int a1 = 0;
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|i", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxCriteria, &a0, &a1))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->GetSrcObject(*a0,a1);

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetSrcObject, doc_FbxObject_GetSrcObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_FindSrcObject, "FindSrcObject(self, str, int = 0) -> FbxObject\n"
"FindSrcObject(self, FbxCriteria, str, int = 0) -> FbxObject");

extern "C" {static PyObject *meth_FbxObject_FindSrcObject(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_FindSrcObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        int a1 = 0;
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8|i", &sipSelf, sipType_FbxObject, &sipCpp, &a0Keep, &a0, &a1))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->FindSrcObject(a0,a1);
            Py_DECREF(a0Keep);

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    {
        const  ::FbxCriteria* a0;
        const char* a1;
        PyObject *a1Keep;
        int a2 = 0;
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9A8|i", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxCriteria, &a0, &a1Keep, &a1, &a2))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->FindSrcObject(*a0,a1,a2);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_FindSrcObject, doc_FbxObject_FindSrcObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_ConnectDstObject, "ConnectDstObject(self, FbxObject, FbxConnection.EType = FbxConnection.eNone) -> bool");

extern "C" {static PyObject *meth_FbxObject_ConnectDstObject(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_ConnectDstObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxObject* a0;
         ::FbxConnection::EType a1 = FbxConnection::eNone;
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|E", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxObject, &a0, sipType_FbxConnection_EType, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->ConnectDstObject(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_ConnectDstObject, doc_FbxObject_ConnectDstObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_IsConnectedDstObject, "IsConnectedDstObject(self, FbxObject) -> bool");

extern "C" {static PyObject *meth_FbxObject_IsConnectedDstObject(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_IsConnectedDstObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject* a0;
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxObject, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->IsConnectedDstObject(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_IsConnectedDstObject, doc_FbxObject_IsConnectedDstObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_DisconnectDstObject, "DisconnectDstObject(self, FbxObject) -> bool");

extern "C" {static PyObject *meth_FbxObject_DisconnectDstObject(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_DisconnectDstObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxObject* a0;
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxObject, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->DisconnectDstObject(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_DisconnectDstObject, doc_FbxObject_DisconnectDstObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_DisconnectAllDstObject, "DisconnectAllDstObject(self) -> bool\n"
"DisconnectAllDstObject(self, FbxCriteria) -> bool");

extern "C" {static PyObject *meth_FbxObject_DisconnectAllDstObject(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_DisconnectAllDstObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->DisconnectAllDstObject();

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::FbxCriteria* a0;
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxCriteria, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->DisconnectAllDstObject(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_DisconnectAllDstObject, doc_FbxObject_DisconnectAllDstObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetDstObjectCount, "GetDstObjectCount(self) -> int\n"
"GetDstObjectCount(self, FbxCriteria) -> int");

extern "C" {static PyObject *meth_FbxObject_GetDstObjectCount(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetDstObjectCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetDstObjectCount();

            return PyLong_FromLong(sipRes);
        }
    }

    {
        const  ::FbxCriteria* a0;
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxCriteria, &a0))
        {
            int sipRes;

            sipRes = sipCpp->GetDstObjectCount(*a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetDstObjectCount, doc_FbxObject_GetDstObjectCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetDstObject, "GetDstObject(self, int = 0) -> FbxObject\n"
"GetDstObject(self, FbxCriteria, int = 0) -> FbxObject");

extern "C" {static PyObject *meth_FbxObject_GetDstObject(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetDstObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_FbxObject, &sipCpp, &a0))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->GetDstObject(a0);

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    {
        const  ::FbxCriteria* a0;
        int a1 = 0;
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|i", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxCriteria, &a0, &a1))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->GetDstObject(*a0,a1);

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetDstObject, doc_FbxObject_GetDstObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_FindDstObject, "FindDstObject(self, str, int = 0) -> FbxObject\n"
"FindDstObject(self, FbxCriteria, str, int = 0) -> FbxObject");

extern "C" {static PyObject *meth_FbxObject_FindDstObject(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_FindDstObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        int a1 = 0;
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8|i", &sipSelf, sipType_FbxObject, &sipCpp, &a0Keep, &a0, &a1))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->FindDstObject(a0,a1);
            Py_DECREF(a0Keep);

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    {
        const  ::FbxCriteria* a0;
        const char* a1;
        PyObject *a1Keep;
        int a2 = 0;
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9A8|i", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxCriteria, &a0, &a1Keep, &a1, &a2))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->FindDstObject(*a0,a1,a2);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_FindDstObject, doc_FbxObject_FindDstObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_ConnectSrcProperty, "ConnectSrcProperty(self, FbxProperty) -> bool");

extern "C" {static PyObject *meth_FbxObject_ConnectSrcProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_ConnectSrcProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty* a0;
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxProperty, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->ConnectSrcProperty(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_ConnectSrcProperty, doc_FbxObject_ConnectSrcProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_IsConnectedSrcProperty, "IsConnectedSrcProperty(self, FbxProperty) -> bool");

extern "C" {static PyObject *meth_FbxObject_IsConnectedSrcProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_IsConnectedSrcProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty* a0;
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxProperty, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->IsConnectedSrcProperty(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_IsConnectedSrcProperty, doc_FbxObject_IsConnectedSrcProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_DisconnectSrcProperty, "DisconnectSrcProperty(self, FbxProperty) -> bool");

extern "C" {static PyObject *meth_FbxObject_DisconnectSrcProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_DisconnectSrcProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty* a0;
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxProperty, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->DisconnectSrcProperty(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_DisconnectSrcProperty, doc_FbxObject_DisconnectSrcProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetSrcPropertyCount, "GetSrcPropertyCount(self) -> int");

extern "C" {static PyObject *meth_FbxObject_GetSrcPropertyCount(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetSrcPropertyCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetSrcPropertyCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetSrcPropertyCount, doc_FbxObject_GetSrcPropertyCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetSrcProperty, "GetSrcProperty(self, int = 0) -> FbxProperty");

extern "C" {static PyObject *meth_FbxObject_GetSrcProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetSrcProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_FbxObject, &sipCpp, &a0))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->GetSrcProperty(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetSrcProperty, doc_FbxObject_GetSrcProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_FindSrcProperty, "FindSrcProperty(self, str, int = 0) -> FbxProperty");

extern "C" {static PyObject *meth_FbxObject_FindSrcProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_FindSrcProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        int a1 = 0;
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8|i", &sipSelf, sipType_FbxObject, &sipCpp, &a0Keep, &a0, &a1))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->FindSrcProperty(a0,a1));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_FindSrcProperty, doc_FbxObject_FindSrcProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_ConnectDstProperty, "ConnectDstProperty(self, FbxProperty) -> bool");

extern "C" {static PyObject *meth_FbxObject_ConnectDstProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_ConnectDstProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty* a0;
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxProperty, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->ConnectDstProperty(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_ConnectDstProperty, doc_FbxObject_ConnectDstProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_IsConnectedDstProperty, "IsConnectedDstProperty(self, FbxProperty) -> bool");

extern "C" {static PyObject *meth_FbxObject_IsConnectedDstProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_IsConnectedDstProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty* a0;
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxProperty, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->IsConnectedDstProperty(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_IsConnectedDstProperty, doc_FbxObject_IsConnectedDstProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_DisconnectDstProperty, "DisconnectDstProperty(self, FbxProperty) -> bool");

extern "C" {static PyObject *meth_FbxObject_DisconnectDstProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_DisconnectDstProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxProperty* a0;
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxProperty, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->DisconnectDstProperty(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_DisconnectDstProperty, doc_FbxObject_DisconnectDstProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetDstPropertyCount, "GetDstPropertyCount(self) -> int");

extern "C" {static PyObject *meth_FbxObject_GetDstPropertyCount(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetDstPropertyCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetDstPropertyCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetDstPropertyCount, doc_FbxObject_GetDstPropertyCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetDstProperty, "GetDstProperty(self, int = 0) -> FbxProperty");

extern "C" {static PyObject *meth_FbxObject_GetDstProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetDstProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_FbxObject, &sipCpp, &a0))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->GetDstProperty(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetDstProperty, doc_FbxObject_GetDstProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_FindDstProperty, "FindDstProperty(self, str, int = 0) -> FbxProperty");

extern "C" {static PyObject *meth_FbxObject_FindDstProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_FindDstProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        int a1 = 0;
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8|i", &sipSelf, sipType_FbxObject, &sipCpp, &a0Keep, &a0, &a1))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->FindDstProperty(a0,a1));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_FindDstProperty, doc_FbxObject_FindDstProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetDocument, "GetDocument(self) -> FbxDocument");

extern "C" {static PyObject *meth_FbxObject_GetDocument(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
             ::FbxDocument*sipRes;

            sipRes = sipCpp->GetDocument();

            return sipConvertFromType(sipRes,sipType_FbxDocument,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetDocument, doc_FbxObject_GetDocument);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_SetDocument, "SetDocument(self, FbxDocument)");

extern "C" {static PyObject *meth_FbxObject_SetDocument(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_SetDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxDocument* a0;
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxDocument, &a0))
        {
            sipCpp->SetDocument(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_SetDocument, doc_FbxObject_SetDocument);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetRootDocument, "GetRootDocument(self) -> FbxDocument");

extern "C" {static PyObject *meth_FbxObject_GetRootDocument(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetRootDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
             ::FbxDocument*sipRes;

            sipRes = sipCpp->GetRootDocument();

            return sipConvertFromType(sipRes,sipType_FbxDocument,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetRootDocument, doc_FbxObject_GetRootDocument);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetScene, "GetScene(self) -> FbxScene");

extern "C" {static PyObject *meth_FbxObject_GetScene(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetScene(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
             ::FbxScene*sipRes;

            sipRes = sipCpp->GetScene();

            return sipConvertFromType(sipRes,sipType_FbxScene,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetScene, doc_FbxObject_GetScene);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_Localize, "Localize(self, str, str = None) -> str");

extern "C" {static PyObject *meth_FbxObject_Localize(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_Localize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxObject)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        PyObject *a0Keep;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8|A8", &sipSelf, sipType_FbxObject, &sipCpp, &a0Keep, &a0, &a1Keep, &a1))
        {
            const char*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxObject::Localize(a0,a1) : sipCpp->Localize(a0,a1));
            Py_DECREF(a0Keep);
            Py_XDECREF(a1Keep);

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_FromString(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_Localize, doc_FbxObject_Localize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetUrl, "GetUrl(self) -> FbxString");

extern "C" {static PyObject *meth_FbxObject_GetUrl(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxObject)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString((sipSelfWasArg ? sipCpp-> ::FbxObject::GetUrl() : sipCpp->GetUrl()));

            return sipConvertFromNewType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetUrl, doc_FbxObject_GetUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_SetUrl, "SetUrl(self, str) -> bool");

extern "C" {static PyObject *meth_FbxObject_SetUrl(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_SetUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxObject)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxObject, &sipCpp, &a0Keep, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxObject::SetUrl(a0) : sipCpp->SetUrl(a0));
            Py_DECREF(a0Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_SetUrl, doc_FbxObject_SetUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_SetObjectFlags, "SetObjectFlags(self, FbxObject.EObjectFlag, bool)");

extern "C" {static PyObject *meth_FbxObject_SetObjectFlags(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_SetObjectFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxObject::EObjectFlag a0;
        bool a1;
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEb", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxObject_EObjectFlag, &a0, &a1))
        {
            sipCpp->SetObjectFlags(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_SetObjectFlags, doc_FbxObject_SetObjectFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetObjectFlags, "GetObjectFlags(self, FbxObject.EObjectFlag) -> bool");

extern "C" {static PyObject *meth_FbxObject_GetObjectFlags(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetObjectFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxObject::EObjectFlag a0;
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxObject, &sipCpp, sipType_FbxObject_EObjectFlag, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->GetObjectFlags(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetObjectFlags, doc_FbxObject_GetObjectFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_SetAllObjectFlags, "SetAllObjectFlags(self, int)");

extern "C" {static PyObject *meth_FbxObject_SetAllObjectFlags(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_SetAllObjectFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxUInt a0;
         ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_FbxObject, &sipCpp, &a0))
        {
            sipCpp->SetAllObjectFlags(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_SetAllObjectFlags, doc_FbxObject_SetAllObjectFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetAllObjectFlags, "GetAllObjectFlags(self) -> int");

extern "C" {static PyObject *meth_FbxObject_GetAllObjectFlags(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetAllObjectFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
             ::FbxUInt sipRes;

            sipRes = sipCpp->GetAllObjectFlags();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetAllObjectFlags, doc_FbxObject_GetAllObjectFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetTypeName, "GetTypeName(self) -> str");

extern "C" {static PyObject *meth_FbxObject_GetTypeName(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetTypeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxObject)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
            const char*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxObject::GetTypeName() : sipCpp->GetTypeName());

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_FromString(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetTypeName, doc_FbxObject_GetTypeName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxObject_GetTypeFlags, "GetTypeFlags(self) -> FbxStringList");

extern "C" {static PyObject *meth_FbxObject_GetTypeFlags(PyObject *, PyObject *);}
static PyObject *meth_FbxObject_GetTypeFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxObject)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxObject, &sipCpp))
        {
             ::FbxStringList*sipRes;

            sipRes = new  ::FbxStringList((sipSelfWasArg ? sipCpp-> ::FbxObject::GetTypeFlags() : sipCpp->GetTypeFlags()));

            return sipConvertFromNewType(sipRes,sipType_FbxStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxObject, sipName_GetTypeFlags, doc_FbxObject_GetTypeFlags);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_FbxObject___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxObject___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxObject *sipCpp = reinterpret_cast< ::FbxObject *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxObject));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxObject, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxObject::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxObject, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxObject___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxObject___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxObject *sipCpp = reinterpret_cast< ::FbxObject *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxObject));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxObject* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxObject, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxObject::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxObject, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxObject(void *, int);}
static void release_FbxObject(void *, int)
{
}


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxObject[] = {
    {(void *)slot_FbxObject___ne__, ne_slot},
    {(void *)slot_FbxObject___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxObject[] = {
    {sipName_Clone, meth_FbxObject_Clone, METH_VARARGS, doc_FbxObject_Clone},
    {sipName_ConnectDstObject, meth_FbxObject_ConnectDstObject, METH_VARARGS, doc_FbxObject_ConnectDstObject},
    {sipName_ConnectDstProperty, meth_FbxObject_ConnectDstProperty, METH_VARARGS, doc_FbxObject_ConnectDstProperty},
    {sipName_ConnectSrcObject, meth_FbxObject_ConnectSrcObject, METH_VARARGS, doc_FbxObject_ConnectSrcObject},
    {sipName_ConnectSrcProperty, meth_FbxObject_ConnectSrcProperty, METH_VARARGS, doc_FbxObject_ConnectSrcProperty},
    {sipName_ContentDecrementLockCount, meth_FbxObject_ContentDecrementLockCount, METH_VARARGS, doc_FbxObject_ContentDecrementLockCount},
    {sipName_ContentIncrementLockCount, meth_FbxObject_ContentIncrementLockCount, METH_VARARGS, doc_FbxObject_ContentIncrementLockCount},
    {sipName_ContentIsLoaded, meth_FbxObject_ContentIsLoaded, METH_VARARGS, doc_FbxObject_ContentIsLoaded},
    {sipName_ContentIsLocked, meth_FbxObject_ContentIsLocked, METH_VARARGS, doc_FbxObject_ContentIsLocked},
    {sipName_ContentLoad, meth_FbxObject_ContentLoad, METH_VARARGS, doc_FbxObject_ContentLoad},
    {sipName_ContentUnload, meth_FbxObject_ContentUnload, METH_VARARGS, doc_FbxObject_ContentUnload},
    {sipName_Create, meth_FbxObject_Create, METH_VARARGS, doc_FbxObject_Create},
    {sipName_Destroy, meth_FbxObject_Destroy, METH_VARARGS, doc_FbxObject_Destroy},
    {sipName_DisconnectAllDstObject, meth_FbxObject_DisconnectAllDstObject, METH_VARARGS, doc_FbxObject_DisconnectAllDstObject},
    {sipName_DisconnectAllSrcObject, meth_FbxObject_DisconnectAllSrcObject, METH_VARARGS, doc_FbxObject_DisconnectAllSrcObject},
    {sipName_DisconnectDstObject, meth_FbxObject_DisconnectDstObject, METH_VARARGS, doc_FbxObject_DisconnectDstObject},
    {sipName_DisconnectDstProperty, meth_FbxObject_DisconnectDstProperty, METH_VARARGS, doc_FbxObject_DisconnectDstProperty},
    {sipName_DisconnectSrcObject, meth_FbxObject_DisconnectSrcObject, METH_VARARGS, doc_FbxObject_DisconnectSrcObject},
    {sipName_DisconnectSrcProperty, meth_FbxObject_DisconnectSrcProperty, METH_VARARGS, doc_FbxObject_DisconnectSrcProperty},
    {sipName_FindDstObject, meth_FbxObject_FindDstObject, METH_VARARGS, doc_FbxObject_FindDstObject},
    {sipName_FindDstProperty, meth_FbxObject_FindDstProperty, METH_VARARGS, doc_FbxObject_FindDstProperty},
    {sipName_FindProperty, meth_FbxObject_FindProperty, METH_VARARGS, doc_FbxObject_FindProperty},
    {sipName_FindPropertyHierarchical, meth_FbxObject_FindPropertyHierarchical, METH_VARARGS, doc_FbxObject_FindPropertyHierarchical},
    {sipName_FindSrcObject, meth_FbxObject_FindSrcObject, METH_VARARGS, doc_FbxObject_FindSrcObject},
    {sipName_FindSrcProperty, meth_FbxObject_FindSrcProperty, METH_VARARGS, doc_FbxObject_FindSrcProperty},
    {sipName_GetAllObjectFlags, meth_FbxObject_GetAllObjectFlags, METH_VARARGS, doc_FbxObject_GetAllObjectFlags},
    {sipName_GetClassId, meth_FbxObject_GetClassId, METH_VARARGS, doc_FbxObject_GetClassId},
    {sipName_GetClassRootProperty, meth_FbxObject_GetClassRootProperty, METH_VARARGS, doc_FbxObject_GetClassRootProperty},
    {sipName_GetDocument, meth_FbxObject_GetDocument, METH_VARARGS, doc_FbxObject_GetDocument},
    {sipName_GetDstObject, meth_FbxObject_GetDstObject, METH_VARARGS, doc_FbxObject_GetDstObject},
    {sipName_GetDstObjectCount, meth_FbxObject_GetDstObjectCount, METH_VARARGS, doc_FbxObject_GetDstObjectCount},
    {sipName_GetDstProperty, meth_FbxObject_GetDstProperty, METH_VARARGS, doc_FbxObject_GetDstProperty},
    {sipName_GetDstPropertyCount, meth_FbxObject_GetDstPropertyCount, METH_VARARGS, doc_FbxObject_GetDstPropertyCount},
    {sipName_GetFirstProperty, meth_FbxObject_GetFirstProperty, METH_VARARGS, doc_FbxObject_GetFirstProperty},
    {sipName_GetInitialName, meth_FbxObject_GetInitialName, METH_VARARGS, doc_FbxObject_GetInitialName},
    {sipName_GetName, meth_FbxObject_GetName, METH_VARARGS, doc_FbxObject_GetName},
    {sipName_GetNameOnly, meth_FbxObject_GetNameOnly, METH_VARARGS, doc_FbxObject_GetNameOnly},
    {sipName_GetNameSpaceArray, meth_FbxObject_GetNameSpaceArray, METH_VARARGS, doc_FbxObject_GetNameSpaceArray},
    {sipName_GetNameSpaceOnly, meth_FbxObject_GetNameSpaceOnly, METH_VARARGS, doc_FbxObject_GetNameSpaceOnly},
    {sipName_GetNameSpacePrefix, meth_FbxObject_GetNameSpacePrefix, METH_VARARGS, doc_FbxObject_GetNameSpacePrefix},
    {sipName_GetNameWithNameSpacePrefix, meth_FbxObject_GetNameWithNameSpacePrefix, METH_VARARGS, doc_FbxObject_GetNameWithNameSpacePrefix},
    {sipName_GetNameWithoutNameSpacePrefix, meth_FbxObject_GetNameWithoutNameSpacePrefix, METH_VARARGS, doc_FbxObject_GetNameWithoutNameSpacePrefix},
    {sipName_GetNextProperty, meth_FbxObject_GetNextProperty, METH_VARARGS, doc_FbxObject_GetNextProperty},
    {sipName_GetObjectFlags, meth_FbxObject_GetObjectFlags, METH_VARARGS, doc_FbxObject_GetObjectFlags},
    {sipName_GetReferenceTo, meth_FbxObject_GetReferenceTo, METH_VARARGS, doc_FbxObject_GetReferenceTo},
    {sipName_GetReferencedBy, meth_FbxObject_GetReferencedBy, METH_VARARGS, doc_FbxObject_GetReferencedBy},
    {sipName_GetReferencedByCount, meth_FbxObject_GetReferencedByCount, METH_VARARGS, doc_FbxObject_GetReferencedByCount},
    {sipName_GetRootDocument, meth_FbxObject_GetRootDocument, METH_VARARGS, doc_FbxObject_GetRootDocument},
    {sipName_GetScene, meth_FbxObject_GetScene, METH_VARARGS, doc_FbxObject_GetScene},
    {sipName_GetSelected, meth_FbxObject_GetSelected, METH_VARARGS, doc_FbxObject_GetSelected},
    {sipName_GetSrcObject, meth_FbxObject_GetSrcObject, METH_VARARGS, doc_FbxObject_GetSrcObject},
    {sipName_GetSrcObjectCount, meth_FbxObject_GetSrcObjectCount, METH_VARARGS, doc_FbxObject_GetSrcObjectCount},
    {sipName_GetSrcProperty, meth_FbxObject_GetSrcProperty, METH_VARARGS, doc_FbxObject_GetSrcProperty},
    {sipName_GetSrcPropertyCount, meth_FbxObject_GetSrcPropertyCount, METH_VARARGS, doc_FbxObject_GetSrcPropertyCount},
    {sipName_GetTypeFlags, meth_FbxObject_GetTypeFlags, METH_VARARGS, doc_FbxObject_GetTypeFlags},
    {sipName_GetTypeName, meth_FbxObject_GetTypeName, METH_VARARGS, doc_FbxObject_GetTypeName},
    {sipName_GetUniqueID, meth_FbxObject_GetUniqueID, METH_VARARGS, doc_FbxObject_GetUniqueID},
    {sipName_GetUrl, meth_FbxObject_GetUrl, METH_VARARGS, doc_FbxObject_GetUrl},
    {sipName_IsAReferenceTo, meth_FbxObject_IsAReferenceTo, METH_VARARGS, doc_FbxObject_IsAReferenceTo},
    {sipName_IsConnectedDstObject, meth_FbxObject_IsConnectedDstObject, METH_VARARGS, doc_FbxObject_IsConnectedDstObject},
    {sipName_IsConnectedDstProperty, meth_FbxObject_IsConnectedDstProperty, METH_VARARGS, doc_FbxObject_IsConnectedDstProperty},
    {sipName_IsConnectedSrcObject, meth_FbxObject_IsConnectedSrcObject, METH_VARARGS, doc_FbxObject_IsConnectedSrcObject},
    {sipName_IsConnectedSrcProperty, meth_FbxObject_IsConnectedSrcProperty, METH_VARARGS, doc_FbxObject_IsConnectedSrcProperty},
    {sipName_IsReferencedBy, meth_FbxObject_IsReferencedBy, METH_VARARGS, doc_FbxObject_IsReferencedBy},
    {sipName_Localize, meth_FbxObject_Localize, METH_VARARGS, doc_FbxObject_Localize},
    {sipName_RemovePrefix, meth_FbxObject_RemovePrefix, METH_VARARGS, doc_FbxObject_RemovePrefix},
    {sipName_SetAllObjectFlags, meth_FbxObject_SetAllObjectFlags, METH_VARARGS, doc_FbxObject_SetAllObjectFlags},
    {sipName_SetDocument, meth_FbxObject_SetDocument, METH_VARARGS, doc_FbxObject_SetDocument},
    {sipName_SetInitialName, meth_FbxObject_SetInitialName, METH_VARARGS, doc_FbxObject_SetInitialName},
    {sipName_SetName, meth_FbxObject_SetName, METH_VARARGS, doc_FbxObject_SetName},
    {sipName_SetNameSpace, meth_FbxObject_SetNameSpace, METH_VARARGS, doc_FbxObject_SetNameSpace},
    {sipName_SetObjectFlags, meth_FbxObject_SetObjectFlags, METH_VARARGS, doc_FbxObject_SetObjectFlags},
    {sipName_SetSelected, meth_FbxObject_SetSelected, METH_VARARGS, doc_FbxObject_SetSelected},
    {sipName_SetUrl, meth_FbxObject_SetUrl, METH_VARARGS, doc_FbxObject_SetUrl},
    {sipName_StripPrefix, meth_FbxObject_StripPrefix, METH_VARARGS, doc_FbxObject_StripPrefix}
};


extern "C" {static PyObject *varget_FbxObject_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxObject_ClassId(void *, PyObject *sipPySelf, PyObject *)
{
    static PyObject *sipPy = SIP_NULLPTR;
     ::FbxClassId*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal = & ::FbxObject::ClassId;

    sipPy = sipConvertFromType(sipVal, sipType_FbxClassId, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -1487, sipPySelf);
        Py_INCREF(sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxObject_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxObject_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy, sipType_FbxClassId, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxObject::ClassId = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxObject_RootProperty(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxObject_RootProperty(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxProperty*sipVal;
     ::FbxObject *sipCpp = reinterpret_cast< ::FbxObject *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -1489);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->RootProperty;

    sipPy = sipConvertFromType(sipVal, sipType_FbxProperty, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -1488, sipPySelf);
        sipKeepReference(sipPySelf, -1489, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxObject_RootProperty(void *, PyObject *, PyObject *);}
static int varset_FbxObject_RootProperty(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxProperty*sipVal;
     ::FbxObject *sipCpp = reinterpret_cast< ::FbxObject *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxProperty *>(sipForceConvertToType(sipPy, sipType_FbxProperty, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RootProperty = *sipVal;

    return 0;
}

sipVariableDef variables_FbxObject[] = {
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxObject_ClassId, (PyMethodDef *)varset_FbxObject_ClassId, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_RootProperty, (PyMethodDef *)varget_FbxObject_RootProperty, (PyMethodDef *)varset_FbxObject_RootProperty, SIP_NULLPTR, SIP_NULLPTR},
};


/* Define the enum members and ints to be added to this type. */
static sipIntInstanceDef intInstances_FbxObject[] = {
    {sipName_eDeepClone, static_cast<int>( ::FbxObject::eDeepClone)},
    {sipName_eReferenceClone, static_cast<int>( ::FbxObject::eReferenceClone)},
    {sipName_eNone, static_cast<int>( ::FbxObject::eNone)},
    {sipName_eInitialized, static_cast<int>( ::FbxObject::eInitialized)},
    {sipName_eSystem, static_cast<int>( ::FbxObject::eSystem)},
    {sipName_eSavable, static_cast<int>( ::FbxObject::eSavable)},
    {sipName_eSelected, static_cast<int>( ::FbxObject::eSelected)},
    {sipName_eHidden, static_cast<int>( ::FbxObject::eHidden)},
    {sipName_eContentLoaded, static_cast<int>( ::FbxObject::eContentLoaded)},
    {sipName_eDontLocalize, static_cast<int>( ::FbxObject::eDontLocalize)},
    {0, 0}
};


sipClassTypeDef sipTypeDef_fbx_FbxObject = {
    {
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxObject,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxObject,
        {0, 0, 1},
        75, methods_FbxObject,
        2, variables_FbxObject,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, intInstances_FbxObject, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    SIP_NULLPTR,
    slots_FbxObject,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_FbxObject,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
