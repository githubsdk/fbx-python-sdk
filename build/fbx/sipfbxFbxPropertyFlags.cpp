/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




/* Call the instance's destructor. */
extern "C" {static void release_FbxPropertyFlags(void *, int);}
static void release_FbxPropertyFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::FbxPropertyFlags *>(sipCppV);
}


extern "C" {static void *array_FbxPropertyFlags(Py_ssize_t);}
static void *array_FbxPropertyFlags(Py_ssize_t sipNrElem)
{
    return new  ::FbxPropertyFlags[sipNrElem];
}


extern "C" {static void assign_FbxPropertyFlags(void *, Py_ssize_t, void *);}
static void assign_FbxPropertyFlags(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::FbxPropertyFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::FbxPropertyFlags *>(sipSrc);
}


extern "C" {static void *copy_FbxPropertyFlags(const void *, Py_ssize_t);}
static void *copy_FbxPropertyFlags(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::FbxPropertyFlags(reinterpret_cast<const  ::FbxPropertyFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxPropertyFlags(sipSimpleWrapper *);}
static void dealloc_FbxPropertyFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxPropertyFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_FbxPropertyFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxPropertyFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::FbxPropertyFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::FbxPropertyFlags();

            return sipCpp;
        }
    }

    {
        const  ::FbxPropertyFlags* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_FbxPropertyFlags, &a0))
        {
            sipCpp = new  ::FbxPropertyFlags(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define the enum members and ints to be added to this type. */
static sipIntInstanceDef intInstances_FbxPropertyFlags[] = {
    {sipName_eNone, static_cast<int>( ::FbxPropertyFlags::eNone)},
    {sipName_eStatic, static_cast<int>( ::FbxPropertyFlags::eStatic)},
    {sipName_eAnimatable, static_cast<int>( ::FbxPropertyFlags::eAnimatable)},
    {sipName_eAnimated, static_cast<int>( ::FbxPropertyFlags::eAnimated)},
    {sipName_eImported, static_cast<int>( ::FbxPropertyFlags::eImported)},
    {sipName_eUserDefined, static_cast<int>( ::FbxPropertyFlags::eUserDefined)},
    {sipName_eHidden, static_cast<int>( ::FbxPropertyFlags::eHidden)},
    {sipName_eNotSavable, static_cast<int>( ::FbxPropertyFlags::eNotSavable)},
    {sipName_eLockedMember0, static_cast<int>( ::FbxPropertyFlags::eLockedMember0)},
    {sipName_eLockedMember1, static_cast<int>( ::FbxPropertyFlags::eLockedMember1)},
    {sipName_eLockedMember2, static_cast<int>( ::FbxPropertyFlags::eLockedMember2)},
    {sipName_eLockedMember3, static_cast<int>( ::FbxPropertyFlags::eLockedMember3)},
    {sipName_eLockedAll, static_cast<int>( ::FbxPropertyFlags::eLockedAll)},
    {sipName_eMutedMember0, static_cast<int>( ::FbxPropertyFlags::eMutedMember0)},
    {sipName_eMutedMember1, static_cast<int>( ::FbxPropertyFlags::eMutedMember1)},
    {sipName_eMutedMember2, static_cast<int>( ::FbxPropertyFlags::eMutedMember2)},
    {sipName_eMutedMember3, static_cast<int>( ::FbxPropertyFlags::eMutedMember3)},
    {sipName_eMutedAll, static_cast<int>( ::FbxPropertyFlags::eMutedAll)},
    {sipName_eUIDisabled, static_cast<int>( ::FbxPropertyFlags::eUIDisabled)},
    {sipName_eUIGroup, static_cast<int>( ::FbxPropertyFlags::eUIGroup)},
    {sipName_eUIBoolGroup, static_cast<int>( ::FbxPropertyFlags::eUIBoolGroup)},
    {sipName_eUIExpanded, static_cast<int>( ::FbxPropertyFlags::eUIExpanded)},
    {sipName_eUINoCaption, static_cast<int>( ::FbxPropertyFlags::eUINoCaption)},
    {sipName_eUIPanel, static_cast<int>( ::FbxPropertyFlags::eUIPanel)},
    {sipName_eUILeftLabel, static_cast<int>( ::FbxPropertyFlags::eUILeftLabel)},
    {sipName_eUIHidden, static_cast<int>( ::FbxPropertyFlags::eUIHidden)},
    {sipName_eCtrlFlags, static_cast<int>( ::FbxPropertyFlags::eCtrlFlags)},
    {sipName_eUIFlags, static_cast<int>( ::FbxPropertyFlags::eUIFlags)},
    {sipName_eAllFlags, static_cast<int>( ::FbxPropertyFlags::eAllFlags)},
    {sipName_eFlagCount, static_cast<int>( ::FbxPropertyFlags::eFlagCount)},
    {sipName_eOverride, static_cast<int>( ::FbxPropertyFlags::eOverride)},
    {sipName_eInherit, static_cast<int>( ::FbxPropertyFlags::eInherit)},
    {sipName_eDeleted, static_cast<int>( ::FbxPropertyFlags::eDeleted)},
    {0, 0}
};

PyDoc_STRVAR(doc_FbxPropertyFlags, "\1FbxPropertyFlags()\n"
"FbxPropertyFlags(FbxPropertyFlags)");


sipClassTypeDef sipTypeDef_fbx_FbxPropertyFlags = {
    {
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_FbxPropertyFlags,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxPropertyFlags,
        {0, 0, 1},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, intInstances_FbxPropertyFlags, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_FbxPropertyFlags,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_FbxPropertyFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_FbxPropertyFlags,
    assign_FbxPropertyFlags,
    array_FbxPropertyFlags,
    copy_FbxPropertyFlags,
    release_FbxPropertyFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
