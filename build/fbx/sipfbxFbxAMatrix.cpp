/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxAMatrix_Get, "Get(self, int, int) -> float");

extern "C" {static PyObject *meth_FbxAMatrix_Get(PyObject *, PyObject *);}
static PyObject *meth_FbxAMatrix_Get(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::FbxAMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_FbxAMatrix, &sipCpp, &a0, &a1))
        {
            double sipRes;

            sipRes = sipCpp->Get(a0,a1);

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAMatrix, sipName_Get, doc_FbxAMatrix_Get);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAMatrix_GetT, "GetT(self) -> FbxVector4");

extern "C" {static PyObject *meth_FbxAMatrix_GetT(PyObject *, PyObject *);}
static PyObject *meth_FbxAMatrix_GetT(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxAMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAMatrix, &sipCpp))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetT());

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAMatrix, sipName_GetT, doc_FbxAMatrix_GetT);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAMatrix_GetR, "GetR(self) -> FbxVector4");

extern "C" {static PyObject *meth_FbxAMatrix_GetR(PyObject *, PyObject *);}
static PyObject *meth_FbxAMatrix_GetR(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxAMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAMatrix, &sipCpp))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetR());

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAMatrix, sipName_GetR, doc_FbxAMatrix_GetR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAMatrix_GetQ, "GetQ(self) -> FbxQuaternion");

extern "C" {static PyObject *meth_FbxAMatrix_GetQ(PyObject *, PyObject *);}
static PyObject *meth_FbxAMatrix_GetQ(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxAMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAMatrix, &sipCpp))
        {
             ::FbxQuaternion*sipRes;

            sipRes = new  ::FbxQuaternion(sipCpp->GetQ());

            return sipConvertFromNewType(sipRes,sipType_FbxQuaternion,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAMatrix, sipName_GetQ, doc_FbxAMatrix_GetQ);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAMatrix_GetS, "GetS(self) -> FbxVector4");

extern "C" {static PyObject *meth_FbxAMatrix_GetS(PyObject *, PyObject *);}
static PyObject *meth_FbxAMatrix_GetS(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxAMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAMatrix, &sipCpp))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetS());

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAMatrix, sipName_GetS, doc_FbxAMatrix_GetS);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAMatrix_GetRow, "GetRow(self, int) -> FbxVector4");

extern "C" {static PyObject *meth_FbxAMatrix_GetRow(PyObject *, PyObject *);}
static PyObject *meth_FbxAMatrix_GetRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::FbxAMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxAMatrix, &sipCpp, &a0))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetRow(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAMatrix, sipName_GetRow, doc_FbxAMatrix_GetRow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAMatrix_GetColumn, "GetColumn(self, int) -> FbxVector4");

extern "C" {static PyObject *meth_FbxAMatrix_GetColumn(PyObject *, PyObject *);}
static PyObject *meth_FbxAMatrix_GetColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::FbxAMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxAMatrix, &sipCpp, &a0))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetColumn(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAMatrix, sipName_GetColumn, doc_FbxAMatrix_GetColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAMatrix_SetIdentity, "SetIdentity(self)");

extern "C" {static PyObject *meth_FbxAMatrix_SetIdentity(PyObject *, PyObject *);}
static PyObject *meth_FbxAMatrix_SetIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxAMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAMatrix, &sipCpp))
        {
            sipCpp->SetIdentity();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAMatrix, sipName_SetIdentity, doc_FbxAMatrix_SetIdentity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAMatrix_SetT, "SetT(self, FbxVector4)");

extern "C" {static PyObject *meth_FbxAMatrix_SetT(PyObject *, PyObject *);}
static PyObject *meth_FbxAMatrix_SetT(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxVector4* a0;
         ::FbxAMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxAMatrix, &sipCpp, sipType_FbxVector4, &a0))
        {
            sipCpp->SetT(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAMatrix, sipName_SetT, doc_FbxAMatrix_SetT);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAMatrix_SetR, "SetR(self, FbxVector4)");

extern "C" {static PyObject *meth_FbxAMatrix_SetR(PyObject *, PyObject *);}
static PyObject *meth_FbxAMatrix_SetR(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxVector4* a0;
         ::FbxAMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxAMatrix, &sipCpp, sipType_FbxVector4, &a0))
        {
            sipCpp->SetR(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAMatrix, sipName_SetR, doc_FbxAMatrix_SetR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAMatrix_SetQ, "SetQ(self, FbxQuaternion)");

extern "C" {static PyObject *meth_FbxAMatrix_SetQ(PyObject *, PyObject *);}
static PyObject *meth_FbxAMatrix_SetQ(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxQuaternion* a0;
         ::FbxAMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxAMatrix, &sipCpp, sipType_FbxQuaternion, &a0))
        {
            sipCpp->SetQ(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAMatrix, sipName_SetQ, doc_FbxAMatrix_SetQ);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAMatrix_SetS, "SetS(self, FbxVector4)");

extern "C" {static PyObject *meth_FbxAMatrix_SetS(PyObject *, PyObject *);}
static PyObject *meth_FbxAMatrix_SetS(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxVector4* a0;
         ::FbxAMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxAMatrix, &sipCpp, sipType_FbxVector4, &a0))
        {
            sipCpp->SetS(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAMatrix, sipName_SetS, doc_FbxAMatrix_SetS);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAMatrix_SetTRS, "SetTRS(self, FbxVector4, FbxVector4, FbxVector4)");

extern "C" {static PyObject *meth_FbxAMatrix_SetTRS(PyObject *, PyObject *);}
static PyObject *meth_FbxAMatrix_SetTRS(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxVector4* a0;
        const  ::FbxVector4* a1;
        const  ::FbxVector4* a2;
         ::FbxAMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9", &sipSelf, sipType_FbxAMatrix, &sipCpp, sipType_FbxVector4, &a0, sipType_FbxVector4, &a1, sipType_FbxVector4, &a2))
        {
            sipCpp->SetTRS(*a0,*a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAMatrix, sipName_SetTRS, doc_FbxAMatrix_SetTRS);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAMatrix_SetTQS, "SetTQS(self, FbxVector4, FbxQuaternion, FbxVector4)");

extern "C" {static PyObject *meth_FbxAMatrix_SetTQS(PyObject *, PyObject *);}
static PyObject *meth_FbxAMatrix_SetTQS(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxVector4* a0;
        const  ::FbxQuaternion* a1;
        const  ::FbxVector4* a2;
         ::FbxAMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9", &sipSelf, sipType_FbxAMatrix, &sipCpp, sipType_FbxVector4, &a0, sipType_FbxQuaternion, &a1, sipType_FbxVector4, &a2))
        {
            sipCpp->SetTQS(*a0,*a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAMatrix, sipName_SetTQS, doc_FbxAMatrix_SetTQS);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAMatrix_MultT, "MultT(self, FbxVector4) -> FbxVector4");

extern "C" {static PyObject *meth_FbxAMatrix_MultT(PyObject *, PyObject *);}
static PyObject *meth_FbxAMatrix_MultT(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxVector4* a0;
        const  ::FbxAMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxAMatrix, &sipCpp, sipType_FbxVector4, &a0))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->MultT(*a0));

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAMatrix, sipName_MultT, doc_FbxAMatrix_MultT);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAMatrix_MultR, "MultR(self, FbxVector4) -> FbxVector4");

extern "C" {static PyObject *meth_FbxAMatrix_MultR(PyObject *, PyObject *);}
static PyObject *meth_FbxAMatrix_MultR(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxVector4* a0;
        const  ::FbxAMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxAMatrix, &sipCpp, sipType_FbxVector4, &a0))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->MultR(*a0));

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAMatrix, sipName_MultR, doc_FbxAMatrix_MultR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAMatrix_MultQ, "MultQ(self, FbxQuaternion) -> FbxQuaternion");

extern "C" {static PyObject *meth_FbxAMatrix_MultQ(PyObject *, PyObject *);}
static PyObject *meth_FbxAMatrix_MultQ(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxQuaternion* a0;
        const  ::FbxAMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxAMatrix, &sipCpp, sipType_FbxQuaternion, &a0))
        {
             ::FbxQuaternion*sipRes;

            sipRes = new  ::FbxQuaternion(sipCpp->MultQ(*a0));

            return sipConvertFromNewType(sipRes,sipType_FbxQuaternion,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAMatrix, sipName_MultQ, doc_FbxAMatrix_MultQ);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAMatrix_MultS, "MultS(self, FbxVector4) -> FbxVector4");

extern "C" {static PyObject *meth_FbxAMatrix_MultS(PyObject *, PyObject *);}
static PyObject *meth_FbxAMatrix_MultS(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxVector4* a0;
        const  ::FbxAMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxAMatrix, &sipCpp, sipType_FbxVector4, &a0))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->MultS(*a0));

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAMatrix, sipName_MultS, doc_FbxAMatrix_MultS);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAMatrix_Inverse, "Inverse(self) -> FbxAMatrix");

extern "C" {static PyObject *meth_FbxAMatrix_Inverse(PyObject *, PyObject *);}
static PyObject *meth_FbxAMatrix_Inverse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxAMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAMatrix, &sipCpp))
        {
             ::FbxAMatrix*sipRes;

            sipRes = new  ::FbxAMatrix(sipCpp->Inverse());

            return sipConvertFromNewType(sipRes,sipType_FbxAMatrix,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAMatrix, sipName_Inverse, doc_FbxAMatrix_Inverse);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAMatrix_Transpose, "Transpose(self) -> FbxAMatrix");

extern "C" {static PyObject *meth_FbxAMatrix_Transpose(PyObject *, PyObject *);}
static PyObject *meth_FbxAMatrix_Transpose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxAMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAMatrix, &sipCpp))
        {
             ::FbxAMatrix*sipRes;

            sipRes = new  ::FbxAMatrix(sipCpp->Transpose());

            return sipConvertFromNewType(sipRes,sipType_FbxAMatrix,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAMatrix, sipName_Transpose, doc_FbxAMatrix_Transpose);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAMatrix_IsIdentity, "IsIdentity(self, float = FBXSDK_TOLERANCE) -> bool");

extern "C" {static PyObject *meth_FbxAMatrix_IsIdentity(PyObject *, PyObject *);}
static PyObject *meth_FbxAMatrix_IsIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0 = FBXSDK_TOLERANCE;
         ::FbxAMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|d", &sipSelf, sipType_FbxAMatrix, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->IsIdentity(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAMatrix, sipName_IsIdentity, doc_FbxAMatrix_IsIdentity);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_FbxAMatrix___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxAMatrix___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxAMatrix *sipCpp = reinterpret_cast< ::FbxAMatrix *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxAMatrix));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxAMatrix* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxAMatrix, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxAMatrix::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxAMatrix, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxAMatrix___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxAMatrix___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxAMatrix *sipCpp = reinterpret_cast< ::FbxAMatrix *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxAMatrix));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxAMatrix* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxAMatrix, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxAMatrix::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxAMatrix, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxAMatrix___neg__(PyObject *);}
static PyObject *slot_FbxAMatrix___neg__(PyObject *sipSelf)
{
     ::FbxAMatrix *sipCpp = reinterpret_cast< ::FbxAMatrix *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxAMatrix));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::FbxAMatrix*sipRes;

            sipRes = new  ::FbxAMatrix(-(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_FbxAMatrix,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_FbxAMatrix___itruediv__(PyObject *,PyObject *);}
static PyObject *slot_FbxAMatrix___itruediv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxAMatrix)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::FbxAMatrix *sipCpp = reinterpret_cast< ::FbxAMatrix *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxAMatrix));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::FbxAMatrix::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_FbxAMatrix___imul__(PyObject *,PyObject *);}
static PyObject *slot_FbxAMatrix___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxAMatrix)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::FbxAMatrix *sipCpp = reinterpret_cast< ::FbxAMatrix *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxAMatrix));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::FbxAMatrix::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const  ::FbxAMatrix* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxAMatrix, &a0))
        {
            sipCpp-> ::FbxAMatrix::operator*=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_FbxAMatrix___truediv__(PyObject *,PyObject *);}
static PyObject *slot_FbxAMatrix___truediv__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxAMatrix* a0;
        double a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_FbxAMatrix, &a0, &a1))
        {
             ::FbxAMatrix*sipRes;

            sipRes = new  ::FbxAMatrix((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_FbxAMatrix,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, truediv_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_FbxAMatrix___mul__(PyObject *,PyObject *);}
static PyObject *slot_FbxAMatrix___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxAMatrix* a0;
        double a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_FbxAMatrix, &a0, &a1))
        {
             ::FbxAMatrix*sipRes;

            sipRes = new  ::FbxAMatrix((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_FbxAMatrix,SIP_NULLPTR);
        }
    }

    {
         ::FbxAMatrix* a0;
        const  ::FbxAMatrix* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_FbxAMatrix, &a0, sipType_FbxAMatrix, &a1))
        {
             ::FbxAMatrix*sipRes;

            sipRes = new  ::FbxAMatrix((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_FbxAMatrix,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, mul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxAMatrix(void *, const sipTypeDef *);}
static void *cast_FbxAMatrix(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxAMatrix *sipCpp = reinterpret_cast< ::FbxAMatrix *>(sipCppV);

    if (targetType == sipType_FbxAMatrix)
        return sipCppV;

    if (targetType == sipType_FbxDouble4x4)
        return static_cast< ::FbxDouble4x4 *>(sipCpp);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxAMatrix(void *, int);}
static void release_FbxAMatrix(void *sipCppV, int)
{
    delete reinterpret_cast< ::FbxAMatrix *>(sipCppV);
}


extern "C" {static void *array_FbxAMatrix(Py_ssize_t);}
static void *array_FbxAMatrix(Py_ssize_t sipNrElem)
{
    return new  ::FbxAMatrix[sipNrElem];
}


extern "C" {static void assign_FbxAMatrix(void *, Py_ssize_t, void *);}
static void assign_FbxAMatrix(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::FbxAMatrix *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::FbxAMatrix *>(sipSrc);
}


extern "C" {static void *copy_FbxAMatrix(const void *, Py_ssize_t);}
static void *copy_FbxAMatrix(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::FbxAMatrix(reinterpret_cast<const  ::FbxAMatrix *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxAMatrix(sipSimpleWrapper *);}
static void dealloc_FbxAMatrix(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxAMatrix(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_FbxAMatrix(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxAMatrix(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::FbxAMatrix *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::FbxAMatrix();

            return sipCpp;
        }
    }

    {
        const  ::FbxAMatrix* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_FbxAMatrix, &a0))
        {
            sipCpp = new  ::FbxAMatrix(*a0);

            return sipCpp;
        }
    }

    {
        const  ::FbxVector4* a0;
        const  ::FbxVector4* a1;
        const  ::FbxVector4* a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9J9J9", sipType_FbxVector4, &a0, sipType_FbxVector4, &a1, sipType_FbxVector4, &a2))
        {
            sipCpp = new  ::FbxAMatrix(*a0,*a1,*a2);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxAMatrix[] = {{135, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxAMatrix[] = {
    {(void *)slot_FbxAMatrix___ne__, ne_slot},
    {(void *)slot_FbxAMatrix___eq__, eq_slot},
    {(void *)slot_FbxAMatrix___neg__, neg_slot},
    {(void *)slot_FbxAMatrix___itruediv__, itruediv_slot},
    {(void *)slot_FbxAMatrix___imul__, imul_slot},
    {(void *)slot_FbxAMatrix___truediv__, truediv_slot},
    {(void *)slot_FbxAMatrix___mul__, mul_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxAMatrix[] = {
    {sipName_Get, meth_FbxAMatrix_Get, METH_VARARGS, doc_FbxAMatrix_Get},
    {sipName_GetColumn, meth_FbxAMatrix_GetColumn, METH_VARARGS, doc_FbxAMatrix_GetColumn},
    {sipName_GetQ, meth_FbxAMatrix_GetQ, METH_VARARGS, doc_FbxAMatrix_GetQ},
    {sipName_GetR, meth_FbxAMatrix_GetR, METH_VARARGS, doc_FbxAMatrix_GetR},
    {sipName_GetRow, meth_FbxAMatrix_GetRow, METH_VARARGS, doc_FbxAMatrix_GetRow},
    {sipName_GetS, meth_FbxAMatrix_GetS, METH_VARARGS, doc_FbxAMatrix_GetS},
    {sipName_GetT, meth_FbxAMatrix_GetT, METH_VARARGS, doc_FbxAMatrix_GetT},
    {sipName_Inverse, meth_FbxAMatrix_Inverse, METH_VARARGS, doc_FbxAMatrix_Inverse},
    {sipName_IsIdentity, meth_FbxAMatrix_IsIdentity, METH_VARARGS, doc_FbxAMatrix_IsIdentity},
    {sipName_MultQ, meth_FbxAMatrix_MultQ, METH_VARARGS, doc_FbxAMatrix_MultQ},
    {sipName_MultR, meth_FbxAMatrix_MultR, METH_VARARGS, doc_FbxAMatrix_MultR},
    {sipName_MultS, meth_FbxAMatrix_MultS, METH_VARARGS, doc_FbxAMatrix_MultS},
    {sipName_MultT, meth_FbxAMatrix_MultT, METH_VARARGS, doc_FbxAMatrix_MultT},
    {sipName_SetIdentity, meth_FbxAMatrix_SetIdentity, METH_VARARGS, doc_FbxAMatrix_SetIdentity},
    {sipName_SetQ, meth_FbxAMatrix_SetQ, METH_VARARGS, doc_FbxAMatrix_SetQ},
    {sipName_SetR, meth_FbxAMatrix_SetR, METH_VARARGS, doc_FbxAMatrix_SetR},
    {sipName_SetS, meth_FbxAMatrix_SetS, METH_VARARGS, doc_FbxAMatrix_SetS},
    {sipName_SetT, meth_FbxAMatrix_SetT, METH_VARARGS, doc_FbxAMatrix_SetT},
    {sipName_SetTQS, meth_FbxAMatrix_SetTQS, METH_VARARGS, doc_FbxAMatrix_SetTQS},
    {sipName_SetTRS, meth_FbxAMatrix_SetTRS, METH_VARARGS, doc_FbxAMatrix_SetTRS},
    {sipName_Transpose, meth_FbxAMatrix_Transpose, METH_VARARGS, doc_FbxAMatrix_Transpose}
};

PyDoc_STRVAR(doc_FbxAMatrix, "\1FbxAMatrix()\n"
"FbxAMatrix(FbxAMatrix)\n"
"FbxAMatrix(FbxVector4, FbxVector4, FbxVector4)");


sipClassTypeDef sipTypeDef_fbx_FbxAMatrix = {
    {
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_FbxAMatrix,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxAMatrix,
        {0, 0, 1},
        21, methods_FbxAMatrix,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_FbxAMatrix,
    -1,
    -1,
    supers_FbxAMatrix,
    slots_FbxAMatrix,
    init_type_FbxAMatrix,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_FbxAMatrix,
    assign_FbxAMatrix,
    array_FbxAMatrix,
    copy_FbxAMatrix,
    release_FbxAMatrix,
    cast_FbxAMatrix,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
