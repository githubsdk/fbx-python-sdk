/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxLight_Create, "Create(FbxManager, str) -> FbxLight\n"
"Create(FbxObject, str) -> FbxLight");

extern "C" {static PyObject *meth_FbxLight_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxLight_Create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8A8", &sipSelf, sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxLight*sipRes;

            sipRes =  ::FbxLight::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxLight,SIP_NULLPTR);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "CJ8A8", &sipSelf, sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxLight*sipRes;

            sipRes =  ::FbxLight::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxLight,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLight, sipName_Create, doc_FbxLight_Create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLight_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxLight_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxLight_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxLight)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxLight *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLight, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxLight::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLight, sipName_GetClassId, doc_FbxLight_GetClassId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLight_GetAttributeType, "GetAttributeType(self) -> FbxNodeAttribute.EType");

extern "C" {static PyObject *meth_FbxLight_GetAttributeType(PyObject *, PyObject *);}
static PyObject *meth_FbxLight_GetAttributeType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxLight)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxLight *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLight, &sipCpp))
        {
             ::FbxNodeAttribute::EType sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxLight::GetAttributeType() : sipCpp->GetAttributeType());

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_FbxNodeAttribute_EType);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLight, sipName_GetAttributeType, doc_FbxLight_GetAttributeType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLight_SetShadowTexture, "SetShadowTexture(self, FbxTexture)");

extern "C" {static PyObject *meth_FbxLight_SetShadowTexture(PyObject *, PyObject *);}
static PyObject *meth_FbxLight_SetShadowTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxTexture* a0;
         ::FbxLight *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxLight, &sipCpp, sipType_FbxTexture, &a0))
        {
            sipCpp->SetShadowTexture(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLight, sipName_SetShadowTexture, doc_FbxLight_SetShadowTexture);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLight_GetShadowTexture, "GetShadowTexture(self) -> FbxTexture");

extern "C" {static PyObject *meth_FbxLight_GetShadowTexture(PyObject *, PyObject *);}
static PyObject *meth_FbxLight_GetShadowTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxLight *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLight, &sipCpp))
        {
             ::FbxTexture*sipRes;

            sipRes = sipCpp->GetShadowTexture();

            return sipConvertFromType(sipRes,sipType_FbxTexture,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLight, sipName_GetShadowTexture, doc_FbxLight_GetShadowTexture);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_FbxLight___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxLight___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxLight));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxLight* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxLight, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxLight::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxLight, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxLight___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxLight___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxLight));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxLight* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxLight, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxLight::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxLight, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxLight(void *, const sipTypeDef *);}
static void *cast_FbxLight(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipCppV);

    if (targetType == sipType_FbxLight)
        return sipCppV;

    sipCppV = ((const sipClassTypeDef *)sipType_FbxNodeAttribute)->ctd_cast(static_cast< ::FbxNodeAttribute *>(sipCpp), targetType);
    if (sipCppV)
        return sipCppV;

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxLight(void *, int);}
static void release_FbxLight(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxLight[] = {{233, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxLight[] = {
    {(void *)slot_FbxLight___ne__, ne_slot},
    {(void *)slot_FbxLight___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxLight[] = {
    {sipName_Create, meth_FbxLight_Create, METH_VARARGS, doc_FbxLight_Create},
    {sipName_GetAttributeType, meth_FbxLight_GetAttributeType, METH_VARARGS, doc_FbxLight_GetAttributeType},
    {sipName_GetClassId, meth_FbxLight_GetClassId, METH_VARARGS, doc_FbxLight_GetClassId},
    {sipName_GetShadowTexture, meth_FbxLight_GetShadowTexture, METH_VARARGS, doc_FbxLight_GetShadowTexture},
    {sipName_SetShadowTexture, meth_FbxLight_SetShadowTexture, METH_VARARGS, doc_FbxLight_SetShadowTexture}
};


extern "C" {static PyObject *varget_FbxLight_AreaLightShape(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_AreaLightShape(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyEAreaLightShape*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -301);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->AreaLightShape;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyEAreaLightShape, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -300, sipPySelf);
        sipKeepReference(sipPySelf, -301, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_AreaLightShape(void *, PyObject *, PyObject *);}
static int varset_FbxLight_AreaLightShape(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEAreaLightShape*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyEAreaLightShape *>(sipForceConvertToType(sipPy, sipType_FbxPropertyEAreaLightShape, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AreaLightShape = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_BottomBarnDoor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_BottomBarnDoor(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyFloat1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -303);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->BottomBarnDoor;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyFloat1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -302, sipPySelf);
        sipKeepReference(sipPySelf, -303, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_BottomBarnDoor(void *, PyObject *, PyObject *);}
static int varset_FbxLight_BottomBarnDoor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFloat1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyFloat1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyFloat1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->BottomBarnDoor = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_CastLight(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_CastLight(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -305);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->CastLight;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyBool1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -304, sipPySelf);
        sipKeepReference(sipPySelf, -305, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_CastLight(void *, PyObject *, PyObject *);}
static int varset_FbxLight_CastLight(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyBool1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->CastLight = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_CastShadows(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_CastShadows(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -307);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->CastShadows;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyBool1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -306, sipPySelf);
        sipKeepReference(sipPySelf, -307, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_CastShadows(void *, PyObject *, PyObject *);}
static int varset_FbxLight_CastShadows(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyBool1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->CastShadows = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_ClassId(void *, PyObject *sipPySelf, PyObject *)
{
    static PyObject *sipPy = SIP_NULLPTR;
     ::FbxClassId*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal = & ::FbxLight::ClassId;

    sipPy = sipConvertFromType(sipVal, sipType_FbxClassId, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -308, sipPySelf);
        Py_INCREF(sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxLight_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy, sipType_FbxClassId, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxLight::ClassId = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_Color(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_Color(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble3*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -310);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->Color;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -309, sipPySelf);
        sipKeepReference(sipPySelf, -310, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_Color(void *, PyObject *, PyObject *);}
static int varset_FbxLight_Color(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble3, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Color = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_DecayStart(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_DecayStart(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -312);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->DecayStart;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -311, sipPySelf);
        sipKeepReference(sipPySelf, -312, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_DecayStart(void *, PyObject *, PyObject *);}
static int varset_FbxLight_DecayStart(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->DecayStart = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_DecayType(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_DecayType(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyEDecayType*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -314);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->DecayType;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyEDecayType, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -313, sipPySelf);
        sipKeepReference(sipPySelf, -314, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_DecayType(void *, PyObject *, PyObject *);}
static int varset_FbxLight_DecayType(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEDecayType*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyEDecayType *>(sipForceConvertToType(sipPy, sipType_FbxPropertyEDecayType, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->DecayType = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_DrawFrontFacingVolumetricLight(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_DrawFrontFacingVolumetricLight(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -316);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->DrawFrontFacingVolumetricLight;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyBool1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -315, sipPySelf);
        sipKeepReference(sipPySelf, -316, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_DrawFrontFacingVolumetricLight(void *, PyObject *, PyObject *);}
static int varset_FbxLight_DrawFrontFacingVolumetricLight(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyBool1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->DrawFrontFacingVolumetricLight = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_DrawGroundProjection(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_DrawGroundProjection(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -318);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->DrawGroundProjection;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyBool1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -317, sipPySelf);
        sipKeepReference(sipPySelf, -318, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_DrawGroundProjection(void *, PyObject *, PyObject *);}
static int varset_FbxLight_DrawGroundProjection(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyBool1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->DrawGroundProjection = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_DrawVolumetricLight(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_DrawVolumetricLight(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -320);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->DrawVolumetricLight;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyBool1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -319, sipPySelf);
        sipKeepReference(sipPySelf, -320, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_DrawVolumetricLight(void *, PyObject *, PyObject *);}
static int varset_FbxLight_DrawVolumetricLight(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyBool1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->DrawVolumetricLight = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_EnableBarnDoor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_EnableBarnDoor(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -322);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->EnableBarnDoor;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyBool1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -321, sipPySelf);
        sipKeepReference(sipPySelf, -322, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_EnableBarnDoor(void *, PyObject *, PyObject *);}
static int varset_FbxLight_EnableBarnDoor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyBool1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->EnableBarnDoor = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_EnableFarAttenuation(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_EnableFarAttenuation(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -324);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->EnableFarAttenuation;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyBool1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -323, sipPySelf);
        sipKeepReference(sipPySelf, -324, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_EnableFarAttenuation(void *, PyObject *, PyObject *);}
static int varset_FbxLight_EnableFarAttenuation(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyBool1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->EnableFarAttenuation = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_EnableNearAttenuation(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_EnableNearAttenuation(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -326);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->EnableNearAttenuation;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyBool1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -325, sipPySelf);
        sipKeepReference(sipPySelf, -326, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_EnableNearAttenuation(void *, PyObject *, PyObject *);}
static int varset_FbxLight_EnableNearAttenuation(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyBool1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->EnableNearAttenuation = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_FarAttenuationEnd(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_FarAttenuationEnd(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -328);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->FarAttenuationEnd;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -327, sipPySelf);
        sipKeepReference(sipPySelf, -328, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_FarAttenuationEnd(void *, PyObject *, PyObject *);}
static int varset_FbxLight_FarAttenuationEnd(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FarAttenuationEnd = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_FarAttenuationStart(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_FarAttenuationStart(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -330);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->FarAttenuationStart;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -329, sipPySelf);
        sipKeepReference(sipPySelf, -330, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_FarAttenuationStart(void *, PyObject *, PyObject *);}
static int varset_FbxLight_FarAttenuationStart(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FarAttenuationStart = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_FileName(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_FileName(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyString*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -332);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->FileName;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyString, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -331, sipPySelf);
        sipKeepReference(sipPySelf, -332, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_FileName(void *, PyObject *, PyObject *);}
static int varset_FbxLight_FileName(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyString*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyString *>(sipForceConvertToType(sipPy, sipType_FbxPropertyString, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FileName = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_Fog(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_Fog(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -334);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->Fog;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -333, sipPySelf);
        sipKeepReference(sipPySelf, -334, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_Fog(void *, PyObject *, PyObject *);}
static int varset_FbxLight_Fog(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Fog = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_InnerAngle(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_InnerAngle(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -336);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->InnerAngle;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -335, sipPySelf);
        sipKeepReference(sipPySelf, -336, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_InnerAngle(void *, PyObject *, PyObject *);}
static int varset_FbxLight_InnerAngle(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->InnerAngle = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_Intensity(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_Intensity(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -338);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->Intensity;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -337, sipPySelf);
        sipKeepReference(sipPySelf, -338, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_Intensity(void *, PyObject *, PyObject *);}
static int varset_FbxLight_Intensity(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Intensity = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_LeftBarnDoor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_LeftBarnDoor(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyFloat1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -340);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->LeftBarnDoor;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyFloat1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -339, sipPySelf);
        sipKeepReference(sipPySelf, -340, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_LeftBarnDoor(void *, PyObject *, PyObject *);}
static int varset_FbxLight_LeftBarnDoor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFloat1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyFloat1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyFloat1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->LeftBarnDoor = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_LightType(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_LightType(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyEType*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -342);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->LightType;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyEType, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -341, sipPySelf);
        sipKeepReference(sipPySelf, -342, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_LightType(void *, PyObject *, PyObject *);}
static int varset_FbxLight_LightType(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEType*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyEType *>(sipForceConvertToType(sipPy, sipType_FbxPropertyEType, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->LightType = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_NearAttenuationEnd(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_NearAttenuationEnd(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -344);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->NearAttenuationEnd;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -343, sipPySelf);
        sipKeepReference(sipPySelf, -344, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_NearAttenuationEnd(void *, PyObject *, PyObject *);}
static int varset_FbxLight_NearAttenuationEnd(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->NearAttenuationEnd = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_NearAttenuationStart(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_NearAttenuationStart(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -346);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->NearAttenuationStart;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -345, sipPySelf);
        sipKeepReference(sipPySelf, -346, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_NearAttenuationStart(void *, PyObject *, PyObject *);}
static int varset_FbxLight_NearAttenuationStart(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->NearAttenuationStart = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_OuterAngle(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_OuterAngle(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -348);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->OuterAngle;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -347, sipPySelf);
        sipKeepReference(sipPySelf, -348, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_OuterAngle(void *, PyObject *, PyObject *);}
static int varset_FbxLight_OuterAngle(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->OuterAngle = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_RightBarnDoor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_RightBarnDoor(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyFloat1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -350);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->RightBarnDoor;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyFloat1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -349, sipPySelf);
        sipKeepReference(sipPySelf, -350, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_RightBarnDoor(void *, PyObject *, PyObject *);}
static int varset_FbxLight_RightBarnDoor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFloat1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyFloat1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyFloat1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RightBarnDoor = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_ShadowColor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_ShadowColor(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyDouble3*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -352);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->ShadowColor;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -351, sipPySelf);
        sipKeepReference(sipPySelf, -352, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_ShadowColor(void *, PyObject *, PyObject *);}
static int varset_FbxLight_ShadowColor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyDouble3, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ShadowColor = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_TopBarnDoor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_TopBarnDoor(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::FbxPropertyFloat1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -354);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->TopBarnDoor;

    sipPy = sipConvertFromType(sipVal, sipType_FbxPropertyFloat1, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -353, sipPySelf);
        sipKeepReference(sipPySelf, -354, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_FbxLight_TopBarnDoor(void *, PyObject *, PyObject *);}
static int varset_FbxLight_TopBarnDoor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFloat1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;
    sipVal = reinterpret_cast< ::FbxPropertyFloat1 *>(sipForceConvertToType(sipPy, sipType_FbxPropertyFloat1, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->TopBarnDoor = *sipVal;

    return 0;
}

sipVariableDef variables_FbxLight[] = {
    {InstanceVariable, sipName_AreaLightShape, (PyMethodDef *)varget_FbxLight_AreaLightShape, (PyMethodDef *)varset_FbxLight_AreaLightShape, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_BottomBarnDoor, (PyMethodDef *)varget_FbxLight_BottomBarnDoor, (PyMethodDef *)varset_FbxLight_BottomBarnDoor, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_CastLight, (PyMethodDef *)varget_FbxLight_CastLight, (PyMethodDef *)varset_FbxLight_CastLight, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_CastShadows, (PyMethodDef *)varget_FbxLight_CastShadows, (PyMethodDef *)varset_FbxLight_CastShadows, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxLight_ClassId, (PyMethodDef *)varset_FbxLight_ClassId, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_Color, (PyMethodDef *)varget_FbxLight_Color, (PyMethodDef *)varset_FbxLight_Color, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_DecayStart, (PyMethodDef *)varget_FbxLight_DecayStart, (PyMethodDef *)varset_FbxLight_DecayStart, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_DecayType, (PyMethodDef *)varget_FbxLight_DecayType, (PyMethodDef *)varset_FbxLight_DecayType, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_DrawFrontFacingVolumetricLight, (PyMethodDef *)varget_FbxLight_DrawFrontFacingVolumetricLight, (PyMethodDef *)varset_FbxLight_DrawFrontFacingVolumetricLight, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_DrawGroundProjection, (PyMethodDef *)varget_FbxLight_DrawGroundProjection, (PyMethodDef *)varset_FbxLight_DrawGroundProjection, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_DrawVolumetricLight, (PyMethodDef *)varget_FbxLight_DrawVolumetricLight, (PyMethodDef *)varset_FbxLight_DrawVolumetricLight, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_EnableBarnDoor, (PyMethodDef *)varget_FbxLight_EnableBarnDoor, (PyMethodDef *)varset_FbxLight_EnableBarnDoor, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_EnableFarAttenuation, (PyMethodDef *)varget_FbxLight_EnableFarAttenuation, (PyMethodDef *)varset_FbxLight_EnableFarAttenuation, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_EnableNearAttenuation, (PyMethodDef *)varget_FbxLight_EnableNearAttenuation, (PyMethodDef *)varset_FbxLight_EnableNearAttenuation, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_FarAttenuationEnd, (PyMethodDef *)varget_FbxLight_FarAttenuationEnd, (PyMethodDef *)varset_FbxLight_FarAttenuationEnd, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_FarAttenuationStart, (PyMethodDef *)varget_FbxLight_FarAttenuationStart, (PyMethodDef *)varset_FbxLight_FarAttenuationStart, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_FileName, (PyMethodDef *)varget_FbxLight_FileName, (PyMethodDef *)varset_FbxLight_FileName, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_Fog, (PyMethodDef *)varget_FbxLight_Fog, (PyMethodDef *)varset_FbxLight_Fog, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_InnerAngle, (PyMethodDef *)varget_FbxLight_InnerAngle, (PyMethodDef *)varset_FbxLight_InnerAngle, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_Intensity, (PyMethodDef *)varget_FbxLight_Intensity, (PyMethodDef *)varset_FbxLight_Intensity, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_LeftBarnDoor, (PyMethodDef *)varget_FbxLight_LeftBarnDoor, (PyMethodDef *)varset_FbxLight_LeftBarnDoor, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_LightType, (PyMethodDef *)varget_FbxLight_LightType, (PyMethodDef *)varset_FbxLight_LightType, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_NearAttenuationEnd, (PyMethodDef *)varget_FbxLight_NearAttenuationEnd, (PyMethodDef *)varset_FbxLight_NearAttenuationEnd, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_NearAttenuationStart, (PyMethodDef *)varget_FbxLight_NearAttenuationStart, (PyMethodDef *)varset_FbxLight_NearAttenuationStart, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_OuterAngle, (PyMethodDef *)varget_FbxLight_OuterAngle, (PyMethodDef *)varset_FbxLight_OuterAngle, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_RightBarnDoor, (PyMethodDef *)varget_FbxLight_RightBarnDoor, (PyMethodDef *)varset_FbxLight_RightBarnDoor, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_ShadowColor, (PyMethodDef *)varget_FbxLight_ShadowColor, (PyMethodDef *)varset_FbxLight_ShadowColor, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_TopBarnDoor, (PyMethodDef *)varget_FbxLight_TopBarnDoor, (PyMethodDef *)varset_FbxLight_TopBarnDoor, SIP_NULLPTR, SIP_NULLPTR},
};


/* Define the enum members and ints to be added to this type. */
static sipIntInstanceDef intInstances_FbxLight[] = {
    {sipName_eRectangle, static_cast<int>( ::FbxLight::eRectangle)},
    {sipName_eSphere, static_cast<int>( ::FbxLight::eSphere)},
    {sipName_eNone, static_cast<int>( ::FbxLight::eNone)},
    {sipName_eLinear, static_cast<int>( ::FbxLight::eLinear)},
    {sipName_eQuadratic, static_cast<int>( ::FbxLight::eQuadratic)},
    {sipName_eCubic, static_cast<int>( ::FbxLight::eCubic)},
    {sipName_ePoint, static_cast<int>( ::FbxLight::ePoint)},
    {sipName_eDirectional, static_cast<int>( ::FbxLight::eDirectional)},
    {sipName_eSpot, static_cast<int>( ::FbxLight::eSpot)},
    {sipName_eArea, static_cast<int>( ::FbxLight::eArea)},
    {sipName_eVolume, static_cast<int>( ::FbxLight::eVolume)},
    {0, 0}
};


sipClassTypeDef sipTypeDef_fbx_FbxLight = {
    {
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxLight,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxLight,
        {0, 0, 1},
        5, methods_FbxLight,
        28, variables_FbxLight,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, intInstances_FbxLight, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_FbxLight,
    slots_FbxLight,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_FbxLight,
    cast_FbxLight,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
