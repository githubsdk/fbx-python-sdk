/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




class sipFbxLayerElement : public  ::FbxLayerElement
{
public:
    sipFbxLayerElement();
    sipFbxLayerElement(const  ::FbxLayerElement&);
    ~sipFbxLayerElement();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipFbxLayerElement(const sipFbxLayerElement &);
    sipFbxLayerElement &operator = (const sipFbxLayerElement &);
};

sipFbxLayerElement::sipFbxLayerElement():  ::FbxLayerElement(), sipPySelf(SIP_NULLPTR)
{
}

sipFbxLayerElement::sipFbxLayerElement(const  ::FbxLayerElement& a0):  ::FbxLayerElement(a0), sipPySelf(SIP_NULLPTR)
{
}

sipFbxLayerElement::~sipFbxLayerElement()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_FbxLayerElement_sTypeTextureStartIndex, "sTypeTextureStartIndex() -> int");

extern "C" {static PyObject *meth_FbxLayerElement_sTypeTextureStartIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerElement_sTypeTextureStartIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, "C", &sipSelf))
        {
            int sipRes = 0;

#line 102 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxlayerelement.sip"
    sipRes = FbxLayerElement::sTypeTextureStartIndex;
#line 88 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxLayerElement.cpp"

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLayerElement, sipName_sTypeTextureStartIndex, doc_FbxLayerElement_sTypeTextureStartIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLayerElement_sTypeTextureEndIndex, "sTypeTextureEndIndex() -> int");

extern "C" {static PyObject *meth_FbxLayerElement_sTypeTextureEndIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerElement_sTypeTextureEndIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, "C", &sipSelf))
        {
            int sipRes = 0;

#line 107 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxlayerelement.sip"
    sipRes = FbxLayerElement::sTypeTextureEndIndex;
#line 115 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxLayerElement.cpp"

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLayerElement, sipName_sTypeTextureEndIndex, doc_FbxLayerElement_sTypeTextureEndIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLayerElement_sTypeTextureCount, "sTypeTextureCount() -> int");

extern "C" {static PyObject *meth_FbxLayerElement_sTypeTextureCount(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerElement_sTypeTextureCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, "C", &sipSelf))
        {
            int sipRes = 0;

#line 112 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxlayerelement.sip"
    sipRes = FbxLayerElement::sTypeTextureCount;
#line 142 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxLayerElement.cpp"

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLayerElement, sipName_sTypeTextureCount, doc_FbxLayerElement_sTypeTextureCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLayerElement_sTypeNonTextureStartIndex, "sTypeNonTextureStartIndex() -> int");

extern "C" {static PyObject *meth_FbxLayerElement_sTypeNonTextureStartIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerElement_sTypeNonTextureStartIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, "C", &sipSelf))
        {
            int sipRes = 0;

#line 117 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxlayerelement.sip"
    sipRes = FbxLayerElement::sTypeNonTextureStartIndex;
#line 169 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxLayerElement.cpp"

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLayerElement, sipName_sTypeNonTextureStartIndex, doc_FbxLayerElement_sTypeNonTextureStartIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLayerElement_sTypeNonTextureEndIndex, "sTypeNonTextureEndIndex() -> int");

extern "C" {static PyObject *meth_FbxLayerElement_sTypeNonTextureEndIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerElement_sTypeNonTextureEndIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, "C", &sipSelf))
        {
            int sipRes = 0;

#line 122 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxlayerelement.sip"
    sipRes = FbxLayerElement::sTypeNonTextureEndIndex;
#line 196 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxLayerElement.cpp"

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLayerElement, sipName_sTypeNonTextureEndIndex, doc_FbxLayerElement_sTypeNonTextureEndIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLayerElement_sTypeNonTextureCount, "sTypeNonTextureCount() -> int");

extern "C" {static PyObject *meth_FbxLayerElement_sTypeNonTextureCount(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerElement_sTypeNonTextureCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, "C", &sipSelf))
        {
            int sipRes = 0;

#line 127 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxlayerelement.sip"
    sipRes = FbxLayerElement::sTypeNonTextureCount;
#line 223 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxLayerElement.cpp"

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLayerElement, sipName_sTypeNonTextureCount, doc_FbxLayerElement_sTypeNonTextureCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLayerElement_sTextureNames, "sTextureNames(int) -> str");

extern "C" {static PyObject *meth_FbxLayerElement_sTextureNames(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerElement_sTextureNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "Ci", &sipSelf, &a0))
        {
            const char*sipRes = 0;

#line 140 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxlayerelement.sip"
    sipRes = const_cast<const char *>(FbxLayerElement::sTextureNames[a0]);
#line 252 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxLayerElement.cpp"

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_FromString(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLayerElement, sipName_sTextureNames, doc_FbxLayerElement_sTextureNames);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLayerElement_sTextureUVNames, "sTextureUVNames(int) -> str");

extern "C" {static PyObject *meth_FbxLayerElement_sTextureUVNames(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerElement_sTextureUVNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "Ci", &sipSelf, &a0))
        {
            const char*sipRes = 0;

#line 145 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxlayerelement.sip"
    sipRes = const_cast<const char *>(FbxLayerElement::sTextureUVNames[a0]);
#line 287 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxLayerElement.cpp"

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_FromString(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLayerElement, sipName_sTextureUVNames, doc_FbxLayerElement_sTextureUVNames);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLayerElement_sNonTextureNames, "sNonTextureNames(int) -> str");

extern "C" {static PyObject *meth_FbxLayerElement_sNonTextureNames(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerElement_sNonTextureNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "Ci", &sipSelf, &a0))
        {
            const char*sipRes = 0;

#line 150 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxlayerelement.sip"
    sipRes = const_cast<const char *>(FbxLayerElement::sNonTextureNames[a0]);
#line 322 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxLayerElement.cpp"

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_FromString(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLayerElement, sipName_sNonTextureNames, doc_FbxLayerElement_sNonTextureNames);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLayerElement_sTextureDataTypes, "sTextureDataTypes(int) -> FbxDataType");

extern "C" {static PyObject *meth_FbxLayerElement_sTextureDataTypes(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerElement_sTextureDataTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "Ci", &sipSelf, &a0))
        {
            const  ::FbxDataType*sipRes = 0;

#line 155 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxlayerelement.sip"
    sipRes = &(FbxLayerElement::sTextureDataTypes[a0]);
#line 357 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxLayerElement.cpp"

            return sipConvertFromType(const_cast< ::FbxDataType *>(sipRes),sipType_FbxDataType,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLayerElement, sipName_sTextureDataTypes, doc_FbxLayerElement_sTextureDataTypes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLayerElement_sTextureChannelNames, "sTextureChannelNames(int) -> str");

extern "C" {static PyObject *meth_FbxLayerElement_sTextureChannelNames(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerElement_sTextureChannelNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "Ci", &sipSelf, &a0))
        {
            const char*sipRes = 0;

#line 160 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxlayerelement.sip"
    sipRes = const_cast<const char *>(FbxLayerElement::sTextureChannelNames[a0]);
#line 386 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxLayerElement.cpp"

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_FromString(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLayerElement, sipName_sTextureChannelNames, doc_FbxLayerElement_sTextureChannelNames);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLayerElement_SetMappingMode, "SetMappingMode(self, FbxLayerElement.EMappingMode)");

extern "C" {static PyObject *meth_FbxLayerElement_SetMappingMode(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerElement_SetMappingMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxLayerElement::EMappingMode a0;
         ::FbxLayerElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxLayerElement, &sipCpp, sipType_FbxLayerElement_EMappingMode, &a0))
        {
            sipCpp->SetMappingMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLayerElement, sipName_SetMappingMode, doc_FbxLayerElement_SetMappingMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLayerElement_SetReferenceMode, "SetReferenceMode(self, FbxLayerElement.EReferenceMode)");

extern "C" {static PyObject *meth_FbxLayerElement_SetReferenceMode(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerElement_SetReferenceMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxLayerElement::EReferenceMode a0;
         ::FbxLayerElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxLayerElement, &sipCpp, sipType_FbxLayerElement_EReferenceMode, &a0))
        {
            sipCpp->SetReferenceMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLayerElement, sipName_SetReferenceMode, doc_FbxLayerElement_SetReferenceMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLayerElement_GetMappingMode, "GetMappingMode(self) -> FbxLayerElement.EMappingMode");

extern "C" {static PyObject *meth_FbxLayerElement_GetMappingMode(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerElement_GetMappingMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxLayerElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLayerElement, &sipCpp))
        {
             ::FbxLayerElement::EMappingMode sipRes;

            sipRes = sipCpp->GetMappingMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_FbxLayerElement_EMappingMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLayerElement, sipName_GetMappingMode, doc_FbxLayerElement_GetMappingMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLayerElement_GetReferenceMode, "GetReferenceMode(self) -> FbxLayerElement.EReferenceMode");

extern "C" {static PyObject *meth_FbxLayerElement_GetReferenceMode(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerElement_GetReferenceMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxLayerElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLayerElement, &sipCpp))
        {
             ::FbxLayerElement::EReferenceMode sipRes;

            sipRes = sipCpp->GetReferenceMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_FbxLayerElement_EReferenceMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLayerElement, sipName_GetReferenceMode, doc_FbxLayerElement_GetReferenceMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLayerElement_SetName, "SetName(self, str)");

extern "C" {static PyObject *meth_FbxLayerElement_SetName(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerElement_SetName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxLayerElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxLayerElement, &sipCpp, &a0Keep, &a0))
        {
            sipCpp->SetName(a0);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLayerElement, sipName_SetName, doc_FbxLayerElement_SetName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLayerElement_GetName, "GetName(self) -> str");

extern "C" {static PyObject *meth_FbxLayerElement_GetName(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerElement_GetName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxLayerElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLayerElement, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->GetName();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_FromString(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLayerElement, sipName_GetName, doc_FbxLayerElement_GetName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxLayerElement_Destroy, "Destroy(self)");

extern "C" {static PyObject *meth_FbxLayerElement_Destroy(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerElement_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxLayerElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLayerElement, &sipCpp))
        {
            sipCpp->Destroy();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxLayerElement, sipName_Destroy, doc_FbxLayerElement_Destroy);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_FbxLayerElement___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxLayerElement___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxLayerElement *sipCpp = reinterpret_cast< ::FbxLayerElement *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxLayerElement));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxLayerElement* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxLayerElement, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxLayerElement::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxLayerElement, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxLayerElement___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxLayerElement___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxLayerElement *sipCpp = reinterpret_cast< ::FbxLayerElement *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxLayerElement));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxLayerElement* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxLayerElement, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxLayerElement::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxLayerElement, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxLayerElement(void *, int);}
static void release_FbxLayerElement(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipFbxLayerElement *>(sipCppV);
}


extern "C" {static void dealloc_FbxLayerElement(sipSimpleWrapper *);}
static void dealloc_FbxLayerElement(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipFbxLayerElement *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxLayerElement(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_FbxLayerElement(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxLayerElement(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipFbxLayerElement *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipFbxLayerElement();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::FbxLayerElement* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_FbxLayerElement, &a0))
        {
            sipCpp = new sipFbxLayerElement(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxLayerElement[] = {
    {(void *)slot_FbxLayerElement___ne__, ne_slot},
    {(void *)slot_FbxLayerElement___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxLayerElement[] = {
    {sipName_Destroy, meth_FbxLayerElement_Destroy, METH_VARARGS, doc_FbxLayerElement_Destroy},
    {sipName_GetMappingMode, meth_FbxLayerElement_GetMappingMode, METH_VARARGS, doc_FbxLayerElement_GetMappingMode},
    {sipName_GetName, meth_FbxLayerElement_GetName, METH_VARARGS, doc_FbxLayerElement_GetName},
    {sipName_GetReferenceMode, meth_FbxLayerElement_GetReferenceMode, METH_VARARGS, doc_FbxLayerElement_GetReferenceMode},
    {sipName_SetMappingMode, meth_FbxLayerElement_SetMappingMode, METH_VARARGS, doc_FbxLayerElement_SetMappingMode},
    {sipName_SetName, meth_FbxLayerElement_SetName, METH_VARARGS, doc_FbxLayerElement_SetName},
    {sipName_SetReferenceMode, meth_FbxLayerElement_SetReferenceMode, METH_VARARGS, doc_FbxLayerElement_SetReferenceMode},
    {sipName_sNonTextureNames, meth_FbxLayerElement_sNonTextureNames, METH_VARARGS, doc_FbxLayerElement_sNonTextureNames},
    {sipName_sTextureChannelNames, meth_FbxLayerElement_sTextureChannelNames, METH_VARARGS, doc_FbxLayerElement_sTextureChannelNames},
    {sipName_sTextureDataTypes, meth_FbxLayerElement_sTextureDataTypes, METH_VARARGS, doc_FbxLayerElement_sTextureDataTypes},
    {sipName_sTextureNames, meth_FbxLayerElement_sTextureNames, METH_VARARGS, doc_FbxLayerElement_sTextureNames},
    {sipName_sTextureUVNames, meth_FbxLayerElement_sTextureUVNames, METH_VARARGS, doc_FbxLayerElement_sTextureUVNames},
    {sipName_sTypeNonTextureCount, meth_FbxLayerElement_sTypeNonTextureCount, METH_VARARGS, doc_FbxLayerElement_sTypeNonTextureCount},
    {sipName_sTypeNonTextureEndIndex, meth_FbxLayerElement_sTypeNonTextureEndIndex, METH_VARARGS, doc_FbxLayerElement_sTypeNonTextureEndIndex},
    {sipName_sTypeNonTextureStartIndex, meth_FbxLayerElement_sTypeNonTextureStartIndex, METH_VARARGS, doc_FbxLayerElement_sTypeNonTextureStartIndex},
    {sipName_sTypeTextureCount, meth_FbxLayerElement_sTypeTextureCount, METH_VARARGS, doc_FbxLayerElement_sTypeTextureCount},
    {sipName_sTypeTextureEndIndex, meth_FbxLayerElement_sTypeTextureEndIndex, METH_VARARGS, doc_FbxLayerElement_sTypeTextureEndIndex},
    {sipName_sTypeTextureStartIndex, meth_FbxLayerElement_sTypeTextureStartIndex, METH_VARARGS, doc_FbxLayerElement_sTypeTextureStartIndex}
};


/* Define the enum members and ints to be added to this type. */
static sipIntInstanceDef intInstances_FbxLayerElement[] = {
    {sipName_eNone, static_cast<int>( ::FbxLayerElement::eNone)},
    {sipName_eByControlPoint, static_cast<int>( ::FbxLayerElement::eByControlPoint)},
    {sipName_eByPolygonVertex, static_cast<int>( ::FbxLayerElement::eByPolygonVertex)},
    {sipName_eByPolygon, static_cast<int>( ::FbxLayerElement::eByPolygon)},
    {sipName_eByEdge, static_cast<int>( ::FbxLayerElement::eByEdge)},
    {sipName_eAllSame, static_cast<int>( ::FbxLayerElement::eAllSame)},
    {sipName_eDirect, static_cast<int>( ::FbxLayerElement::eDirect)},
    {sipName_eIndex, static_cast<int>( ::FbxLayerElement::eIndex)},
    {sipName_eIndexToDirect, static_cast<int>( ::FbxLayerElement::eIndexToDirect)},
    {sipName_eUnknown, static_cast<int>( ::FbxLayerElement::eUnknown)},
    {sipName_eNormal, static_cast<int>( ::FbxLayerElement::eNormal)},
    {sipName_eBiNormal, static_cast<int>( ::FbxLayerElement::eBiNormal)},
    {sipName_eTangent, static_cast<int>( ::FbxLayerElement::eTangent)},
    {sipName_eMaterial, static_cast<int>( ::FbxLayerElement::eMaterial)},
    {sipName_ePolygonGroup, static_cast<int>( ::FbxLayerElement::ePolygonGroup)},
    {sipName_eUV, static_cast<int>( ::FbxLayerElement::eUV)},
    {sipName_eVertexColor, static_cast<int>( ::FbxLayerElement::eVertexColor)},
    {sipName_eSmoothing, static_cast<int>( ::FbxLayerElement::eSmoothing)},
    {sipName_eVertexCrease, static_cast<int>( ::FbxLayerElement::eVertexCrease)},
    {sipName_eEdgeCrease, static_cast<int>( ::FbxLayerElement::eEdgeCrease)},
    {sipName_eHole, static_cast<int>( ::FbxLayerElement::eHole)},
    {sipName_eUserData, static_cast<int>( ::FbxLayerElement::eUserData)},
    {sipName_eVisibility, static_cast<int>( ::FbxLayerElement::eVisibility)},
    {sipName_eTextureDiffuse, static_cast<int>( ::FbxLayerElement::eTextureDiffuse)},
    {sipName_eTextureDiffuseFactor, static_cast<int>( ::FbxLayerElement::eTextureDiffuseFactor)},
    {sipName_eTextureEmissive, static_cast<int>( ::FbxLayerElement::eTextureEmissive)},
    {sipName_eTextureEmissiveFactor, static_cast<int>( ::FbxLayerElement::eTextureEmissiveFactor)},
    {sipName_eTextureAmbient, static_cast<int>( ::FbxLayerElement::eTextureAmbient)},
    {sipName_eTextureAmbientFactor, static_cast<int>( ::FbxLayerElement::eTextureAmbientFactor)},
    {sipName_eTextureSpecular, static_cast<int>( ::FbxLayerElement::eTextureSpecular)},
    {sipName_eTextureSpecularFactor, static_cast<int>( ::FbxLayerElement::eTextureSpecularFactor)},
    {sipName_eTextureShininess, static_cast<int>( ::FbxLayerElement::eTextureShininess)},
    {sipName_eTextureNormalMap, static_cast<int>( ::FbxLayerElement::eTextureNormalMap)},
    {sipName_eTextureBump, static_cast<int>( ::FbxLayerElement::eTextureBump)},
    {sipName_eTextureTransparency, static_cast<int>( ::FbxLayerElement::eTextureTransparency)},
    {sipName_eTextureTransparencyFactor, static_cast<int>( ::FbxLayerElement::eTextureTransparencyFactor)},
    {sipName_eTextureReflection, static_cast<int>( ::FbxLayerElement::eTextureReflection)},
    {sipName_eTextureReflectionFactor, static_cast<int>( ::FbxLayerElement::eTextureReflectionFactor)},
    {sipName_eTextureDisplacement, static_cast<int>( ::FbxLayerElement::eTextureDisplacement)},
    {sipName_eTextureDisplacementVector, static_cast<int>( ::FbxLayerElement::eTextureDisplacementVector)},
    {sipName_eTypeCount, static_cast<int>( ::FbxLayerElement::eTypeCount)},
    {0, 0}
};

PyDoc_STRVAR(doc_FbxLayerElement, "\1FbxLayerElement()\n"
"FbxLayerElement(FbxLayerElement)");


sipClassTypeDef sipTypeDef_fbx_FbxLayerElement = {
    {
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxLayerElement,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxLayerElement,
        {0, 0, 1},
        18, methods_FbxLayerElement,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, intInstances_FbxLayerElement, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_FbxLayerElement,
    -1,
    -1,
    SIP_NULLPTR,
    slots_FbxLayerElement,
    init_type_FbxLayerElement,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_FbxLayerElement,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_FbxLayerElement,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
