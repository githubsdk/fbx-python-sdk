/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"


#line 4 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxstatus.sip"
#include <fbxsdk.h>
#line 44 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxAnimCurveFilterKeyReducer.cpp"


class sipFbxAnimCurveFilterKeyReducer : public  ::FbxAnimCurveFilterKeyReducer
{
public:
    sipFbxAnimCurveFilterKeyReducer();
    sipFbxAnimCurveFilterKeyReducer(const  ::FbxAnimCurveFilterKeyReducer&);
    virtual ~sipFbxAnimCurveFilterKeyReducer();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    const char* GetName() const SIP_OVERRIDE;
    bool NeedApply( ::FbxAnimStack*, ::FbxStatus*) SIP_OVERRIDE;
    bool NeedApply( ::FbxObject*, ::FbxAnimStack*, ::FbxStatus*) SIP_OVERRIDE;
    bool NeedApply( ::FbxAnimCurveNode&, ::FbxStatus*) SIP_OVERRIDE;
    bool NeedApply( ::FbxAnimCurve**,int, ::FbxStatus*) SIP_OVERRIDE;
    bool NeedApply( ::FbxAnimCurve&, ::FbxStatus*) SIP_OVERRIDE;
    bool Apply( ::FbxAnimStack*, ::FbxStatus*) SIP_OVERRIDE;
    bool Apply( ::FbxObject*, ::FbxAnimStack*, ::FbxStatus*) SIP_OVERRIDE;
    bool Apply( ::FbxAnimCurveNode&, ::FbxStatus*) SIP_OVERRIDE;
    bool Apply( ::FbxAnimCurve**,int, ::FbxStatus*) SIP_OVERRIDE;
    bool Apply( ::FbxAnimCurve&, ::FbxStatus*) SIP_OVERRIDE;
    void Reset() SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipFbxAnimCurveFilterKeyReducer(const sipFbxAnimCurveFilterKeyReducer &);
    sipFbxAnimCurveFilterKeyReducer &operator = (const sipFbxAnimCurveFilterKeyReducer &);

    char sipPyMethods[12];
};

sipFbxAnimCurveFilterKeyReducer::sipFbxAnimCurveFilterKeyReducer():  ::FbxAnimCurveFilterKeyReducer(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipFbxAnimCurveFilterKeyReducer::sipFbxAnimCurveFilterKeyReducer(const  ::FbxAnimCurveFilterKeyReducer& a0):  ::FbxAnimCurveFilterKeyReducer(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipFbxAnimCurveFilterKeyReducer::~sipFbxAnimCurveFilterKeyReducer()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const char* sipFbxAnimCurveFilterKeyReducer::GetName() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetName);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterKeyReducer::GetName();

    extern const char* sipVH_fbx_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_fbx_27(sipGILState, 0, sipPySelf, sipMeth, -1496);
}

bool sipFbxAnimCurveFilterKeyReducer::NeedApply( ::FbxAnimStack*a0, ::FbxStatus*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_NeedApply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterKeyReducer::NeedApply(a0,a1);

    extern bool sipVH_fbx_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimStack*, ::FbxStatus*);

    return sipVH_fbx_28(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipFbxAnimCurveFilterKeyReducer::NeedApply( ::FbxObject*a0, ::FbxAnimStack*a1, ::FbxStatus*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_NeedApply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterKeyReducer::NeedApply(a0,a1,a2);

    extern bool sipVH_fbx_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxObject*, ::FbxAnimStack*, ::FbxStatus*);

    return sipVH_fbx_29(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipFbxAnimCurveFilterKeyReducer::NeedApply( ::FbxAnimCurveNode& a0, ::FbxStatus*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_NeedApply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterKeyReducer::NeedApply(a0,a1);

    extern bool sipVH_fbx_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimCurveNode&, ::FbxStatus*);

    return sipVH_fbx_30(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipFbxAnimCurveFilterKeyReducer::NeedApply( ::FbxAnimCurve**a0,int a1, ::FbxStatus*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_NeedApply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterKeyReducer::NeedApply(a0,a1,a2);

    extern bool sipVH_fbx_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimCurve**,int, ::FbxStatus*);

    return sipVH_fbx_31(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipFbxAnimCurveFilterKeyReducer::NeedApply( ::FbxAnimCurve& a0, ::FbxStatus*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_NeedApply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterKeyReducer::NeedApply(a0,a1);

    extern bool sipVH_fbx_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimCurve&, ::FbxStatus*);

    return sipVH_fbx_32(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipFbxAnimCurveFilterKeyReducer::Apply( ::FbxAnimStack*a0, ::FbxStatus*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_Apply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterKeyReducer::Apply(a0,a1);

    extern bool sipVH_fbx_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimStack*, ::FbxStatus*);

    return sipVH_fbx_28(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipFbxAnimCurveFilterKeyReducer::Apply( ::FbxObject*a0, ::FbxAnimStack*a1, ::FbxStatus*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_Apply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterKeyReducer::Apply(a0,a1,a2);

    extern bool sipVH_fbx_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxObject*, ::FbxAnimStack*, ::FbxStatus*);

    return sipVH_fbx_29(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipFbxAnimCurveFilterKeyReducer::Apply( ::FbxAnimCurveNode& a0, ::FbxStatus*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_Apply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterKeyReducer::Apply(a0,a1);

    extern bool sipVH_fbx_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimCurveNode&, ::FbxStatus*);

    return sipVH_fbx_30(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipFbxAnimCurveFilterKeyReducer::Apply( ::FbxAnimCurve**a0,int a1, ::FbxStatus*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_Apply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterKeyReducer::Apply(a0,a1,a2);

    extern bool sipVH_fbx_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimCurve**,int, ::FbxStatus*);

    return sipVH_fbx_31(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipFbxAnimCurveFilterKeyReducer::Apply( ::FbxAnimCurve& a0, ::FbxStatus*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_Apply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterKeyReducer::Apply(a0,a1);

    extern bool sipVH_fbx_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimCurve&, ::FbxStatus*);

    return sipVH_fbx_32(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipFbxAnimCurveFilterKeyReducer::Reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[11], &sipPySelf, SIP_NULLPTR, sipName_Reset);

    if (!sipMeth)
    {
         ::FbxAnimCurveFilterKeyReducer::Reset();
        return;
    }

    extern void sipVH_fbx_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_fbx_0(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterKeyReducer_GetName, "GetName(self) -> str");

extern "C" {static PyObject *meth_FbxAnimCurveFilterKeyReducer_GetName(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterKeyReducer_GetName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxAnimCurveFilterKeyReducer)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxAnimCurveFilterKeyReducer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveFilterKeyReducer, &sipCpp))
        {
            const char*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterKeyReducer::GetName() : sipCpp->GetName());

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_FromString(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterKeyReducer, sipName_GetName, doc_FbxAnimCurveFilterKeyReducer_GetName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterKeyReducer_Apply, "Apply(self, FbxAnimStack, FbxStatus = None) -> bool\n"
"Apply(self, FbxObject, FbxAnimStack, FbxStatus = None) -> bool\n"
"Apply(self, FbxAnimCurveNode, FbxStatus = None) -> bool\n"
"Apply(self, int, FbxStatus = None) -> Tuple[bool, FbxAnimCurve]\n"
"Apply(self, FbxAnimCurve, FbxStatus = None) -> bool");

extern "C" {static PyObject *meth_FbxAnimCurveFilterKeyReducer_Apply(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterKeyReducer_Apply(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxAnimCurveFilterKeyReducer)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxAnimStack* a0;
         ::FbxStatus* a1 = 0;
         ::FbxAnimCurveFilterKeyReducer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|J8", &sipSelf, sipType_FbxAnimCurveFilterKeyReducer, &sipCpp, sipType_FbxAnimStack, &a0, sipType_FbxStatus, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterKeyReducer::Apply(a0,a1) : sipCpp->Apply(a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::FbxObject* a0;
         ::FbxAnimStack* a1;
         ::FbxStatus* a2 = 0;
         ::FbxAnimCurveFilterKeyReducer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8|J8", &sipSelf, sipType_FbxAnimCurveFilterKeyReducer, &sipCpp, sipType_FbxObject, &a0, sipType_FbxAnimStack, &a1, sipType_FbxStatus, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterKeyReducer::Apply(a0,a1,a2) : sipCpp->Apply(a0,a1,a2));

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::FbxAnimCurveNode* a0;
         ::FbxStatus* a1 = 0;
         ::FbxAnimCurveFilterKeyReducer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|J8", &sipSelf, sipType_FbxAnimCurveFilterKeyReducer, &sipCpp, sipType_FbxAnimCurveNode, &a0, sipType_FbxStatus, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterKeyReducer::Apply(*a0,a1) : sipCpp->Apply(*a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::FbxAnimCurve* a0;
        int a1;
         ::FbxStatus* a2 = 0;
         ::FbxAnimCurveFilterKeyReducer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|J8", &sipSelf, sipType_FbxAnimCurveFilterKeyReducer, &sipCpp, &a1, sipType_FbxStatus, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterKeyReducer::Apply(&a0,a1,a2) : sipCpp->Apply(&a0,a1,a2));

            return sipBuildResult(0,"(bD)",sipRes,a0,sipType_FbxAnimCurve,SIP_NULLPTR);
        }
    }

    {
         ::FbxAnimCurve* a0;
         ::FbxStatus* a1 = 0;
         ::FbxAnimCurveFilterKeyReducer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|J8", &sipSelf, sipType_FbxAnimCurveFilterKeyReducer, &sipCpp, sipType_FbxAnimCurve, &a0, sipType_FbxStatus, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterKeyReducer::Apply(*a0,a1) : sipCpp->Apply(*a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterKeyReducer, sipName_Apply, doc_FbxAnimCurveFilterKeyReducer_Apply);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterKeyReducer_Reset, "Reset(self)");

extern "C" {static PyObject *meth_FbxAnimCurveFilterKeyReducer_Reset(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterKeyReducer_Reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxAnimCurveFilterKeyReducer)) || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxAnimCurveFilterKeyReducer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveFilterKeyReducer, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterKeyReducer::Reset() : sipCpp->Reset());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterKeyReducer, sipName_Reset, doc_FbxAnimCurveFilterKeyReducer_Reset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterKeyReducer_GetPrecision, "GetPrecision(self) -> float");

extern "C" {static PyObject *meth_FbxAnimCurveFilterKeyReducer_GetPrecision(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterKeyReducer_GetPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxAnimCurveFilterKeyReducer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveFilterKeyReducer, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->GetPrecision();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterKeyReducer, sipName_GetPrecision, doc_FbxAnimCurveFilterKeyReducer_GetPrecision);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterKeyReducer_SetPrecision, "SetPrecision(self, float)");

extern "C" {static PyObject *meth_FbxAnimCurveFilterKeyReducer_SetPrecision(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterKeyReducer_SetPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
         ::FbxAnimCurveFilterKeyReducer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_FbxAnimCurveFilterKeyReducer, &sipCpp, &a0))
        {
            sipCpp->SetPrecision(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterKeyReducer, sipName_SetPrecision, doc_FbxAnimCurveFilterKeyReducer_SetPrecision);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterKeyReducer_GetKeySync, "GetKeySync(self) -> bool");

extern "C" {static PyObject *meth_FbxAnimCurveFilterKeyReducer_GetKeySync(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterKeyReducer_GetKeySync(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxAnimCurveFilterKeyReducer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveFilterKeyReducer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetKeySync();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterKeyReducer, sipName_GetKeySync, doc_FbxAnimCurveFilterKeyReducer_GetKeySync);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterKeyReducer_SetKeySync, "SetKeySync(self, bool)");

extern "C" {static PyObject *meth_FbxAnimCurveFilterKeyReducer_SetKeySync(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterKeyReducer_SetKeySync(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::FbxAnimCurveFilterKeyReducer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxAnimCurveFilterKeyReducer, &sipCpp, &a0))
        {
            sipCpp->SetKeySync(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterKeyReducer, sipName_SetKeySync, doc_FbxAnimCurveFilterKeyReducer_SetKeySync);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxAnimCurveFilterKeyReducer(void *, const sipTypeDef *);}
static void *cast_FbxAnimCurveFilterKeyReducer(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxAnimCurveFilterKeyReducer *sipCpp = reinterpret_cast< ::FbxAnimCurveFilterKeyReducer *>(sipCppV);

    if (targetType == sipType_FbxAnimCurveFilterKeyReducer)
        return sipCppV;

    if (targetType == sipType_FbxAnimCurveFilter)
        return static_cast< ::FbxAnimCurveFilter *>(sipCpp);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxAnimCurveFilterKeyReducer(void *, int);}
static void release_FbxAnimCurveFilterKeyReducer(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipFbxAnimCurveFilterKeyReducer *>(sipCppV);
    else
        delete reinterpret_cast< ::FbxAnimCurveFilterKeyReducer *>(sipCppV);
}


extern "C" {static void *array_FbxAnimCurveFilterKeyReducer(Py_ssize_t);}
static void *array_FbxAnimCurveFilterKeyReducer(Py_ssize_t sipNrElem)
{
    return new  ::FbxAnimCurveFilterKeyReducer[sipNrElem];
}


extern "C" {static void assign_FbxAnimCurveFilterKeyReducer(void *, Py_ssize_t, void *);}
static void assign_FbxAnimCurveFilterKeyReducer(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::FbxAnimCurveFilterKeyReducer *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::FbxAnimCurveFilterKeyReducer *>(sipSrc);
}


extern "C" {static void *copy_FbxAnimCurveFilterKeyReducer(const void *, Py_ssize_t);}
static void *copy_FbxAnimCurveFilterKeyReducer(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::FbxAnimCurveFilterKeyReducer(reinterpret_cast<const  ::FbxAnimCurveFilterKeyReducer *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxAnimCurveFilterKeyReducer(sipSimpleWrapper *);}
static void dealloc_FbxAnimCurveFilterKeyReducer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipFbxAnimCurveFilterKeyReducer *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxAnimCurveFilterKeyReducer(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_FbxAnimCurveFilterKeyReducer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxAnimCurveFilterKeyReducer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipFbxAnimCurveFilterKeyReducer *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipFbxAnimCurveFilterKeyReducer();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::FbxAnimCurveFilterKeyReducer* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_FbxAnimCurveFilterKeyReducer, &a0))
        {
            sipCpp = new sipFbxAnimCurveFilterKeyReducer(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxAnimCurveFilterKeyReducer[] = {{17, 255, 1}};


static PyMethodDef methods_FbxAnimCurveFilterKeyReducer[] = {
    {sipName_Apply, meth_FbxAnimCurveFilterKeyReducer_Apply, METH_VARARGS, doc_FbxAnimCurveFilterKeyReducer_Apply},
    {sipName_GetKeySync, meth_FbxAnimCurveFilterKeyReducer_GetKeySync, METH_VARARGS, doc_FbxAnimCurveFilterKeyReducer_GetKeySync},
    {sipName_GetName, meth_FbxAnimCurveFilterKeyReducer_GetName, METH_VARARGS, doc_FbxAnimCurveFilterKeyReducer_GetName},
    {sipName_GetPrecision, meth_FbxAnimCurveFilterKeyReducer_GetPrecision, METH_VARARGS, doc_FbxAnimCurveFilterKeyReducer_GetPrecision},
    {sipName_Reset, meth_FbxAnimCurveFilterKeyReducer_Reset, METH_VARARGS, doc_FbxAnimCurveFilterKeyReducer_Reset},
    {sipName_SetKeySync, meth_FbxAnimCurveFilterKeyReducer_SetKeySync, METH_VARARGS, doc_FbxAnimCurveFilterKeyReducer_SetKeySync},
    {sipName_SetPrecision, meth_FbxAnimCurveFilterKeyReducer_SetPrecision, METH_VARARGS, doc_FbxAnimCurveFilterKeyReducer_SetPrecision}
};

PyDoc_STRVAR(doc_FbxAnimCurveFilterKeyReducer, "\1FbxAnimCurveFilterKeyReducer()\n"
"FbxAnimCurveFilterKeyReducer(FbxAnimCurveFilterKeyReducer)");


sipClassTypeDef sipTypeDef_fbx_FbxAnimCurveFilterKeyReducer = {
    {
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_FbxAnimCurveFilterKeyReducer,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxAnimCurveFilterKeyReducer,
        {0, 0, 1},
        7, methods_FbxAnimCurveFilterKeyReducer,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_FbxAnimCurveFilterKeyReducer,
    -1,
    -1,
    supers_FbxAnimCurveFilterKeyReducer,
    SIP_NULLPTR,
    init_type_FbxAnimCurveFilterKeyReducer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_FbxAnimCurveFilterKeyReducer,
    assign_FbxAnimCurveFilterKeyReducer,
    array_FbxAnimCurveFilterKeyReducer,
    copy_FbxAnimCurveFilterKeyReducer,
    release_FbxAnimCurveFilterKeyReducer,
    cast_FbxAnimCurveFilterKeyReducer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
