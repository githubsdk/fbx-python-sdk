/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.6.2
 *
 * Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxString_GetLen, "GetLen(self) -> int");

extern "C" {static PyObject *meth_FbxString_GetLen(PyObject *, PyObject *);}
static PyObject *meth_FbxString_GetLen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxString, &sipCpp))
        {
            size_t sipRes;

            sipRes = sipCpp->GetLen();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxString, sipName_GetLen, doc_FbxString_GetLen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxString_Size, "Size(self) -> int");

extern "C" {static PyObject *meth_FbxString_Size(PyObject *, PyObject *);}
static PyObject *meth_FbxString_Size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxString, &sipCpp))
        {
            size_t sipRes;

            sipRes = sipCpp->Size();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxString, sipName_Size, doc_FbxString_Size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxString_IsEmpty, "IsEmpty(self) -> bool");

extern "C" {static PyObject *meth_FbxString_IsEmpty(PyObject *, PyObject *);}
static PyObject *meth_FbxString_IsEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxString, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->IsEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxString, sipName_IsEmpty, doc_FbxString_IsEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxString_Clear, "Clear(self) -> FbxString");

extern "C" {static PyObject *meth_FbxString_Clear(PyObject *, PyObject *);}
static PyObject *meth_FbxString_Clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxString, &sipCpp))
        {
             ::FbxString*sipRes;

            sipRes = &sipCpp->Clear();

            return sipConvertFromType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxString, sipName_Clear, doc_FbxString_Clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxString_Buffer, "Buffer(self) -> str");

extern "C" {static PyObject *meth_FbxString_Buffer(PyObject *, PyObject *);}
static PyObject *meth_FbxString_Buffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxString, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->Buffer();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_FromString(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxString, sipName_Buffer, doc_FbxString_Buffer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxString_Swap, "Swap(self, FbxString)");

extern "C" {static PyObject *meth_FbxString_Swap(PyObject *, PyObject *);}
static PyObject *meth_FbxString_Swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxString* a0;
        int a0State = 0;
         ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_FbxString, &sipCpp, sipType_FbxString, &a0, &a0State))
        {
            sipCpp->Swap(*a0);
            sipReleaseType(a0, sipType_FbxString, a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxString, sipName_Swap, doc_FbxString_Swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxString_Append, "Append(self, str, int) -> FbxString");

extern "C" {static PyObject *meth_FbxString_Append(PyObject *, PyObject *);}
static PyObject *meth_FbxString_Append(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        size_t a1;
         ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8=", &sipSelf, sipType_FbxString, &sipCpp, &a0Keep, &a0, &a1))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString(sipCpp->Append(a0,a1));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxString, sipName_Append, doc_FbxString_Append);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxString_Compare, "Compare(self, str) -> int");

extern "C" {static PyObject *meth_FbxString_Compare(PyObject *, PyObject *);}
static PyObject *meth_FbxString_Compare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxString, &sipCpp, &a0Keep, &a0))
        {
            int sipRes;

            sipRes = sipCpp->Compare(a0);
            Py_DECREF(a0Keep);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxString, sipName_Compare, doc_FbxString_Compare);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxString_CompareNoCase, "CompareNoCase(self, str) -> int");

extern "C" {static PyObject *meth_FbxString_CompareNoCase(PyObject *, PyObject *);}
static PyObject *meth_FbxString_CompareNoCase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxString, &sipCpp, &a0Keep, &a0))
        {
            int sipRes;

            sipRes = sipCpp->CompareNoCase(a0);
            Py_DECREF(a0Keep);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxString, sipName_CompareNoCase, doc_FbxString_CompareNoCase);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxString_Copy, "Copy(self, str, int) -> FbxString");

extern "C" {static PyObject *meth_FbxString_Copy(PyObject *, PyObject *);}
static PyObject *meth_FbxString_Copy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        size_t a1;
         ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8=", &sipSelf, sipType_FbxString, &sipCpp, &a0Keep, &a0, &a1))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString(sipCpp->Copy(a0,a1));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxString, sipName_Copy, doc_FbxString_Copy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxString_Find, "Find(self, str, int = 0) -> int\n"
"Find(self, str, int = 0) -> int");

extern "C" {static PyObject *meth_FbxString_Find(PyObject *, PyObject *);}
static PyObject *meth_FbxString_Find(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        char a0;
        size_t a1 = 0;
        const  ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Ba8|=", &sipSelf, sipType_FbxString, &sipCpp, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->Find(a0,a1);

            return PyLong_FromLong(sipRes);
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        size_t a1 = 0;
        const  ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8|=", &sipSelf, sipType_FbxString, &sipCpp, &a0Keep, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->Find(a0,a1);
            Py_DECREF(a0Keep);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxString, sipName_Find, doc_FbxString_Find);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxString_ReverseFind, "ReverseFind(self, str) -> int");

extern "C" {static PyObject *meth_FbxString_ReverseFind(PyObject *, PyObject *);}
static PyObject *meth_FbxString_ReverseFind(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        char a0;
        const  ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Ba8", &sipSelf, sipType_FbxString, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->ReverseFind(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxString, sipName_ReverseFind, doc_FbxString_ReverseFind);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxString_FindOneOf, "FindOneOf(self, str, int = 0) -> int");

extern "C" {static PyObject *meth_FbxString_FindOneOf(PyObject *, PyObject *);}
static PyObject *meth_FbxString_FindOneOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        size_t a1 = 0;
        const  ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8|=", &sipSelf, sipType_FbxString, &sipCpp, &a0Keep, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->FindOneOf(a0,a1);
            Py_DECREF(a0Keep);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxString, sipName_FindOneOf, doc_FbxString_FindOneOf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxString_FindAndReplace, "FindAndReplace(self, str, str, int = 0) -> bool");

extern "C" {static PyObject *meth_FbxString_FindAndReplace(PyObject *, PyObject *);}
static PyObject *meth_FbxString_FindAndReplace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const char* a1;
        PyObject *a1Keep;
        size_t a2 = 0;
         ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8A8|=", &sipSelf, sipType_FbxString, &sipCpp, &a0Keep, &a0, &a1Keep, &a1, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->FindAndReplace(a0,a1,a2);
            Py_DECREF(a0Keep);
            Py_DECREF(a1Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxString, sipName_FindAndReplace, doc_FbxString_FindAndReplace);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxString_ReplaceAll, "ReplaceAll(self, str, str) -> bool\n"
"ReplaceAll(self, str, str) -> bool");

extern "C" {static PyObject *meth_FbxString_ReplaceAll(PyObject *, PyObject *);}
static PyObject *meth_FbxString_ReplaceAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const char* a1;
        PyObject *a1Keep;
         ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8A8", &sipSelf, sipType_FbxString, &sipCpp, &a0Keep, &a0, &a1Keep, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->ReplaceAll(a0,a1);
            Py_DECREF(a0Keep);
            Py_DECREF(a1Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        char a0;
        char a1;
         ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Ba8a8", &sipSelf, sipType_FbxString, &sipCpp, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->ReplaceAll(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxString, sipName_ReplaceAll, doc_FbxString_ReplaceAll);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxString_Pad, "Pad(self, FbxString.EPaddingType, int, str = ' ') -> FbxString");

extern "C" {static PyObject *meth_FbxString_Pad(PyObject *, PyObject *);}
static PyObject *meth_FbxString_Pad(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxString::EPaddingType a0;
        size_t a1;
        char a2 = ' ';
        const  ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE=|a8", &sipSelf, sipType_FbxString, &sipCpp, sipType_FbxString_EPaddingType, &a0, &a1, &a2))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString(sipCpp->Pad(a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxString, sipName_Pad, doc_FbxString_Pad);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxString_UnPad, "UnPad(self, FbxString.EPaddingType) -> FbxString");

extern "C" {static PyObject *meth_FbxString_UnPad(PyObject *, PyObject *);}
static PyObject *meth_FbxString_UnPad(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::FbxString::EPaddingType a0;
        const  ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxString, &sipCpp, sipType_FbxString_EPaddingType, &a0))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString(sipCpp->UnPad(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxString, sipName_UnPad, doc_FbxString_UnPad);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxString_GetTokenCount, "GetTokenCount(self, str) -> int");

extern "C" {static PyObject *meth_FbxString_GetTokenCount(PyObject *, PyObject *);}
static PyObject *meth_FbxString_GetTokenCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxString, &sipCpp, &a0Keep, &a0))
        {
            int sipRes;

            sipRes = sipCpp->GetTokenCount(a0);
            Py_DECREF(a0Keep);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxString, sipName_GetTokenCount, doc_FbxString_GetTokenCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxString_GetToken, "GetToken(self, int, str) -> FbxString");

extern "C" {static PyObject *meth_FbxString_GetToken(PyObject *, PyObject *);}
static PyObject *meth_FbxString_GetToken(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const char* a1;
        PyObject *a1Keep;
        const  ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiA8", &sipSelf, sipType_FbxString, &sipCpp, &a0, &a1Keep, &a1))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString(sipCpp->GetToken(a0,a1));
            Py_DECREF(a1Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxString, sipName_GetToken, doc_FbxString_GetToken);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxString_Upper, "Upper(self) -> FbxString");

extern "C" {static PyObject *meth_FbxString_Upper(PyObject *, PyObject *);}
static PyObject *meth_FbxString_Upper(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxString, &sipCpp))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString(sipCpp->Upper());

            return sipConvertFromNewType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxString, sipName_Upper, doc_FbxString_Upper);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxString_Lower, "Lower(self) -> FbxString");

extern "C" {static PyObject *meth_FbxString_Lower(PyObject *, PyObject *);}
static PyObject *meth_FbxString_Lower(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxString, &sipCpp))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString(sipCpp->Lower());

            return sipConvertFromNewType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxString, sipName_Lower, doc_FbxString_Lower);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxString_Mid, "Mid(self, int, int) -> FbxString\n"
"Mid(self, int) -> FbxString");

extern "C" {static PyObject *meth_FbxString_Mid(PyObject *, PyObject *);}
static PyObject *meth_FbxString_Mid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        size_t a0;
        size_t a1;
        const  ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B==", &sipSelf, sipType_FbxString, &sipCpp, &a0, &a1))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString(sipCpp->Mid(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    {
        size_t a0;
        const  ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B=", &sipSelf, sipType_FbxString, &sipCpp, &a0))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString(sipCpp->Mid(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxString, sipName_Mid, doc_FbxString_Mid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxString_Left, "Left(self, int) -> FbxString");

extern "C" {static PyObject *meth_FbxString_Left(PyObject *, PyObject *);}
static PyObject *meth_FbxString_Left(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        size_t a0;
        const  ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B=", &sipSelf, sipType_FbxString, &sipCpp, &a0))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString(sipCpp->Left(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxString, sipName_Left, doc_FbxString_Left);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_FbxString_Right, "Right(self, int) -> FbxString");

extern "C" {static PyObject *meth_FbxString_Right(PyObject *, PyObject *);}
static PyObject *meth_FbxString_Right(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        size_t a0;
        const  ::FbxString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B=", &sipSelf, sipType_FbxString, &sipCpp, &a0))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString(sipCpp->Right(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxString, sipName_Right, doc_FbxString_Right);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_FbxString___add__(PyObject *,PyObject *);}
static PyObject *slot_FbxString___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxString* a0;
        int a0State = 0;
        const  ::FbxString* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1J1", sipType_FbxString, &a0, &a0State, sipType_FbxString, &a1, &a1State))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString((*a0 + *a1));
            sipReleaseType(const_cast< ::FbxString *>(a0), sipType_FbxString, a0State);
            sipReleaseType(const_cast< ::FbxString *>(a1), sipType_FbxString, a1State);

            return sipConvertFromNewType(sipRes,sipType_FbxString,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_FbxString___repr__(PyObject *);}
static PyObject *slot_FbxString___repr__(PyObject *sipSelf)
{
     ::FbxString *sipCpp = reinterpret_cast< ::FbxString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxString));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 104 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxstring.sip"
        sipRes = Py_BuildValue((char *)"s", sipCpp->Buffer());
#line 848 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxString.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_FbxString___str__(PyObject *);}
static PyObject *slot_FbxString___str__(PyObject *sipSelf)
{
     ::FbxString *sipCpp = reinterpret_cast< ::FbxString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxString));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 100 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxstring.sip"
        sipRes = Py_BuildValue((char *)"s", sipCpp->Buffer());
#line 873 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxString.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_FbxString___iadd__(PyObject *,PyObject *);}
static PyObject *slot_FbxString___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxString *sipCpp = reinterpret_cast< ::FbxString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxString));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_FbxString, &a0, &a0State))
        {
            sipCpp-> ::FbxString::operator+=(*a0);
            sipReleaseType(const_cast< ::FbxString *>(a0), sipType_FbxString, a0State);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    /* Raise an exception if the argument couldn't be parsed. */
    sipBadOperatorArg(sipSelf,sipArg,iconcat_slot);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_FbxString___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxString___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxString *sipCpp = reinterpret_cast< ::FbxString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxString));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_FbxString, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxString::operator!=(*a0);
            sipReleaseType(const_cast< ::FbxString *>(a0), sipType_FbxString, a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArg, "1A8", &a0Keep, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxString::operator!=(a0);
            Py_DECREF(a0Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxString, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxString___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxString___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxString *sipCpp = reinterpret_cast< ::FbxString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxString));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::FbxString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_FbxString, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxString::operator==(*a0);
            sipReleaseType(const_cast< ::FbxString *>(a0), sipType_FbxString, a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArg, "1A8", &a0Keep, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxString::operator==(a0);
            Py_DECREF(a0Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxString, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxString___getitem__(PyObject *,PyObject *);}
static PyObject *slot_FbxString___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxString *sipCpp = reinterpret_cast< ::FbxString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxString));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            char sipRes = 0;
            int sipIsErr = 0;

#line 81 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxstring.sip"
        if (a0 < 0 || size_t(a0) >= sipCpp->GetLen())
        {
            PyErr_Format(PyExc_IndexError, "sequence index out of range");
            sipIsErr = 1;
        }
        else
        {
            sipRes = (*sipCpp)[a0];
        }
#line 1040 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxString.cpp"

            if (sipIsErr)
                return 0;

            return PyUnicode_FromStringAndSize(&sipRes, 1);
        }
    }

    sipNoMethod(sipParseErr, sipName_FbxString, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxString(void *, int);}
static void release_FbxString(void *sipCppV, int)
{
    delete reinterpret_cast< ::FbxString *>(sipCppV);
}


extern "C" {static void *array_FbxString(Py_ssize_t);}
static void *array_FbxString(Py_ssize_t sipNrElem)
{
    return new  ::FbxString[sipNrElem];
}


extern "C" {static void assign_FbxString(void *, Py_ssize_t, void *);}
static void assign_FbxString(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::FbxString *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::FbxString *>(sipSrc);
}


extern "C" {static void *copy_FbxString(const void *, Py_ssize_t);}
static void *copy_FbxString(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::FbxString(reinterpret_cast<const  ::FbxString *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxString(sipSimpleWrapper *);}
static void dealloc_FbxString(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxString(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_FbxString(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxString(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::FbxString *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::FbxString();

            return sipCpp;
        }
    }

    {
        const  ::FbxString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_FbxString, &a0, &a0State))
        {
            sipCpp = new  ::FbxString(*a0);
            sipReleaseType(const_cast< ::FbxString *>(a0), sipType_FbxString, a0State);

            return sipCpp;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "A8", &a0Keep, &a0))
        {
            sipCpp = new  ::FbxString(a0);
            Py_DECREF(a0Keep);

            return sipCpp;
        }
    }

    {
        float a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "f", &a0))
        {
            sipCpp = new  ::FbxString(a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_FbxString(PyObject *, void **, int *, PyObject *, void **);}
static int convertTo_FbxString(PyObject *sipPy, void **sipCppPtrV, int *sipIsErr, PyObject *sipTransferObj, void **)
{
     ::FbxString **sipCppPtr = reinterpret_cast< ::FbxString **>(sipCppPtrV);

#line 4 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\sip\\fbxstring.sip"
    if (sipIsErr == NULL)
        return (PyUnicode_Check(sipPy) ||
    #if PY_MAJOR_VERSION < 3
                PyString_Check(sipPy) ||
    #endif
                sipCanConvertToType(sipPy, sipType_FbxString, SIP_NO_CONVERTORS));

    if (PyUnicode_Check(sipPy))
    {
        *sipCppPtr = new FbxString(sipString_AsASCIIString(&sipPy));
    
        return sipGetState(sipTransferObj);
    }
    
    #if PY_MAJOR_VERSION < 3
    if (PyString_Check(sipPy))
    {
        *sipCppPtr = new FbxString(PyString_AS_STRING(sipPy));
    
        return sipGetState(sipTransferObj);
    }
    #endif
    
    *sipCppPtr = reinterpret_cast<FbxString *>(sipConvertToType(sipPy,
            sipType_FbxString, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));
    
    return 0;
#line 1182 "D:\\Program Files\\Autodesk\\FBX\\FBX Python Bindings\\2020.3.4\\build\\fbx/sipfbxFbxString.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxString[] = {
    {(void *)slot_FbxString___add__, add_slot},
    {(void *)slot_FbxString___repr__, repr_slot},
    {(void *)slot_FbxString___str__, str_slot},
    {(void *)slot_FbxString___iadd__, iconcat_slot},
    {(void *)slot_FbxString___ne__, ne_slot},
    {(void *)slot_FbxString___eq__, eq_slot},
    {(void *)slot_FbxString___getitem__, getitem_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxString[] = {
    {sipName_Append, meth_FbxString_Append, METH_VARARGS, doc_FbxString_Append},
    {sipName_Buffer, meth_FbxString_Buffer, METH_VARARGS, doc_FbxString_Buffer},
    {sipName_Clear, meth_FbxString_Clear, METH_VARARGS, doc_FbxString_Clear},
    {sipName_Compare, meth_FbxString_Compare, METH_VARARGS, doc_FbxString_Compare},
    {sipName_CompareNoCase, meth_FbxString_CompareNoCase, METH_VARARGS, doc_FbxString_CompareNoCase},
    {sipName_Copy, meth_FbxString_Copy, METH_VARARGS, doc_FbxString_Copy},
    {sipName_Find, meth_FbxString_Find, METH_VARARGS, doc_FbxString_Find},
    {sipName_FindAndReplace, meth_FbxString_FindAndReplace, METH_VARARGS, doc_FbxString_FindAndReplace},
    {sipName_FindOneOf, meth_FbxString_FindOneOf, METH_VARARGS, doc_FbxString_FindOneOf},
    {sipName_GetLen, meth_FbxString_GetLen, METH_VARARGS, doc_FbxString_GetLen},
    {sipName_GetToken, meth_FbxString_GetToken, METH_VARARGS, doc_FbxString_GetToken},
    {sipName_GetTokenCount, meth_FbxString_GetTokenCount, METH_VARARGS, doc_FbxString_GetTokenCount},
    {sipName_IsEmpty, meth_FbxString_IsEmpty, METH_VARARGS, doc_FbxString_IsEmpty},
    {sipName_Left, meth_FbxString_Left, METH_VARARGS, doc_FbxString_Left},
    {sipName_Lower, meth_FbxString_Lower, METH_VARARGS, doc_FbxString_Lower},
    {sipName_Mid, meth_FbxString_Mid, METH_VARARGS, doc_FbxString_Mid},
    {sipName_Pad, meth_FbxString_Pad, METH_VARARGS, doc_FbxString_Pad},
    {sipName_ReplaceAll, meth_FbxString_ReplaceAll, METH_VARARGS, doc_FbxString_ReplaceAll},
    {sipName_ReverseFind, meth_FbxString_ReverseFind, METH_VARARGS, doc_FbxString_ReverseFind},
    {sipName_Right, meth_FbxString_Right, METH_VARARGS, doc_FbxString_Right},
    {sipName_Size, meth_FbxString_Size, METH_VARARGS, doc_FbxString_Size},
    {sipName_Swap, meth_FbxString_Swap, METH_VARARGS, doc_FbxString_Swap},
    {sipName_UnPad, meth_FbxString_UnPad, METH_VARARGS, doc_FbxString_UnPad},
    {sipName_Upper, meth_FbxString_Upper, METH_VARARGS, doc_FbxString_Upper}
};


/* Define the enum members and ints to be added to this type. */
static sipIntInstanceDef intInstances_FbxString[] = {
    {sipName_eRight, static_cast<int>( ::FbxString::eRight)},
    {sipName_eLeft, static_cast<int>( ::FbxString::eLeft)},
    {sipName_eBoth, static_cast<int>( ::FbxString::eBoth)},
    {0, 0}
};

PyDoc_STRVAR(doc_FbxString, "\1FbxString()\n"
"FbxString(FbxString)\n"
"FbxString(str)\n"
"FbxString(float)");


sipClassTypeDef sipTypeDef_fbx_FbxString = {
    {
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_FbxString,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_FbxString,
        {0, 0, 1},
        24, methods_FbxString,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, intInstances_FbxString, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_FbxString,
    -1,
    -1,
    SIP_NULLPTR,
    slots_FbxString,
    init_type_FbxString,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_FbxString,
    assign_FbxString,
    array_FbxString,
    copy_FbxString,
    release_FbxString,
    SIP_NULLPTR,
    convertTo_FbxString,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
